// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using System.Threading.Tasks;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	public partial class HistoricalCorrelatedModel0_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the BaseSkillChangePrecisionPerGame property</summary>
		private double baseSkillChangePrecisionPerGame;
		public TruncatedGamma BaseSkillChangePrecisionPerGame_marginal;
		/// <summary>Field backing the BaseSkillChangePrecisionPerGameInitializer property</summary>
		private IDistribution<double> baseSkillChangePrecisionPerGameInitializer;
		/// <summary>Field backing the BaseSkillChangePrecisionPerMinute property</summary>
		private double baseSkillChangePrecisionPerMinute;
		public TruncatedGamma BaseSkillChangePrecisionPerMinute_marginal;
		/// <summary>Field backing the BaseSkillChangePrecisionPerMinuteInitializer property</summary>
		private IDistribution<double> baseSkillChangePrecisionPerMinuteInitializer;
		/// <summary>Field backing the BaseSkillPriorPrecision property</summary>
		private double baseSkillPriorPrecision;
		public TruncatedGamma BaseSkillPriorPrecision_marginal;
		/// <summary>Field backing the BaseSkillPriorPrecisionInitializer property</summary>
		private IDistribution<double> baseSkillPriorPrecisionInitializer;
		public DistributionStructArray<Gaussian,double> baseSkillPriorSample_F;
		public Gaussian baseSkillPriorSample_F_reduced;
		/// <summary>Field backing the BaseSkillWeights property</summary>
		private double[] baseSkillWeights;
		public DistributionStructArray<TruncatedGaussian,double> BaseSkillWeights_marginal;
		/// <summary>Field backing the BaseSkillWeightsInitializer property</summary>
		private IDistribution<double[]> baseSkillWeightsInitializer;
		/// <summary>Field backing the BlockCount property</summary>
		private int blockCount;
		/// <summary>True if Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48 has executed. Set this to false to force re-execution of Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48</summary>
		public bool Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone;
		/// <summary>True if Changed_BaseSkillChangePrecisionPerGame has executed. Set this to false to force re-execution of Changed_BaseSkillChangePrecisionPerGame</summary>
		public bool Changed_BaseSkillChangePrecisionPerGame_isDone;
		/// <summary>True if Changed_BaseSkillChangePrecisionPerMinute has executed. Set this to false to force re-execution of Changed_BaseSkillChangePrecisionPerMinute</summary>
		public bool Changed_BaseSkillChangePrecisionPerMinute_isDone;
		/// <summary>True if Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45 has executed. Set this to false to force re-execution of Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45</summary>
		public bool Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone;
		/// <summary>True if Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45 has performed initialisation. Set this to false to force re-execution of Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45</summary>
		public bool Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised;
		/// <summary>True if Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44 has executed. Set this to false to force re-execution of Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44</summary>
		public bool Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44_isDone;
		/// <summary>True if Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43 has executed. Set this to false to force re-execution of Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43</summary>
		public bool Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43_isDone;
		/// <summary>True if Changed_BaseSkillPriorPrecision has executed. Set this to false to force re-execution of Changed_BaseSkillPriorPrecision</summary>
		public bool Changed_BaseSkillPriorPrecision_isDone;
		/// <summary>True if Changed_BaseSkillPriorPrecision_PlayerCount has executed. Set this to false to force re-execution of Changed_BaseSkillPriorPrecision_PlayerCount</summary>
		public bool Changed_BaseSkillPriorPrecision_PlayerCount_isDone;
		/// <summary>True if Changed_BaseSkillWeights_PlayerConditionsCount has executed. Set this to false to force re-execution of Changed_BaseSkillWeights_PlayerConditionsCount</summary>
		public bool Changed_BaseSkillWeights_PlayerConditionsCount_isDone;
		/// <summary>True if Changed_DisconnectProbability_PlayerConditionsCount has executed. Set this to false to force re-execution of Changed_DisconnectProbability_PlayerConditionsCount</summary>
		public bool Changed_DisconnectProbability_PlayerConditionsCount_isDone;
		/// <summary>True if Changed_DrawMargin_PlayerConditionsCount has executed. Set this to false to force re-execution of Changed_DrawMargin_PlayerConditionsCount</summary>
		public bool Changed_DrawMargin_PlayerConditionsCount_isDone;
		/// <summary>True if Changed_DrawWithPreviousInGame_GameCount_teamCount has executed. Set this to false to force re-execution of Changed_DrawWithPreviousInGame_GameCount_teamCount</summary>
		public bool Changed_DrawWithPreviousInGame_GameCount_teamCount_isDone;
		/// <summary>True if Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29 has executed. Set this to false to force re-execution of Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29</summary>
		public bool Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isDone;
		/// <summary>True if Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29 has performed initialisation. Set this to false to force re-execution of Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29</summary>
		public bool Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised;
		/// <summary>True if Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30 has executed. Set this to false to force re-execution of Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30</summary>
		public bool Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isDone;
		/// <summary>True if Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30 has performed initialisation. Set this to false to force re-execution of Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30</summary>
		public bool Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised;
		/// <summary>True if Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32 has executed. Set this to false to force re-execution of Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32</summary>
		public bool Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isDone;
		/// <summary>True if Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32 has performed initialisation. Set this to false to force re-execution of Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32</summary>
		public bool Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised;
		/// <summary>True if Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27 has executed. Set this to false to force re-execution of Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27</summary>
		public bool Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isDone;
		/// <summary>True if Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27 has performed initialisation. Set this to false to force re-execution of Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27</summary>
		public bool Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised;
		/// <summary>True if Changed_EventTypeCount_ExperienceForConditionsInGame_ExperienceThreshold_GameCount_teamSizes has executed. Set this to false to force re-execution of Changed_EventTypeCount_ExperienceForConditionsInGame_ExperienceThreshold_GameCount_teamSizes</summary>
		public bool Changed_EventTypeCount_ExperienceForConditionsInGame_ExperienceThreshold_GameCount_teamSizes_isDone;
		/// <summary>True if Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33 has executed. Set this to false to force re-execution of Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33</summary>
		public bool Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isDone;
		/// <summary>True if Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33 has performed initialisation. Set this to false to force re-execution of Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33</summary>
		public bool Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised;
		/// <summary>True if Changed_EventTypeCount_GameCount_teamSizes has executed. Set this to false to force re-execution of Changed_EventTypeCount_GameCount_teamSizes</summary>
		public bool Changed_EventTypeCount_GameCount_teamSizes_isDone;
		/// <summary>True if Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47 has executed. Set this to false to force re-execution of Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47</summary>
		public bool Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isDone;
		/// <summary>True if Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47 has performed initialisation. Set this to false to force re-execution of Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47</summary>
		public bool Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised;
		/// <summary>True if Changed_EventTypeCount_PlayerConditionsCount has executed. Set this to false to force re-execution of Changed_EventTypeCount_PlayerConditionsCount</summary>
		public bool Changed_EventTypeCount_PlayerConditionsCount_isDone;
		/// <summary>True if Changed_ExperienceBucketCountInConditions_PlayerConditionsCount has executed. Set this to false to force re-execution of Changed_ExperienceBucketCountInConditions_PlayerConditionsCount</summary>
		public bool Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_isDone;
		/// <summary>True if Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_SkillOffsetChangeMeanByExperience has executed. Set this to false to force re-execution of Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_SkillOffsetChangeMeanByExperience</summary>
		public bool Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_SkillOffsetChangeMeanByExperience_isDone;
		/// <summary>True if Changed_GameCount has executed. Set this to false to force re-execution of Changed_GameCount</summary>
		public bool Changed_GameCount_isDone;
		/// <summary>True if Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37 has executed. Set this to false to force re-execution of Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37</summary>
		public bool Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isDone;
		/// <summary>True if Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37 has performed initialisation. Set this to false to force re-execution of Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37</summary>
		public bool Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised;
		/// <summary>True if Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35 has executed. Set this to false to force re-execution of Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35</summary>
		public bool Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isDone;
		/// <summary>True if Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35 has performed initialisation. Set this to false to force re-execution of Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35</summary>
		public bool Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised;
		/// <summary>True if Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34 has executed. Set this to false to force re-execution of Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34</summary>
		public bool Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isDone;
		/// <summary>True if Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34 has performed initialisation. Set this to false to force re-execution of Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34</summary>
		public bool Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised;
		/// <summary>True if Changed_GameCount_PlayerQuitInGameFlat_teamSizes has executed. Set this to false to force re-execution of Changed_GameCount_PlayerQuitInGameFlat_teamSizes</summary>
		public bool Changed_GameCount_PlayerQuitInGameFlat_teamSizes_isDone;
		/// <summary>True if Changed_GameCount_PlayerWeights_teamCount_teamSizes has executed. Set this to false to force re-execution of Changed_GameCount_PlayerWeights_teamCount_teamSizes</summary>
		public bool Changed_GameCount_PlayerWeights_teamCount_teamSizes_isDone;
		/// <summary>True if Changed_GameCount_SquadSizes_teamSizes has executed. Set this to false to force re-execution of Changed_GameCount_SquadSizes_teamSizes</summary>
		public bool Changed_GameCount_SquadSizes_teamSizes_isDone;
		/// <summary>True if Changed_GameCount_SubarrayChangeVariableCountInGame_teamSizes has executed. Set this to false to force re-execution of Changed_GameCount_SubarrayChangeVariableCountInGame_teamSizes</summary>
		public bool Changed_GameCount_SubarrayChangeVariableCountInGame_teamSizes_isDone;
		/// <summary>True if Changed_GameCount_teamCount has executed. Set this to false to force re-execution of Changed_GameCount_teamCount</summary>
		public bool Changed_GameCount_teamCount_isDone;
		/// <summary>True if Changed_GameCount_teamCount_teamSizes has executed. Set this to false to force re-execution of Changed_GameCount_teamCount_teamSizes</summary>
		public bool Changed_GameCount_teamCount_teamSizes_isDone;
		/// <summary>True if Changed_GameCount_teamSizes has executed. Set this to false to force re-execution of Changed_GameCount_teamSizes</summary>
		public bool Changed_GameCount_teamSizes_isDone;
		/// <summary>True if Changed_InitialCombinedVariableCount has executed. Set this to false to force re-execution of Changed_InitialCombinedVariableCount</summary>
		public bool Changed_InitialCombinedVariableCount_isDone;
		/// <summary>True if Changed_InitialSkillOffsetConditions_PlayerInConditionsCount_SkillOffsetPriorPrecision_SkillPriorMea39 has executed. Set this to false to force re-execution of Changed_InitialSkillOffsetConditions_PlayerInConditionsCount_SkillOffsetPriorPrecision_SkillPriorMea39</summary>
		public bool Changed_InitialSkillOffsetConditions_PlayerInConditionsCount_SkillOffsetPriorPrecision_SkillPriorMea39_isDone;
		/// <summary>True if Changed_LoggingAction has executed. Set this to false to force re-execution of Changed_LoggingAction</summary>
		public bool Changed_LoggingAction_isDone;
		/// <summary>True if Changed_PlayerConditionsCount has executed. Set this to false to force re-execution of Changed_PlayerConditionsCount</summary>
		public bool Changed_PlayerConditionsCount_isDone;
		/// <summary>True if Changed_PlayerConditionsCount_QuitProbability has executed. Set this to false to force re-execution of Changed_PlayerConditionsCount_QuitProbability</summary>
		public bool Changed_PlayerConditionsCount_QuitProbability_isDone;
		/// <summary>True if Changed_PlayerConditionsCount_QuitThreshold has executed. Set this to false to force re-execution of Changed_PlayerConditionsCount_QuitThreshold</summary>
		public bool Changed_PlayerConditionsCount_QuitThreshold_isDone;
		/// <summary>True if Changed_PlayerConditionsCount_QuitThresholdPrecision has executed. Set this to false to force re-execution of Changed_PlayerConditionsCount_QuitThresholdPrecision</summary>
		public bool Changed_PlayerConditionsCount_QuitThresholdPrecision_isDone;
		/// <summary>True if Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerGame has executed. Set this to false to force re-execution of Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerGame</summary>
		public bool Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerGame_isDone;
		/// <summary>True if Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerMinute has executed. Set this to false to force re-execution of Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerMinute</summary>
		public bool Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerMinute_isDone;
		/// <summary>True if Changed_PlayerConditionsCount_SkillOffsetPriorPrecision has executed. Set this to false to force re-execution of Changed_PlayerConditionsCount_SkillOffsetPriorPrecision</summary>
		public bool Changed_PlayerConditionsCount_SkillOffsetPriorPrecision_isDone;
		/// <summary>True if Changed_PlayerConditionsCount_SkillPriorMean has executed. Set this to false to force re-execution of Changed_PlayerConditionsCount_SkillPriorMean</summary>
		public bool Changed_PlayerConditionsCount_SkillPriorMean_isDone;
		/// <summary>True if Changed_PlayerConditionsCount_SquadOffset_SquadSizeBucketCount has executed. Set this to false to force re-execution of Changed_PlayerConditionsCount_SquadOffset_SquadSizeBucketCount</summary>
		public bool Changed_PlayerConditionsCount_SquadOffset_SquadSizeBucketCount_isDone;
		/// <summary>True if Changed_PlayerConditionsCount_SquadSizeBucketCount has executed. Set this to false to force re-execution of Changed_PlayerConditionsCount_SquadSizeBucketCount</summary>
		public bool Changed_PlayerConditionsCount_SquadSizeBucketCount_isDone;
		/// <summary>True if Changed_PlayerCount has executed. Set this to false to force re-execution of Changed_PlayerCount</summary>
		public bool Changed_PlayerCount_isDone;
		/// <summary>True if Changed_PlayerInConditionsCount has executed. Set this to false to force re-execution of Changed_PlayerInConditionsCount</summary>
		public bool Changed_PlayerInConditionsCount_isDone;
		/// <summary>True if Changed_SkillVariableCount has executed. Set this to false to force re-execution of Changed_SkillVariableCount</summary>
		public bool Changed_SkillVariableCount_isDone;
		/// <summary>The constant 'combinedVariableCount'</summary>
		public int[] combinedVariableCount;
		/// <summary>Field backing the CombinedVariableIndexInGame property</summary>
		private int[][] combinedVariableIndexInGame;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> combinedVariables_B;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>The constant 'cumulativeTeamSizes'</summary>
		public int[][] cumulativeTeamSizes;
		/// <summary>The constant 'denomIsZero'</summary>
		public bool[][] denomIsZero;
		/// <summary>Field backing the DisconnectProbability property</summary>
		private double[] disconnectProbability;
		public DistributionStructArray<Beta,double> DisconnectProbability_marginal;
		/// <summary>Field backing the DisconnectProbabilityInitializer property</summary>
		private IDistribution<double[]> disconnectProbabilityInitializer;
		/// <summary>Field backing the DrawMargin property</summary>
		private double[] drawMargin;
		public DistributionStructArray<TruncatedGaussian,double> DrawMargin_marginal;
		/// <summary>Field backing the DrawMarginConditionsInGame property</summary>
		private int[] drawMarginConditionsInGame;
		/// <summary>Field backing the DrawMarginInitializer property</summary>
		private IDistribution<double[]> drawMarginInitializer;
		/// <summary>Field backing the DrawWithPreviousInGame property</summary>
		private bool[][] drawWithPreviousInGame;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> enemyAverageCopy_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> enemyAverageQuit_B;
		/// <summary>The constant 'enemyWeight'</summary>
		public double[][] enemyWeight;
		/// <summary>Field backing the EventCountsFlat property</summary>
		private double[][][] eventCountsFlat;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> EventsPerMinuteEnemyMultiplier_depth0_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> EventsPerMinuteEnemyMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B;
		/// <summary>Message to marginal of 'EventsPerMinuteEnemyMultiplier'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> EventsPerMinuteEnemyMultiplier_marginal_F;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData[][] EventsPerMinuteEnemyMultiplier_use_B_playerConditions__eventType__buffer;
		/// <summary>Field backing the EventsPerMinuteEnemyMultiplierInitializer property</summary>
		private IDistribution<double[][]> eventsPerMinuteEnemyMultiplierInitializer;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> EventsPerMinuteOffset_depth0_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> EventsPerMinuteOffset_itemPlayerConditionsToLearnInGame_game__playerInGame__B;
		/// <summary>Message to marginal of 'EventsPerMinuteOffset'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> EventsPerMinuteOffset_marginal_F;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData[][] EventsPerMinuteOffset_use_B_playerConditions__eventType__buffer;
		/// <summary>Field backing the EventsPerMinuteOffsetInitializer property</summary>
		private IDistribution<double[][]> eventsPerMinuteOffsetInitializer;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> EventsPerMinutePerformanceMultiplier_depth0_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> EventsPerMinutePerformanceMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B;
		/// <summary>Message to marginal of 'EventsPerMinutePerformanceMultiplier'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> EventsPerMinutePerformanceMultiplier_marginal_F;
		/// <summary>Buffer for VariablePointOp_Rprop.MarginalAverageConditional</summary>
		public RpropBufferData[][] EventsPerMinutePerformanceMultiplier_use_B_playerConditions__eventType__buffer;
		/// <summary>Field backing the EventsPerMinutePerformanceMultiplierInitializer property</summary>
		private IDistribution<double[][]> eventsPerMinutePerformanceMultiplierInitializer;
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> EventsPerMinutePrecision_depth0_B;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>,double[][]> EventsPerMinutePrecision_itemPlayerConditionsToLearnInGame_game__playerInGame__B;
		/// <summary>Message to marginal of 'EventsPerMinutePrecision'</summary>
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> EventsPerMinutePrecision_marginal_F;
		/// <summary>Buffer for VariablePointOp_RpropGamma.MarginalAverageConditional</summary>
		public RpropBufferData[][] EventsPerMinutePrecision_use_B_playerConditions__eventType__buffer0_;
		/// <summary>Field backing the EventsPerMinutePrecisionInitializer property</summary>
		private IDistribution<double[][]> eventsPerMinutePrecisionInitializer;
		public Gamma eventsPerMinutePrecisionRate_F_reduced;
		public Gamma eventsPerMinutePriorPrecision_F_reduced;
		/// <summary>Messages from use of 'eventsPerMinutePriorPrecision'</summary>
		public Gamma[][][] eventsPerMinutePriorPrecision_uses_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gamma></summary>
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> eventsPerMinutePriorPrecision_uses_B_playerConditions__eventType__toDef;
		/// <summary>Messages to use of 'eventsPerMinutePriorPrecision'</summary>
		public Gamma[][][] eventsPerMinutePriorPrecision_uses_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Gamma></summary>
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal;
		/// <summary>Field backing the EventTypeCount property</summary>
		private int eventTypeCount;
		/// <summary>Field backing the ExperienceBucketCountInConditions property</summary>
		private int[] experienceBucketCountInConditions;
		/// <summary>Field backing the ExperienceForConditionsInGame property</summary>
		private int[][] experienceForConditionsInGame;
		/// <summary>Field backing the ExperienceThreshold property</summary>
		private int experienceThreshold;
		/// <summary>Field backing the GameCount property</summary>
		private int gameCount;
		/// <summary>Field backing the GameCountInBlock property</summary>
		private int[][] gameCountInBlock;
		/// <summary>Field backing the GamesInBlock property</summary>
		private int[][][] gamesInBlock;
		/// <summary>The constant 'indexOfPlayerOnTeam'</summary>
		public int[][][] indexOfPlayerOnTeam;
		/// <summary>Field backing the InitialCombinedIndices property</summary>
		private int[] initialCombinedIndices;
		/// <summary>Field backing the InitialCombinedVariableCount property</summary>
		private int initialCombinedVariableCount;
		public DistributionStructArray<Gaussian,double> initialCombinedVariables_B;
		/// <summary>Field backing the InitialSkillOffsetConditions property</summary>
		private int[] initialSkillOffsetConditions;
		public bool[][] isExperienced_reduced;
		/// <summary>Field backing the LengthInMinutes property</summary>
		private double[] lengthInMinutes;
		/// <summary>Field backing the LoggingAction property</summary>
		private Action<string> loggingAction;
		public PointMass<Action<string>> LoggingAction_marginal;
		/// <summary>Field backing the MinutesSinceLastGame property</summary>
		private double[][] minutesSinceLastGame;
		/// <summary>Field backing the MinutesSinceLastGameInConditions property</summary>
		private double[][] minutesSinceLastGameInConditions;
		/// <summary>Field backing the NoExperienceLastGame property</summary>
		private bool[][] noExperienceLastGame;
		/// <summary>Field backing the NoExperienceLastGameInConditions property</summary>
		private bool[][] noExperienceLastGameInConditions;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>The constant 'offsetVariableCountInGame'</summary>
		public int[] offsetVariableCountInGame;
		public Gaussian[][][] orderedTeamSum_uses_B;
		public Gaussian[][][] orderedTeamSum_uses_F;
		public Gaussian performancesByTeamForEvents_B_reduced;
		public Gaussian performancesByTeamForEvents_B_reduced_Rgame;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> performancesForEvents_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> performancesForEventsPrimary_F;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Gaussian></summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> performancesForEventsPrimary_rep_B_toDef;
		/// <summary>Field backing the performanceVariance property</summary>
		private double PerformanceVariance;
		/// <summary>Field backing the PlayerConditionsCount property</summary>
		private int playerConditionsCount;
		/// <summary>Field backing the PlayerConditionsToLearnInGame property</summary>
		private int[][] playerConditionsToLearnInGame;
		/// <summary>Field backing the PlayerCount property</summary>
		private int playerCount;
		/// <summary>The constant 'playerCountInGame'</summary>
		public int[] playerCountInGame;
		/// <summary>Field backing the PlayerInConditionsCount property</summary>
		private int playerInConditionsCount;
		/// <summary>The constant 'playerIsInSquad'</summary>
		public bool[][] playerIsInSquad;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> playerPerfCopy_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> playerPerfQuit_B;
		/// <summary>Field backing the PlayerQuitInGameFlat property</summary>
		private bool[][] playerQuitInGameFlat;
		/// <summary>Field backing the PlayerWeights property</summary>
		private double[][] playerWeights;
		/// <summary>The constant 'playerWeightsByTeam'</summary>
		public double[][][] playerWeightsByTeam;
		/// <summary>Field backing the PreviousChangeVariableSubarrayCountInGame property</summary>
		private int[][] previousChangeVariableSubarrayCountInGame;
		/// <summary>Field backing the PreviousChangeVariableSubarrayIndexInGame property</summary>
		private int[][][] previousChangeVariableSubarrayIndexInGame;
		/// <summary>Field backing the PreviousSubarrayChangeVariableCountInGame property</summary>
		private int[] previousSubarrayChangeVariableCountInGame;
		/// <summary>Field backing the QuitProbability property</summary>
		private double[] quitProbability;
		public DistributionStructArray<Beta,double> QuitProbability_marginal;
		/// <summary>Field backing the QuitProbabilityInitializer property</summary>
		private IDistribution<double[]> quitProbabilityInitializer;
		/// <summary>Field backing the QuitThreshold property</summary>
		private double[] quitThreshold;
		public DistributionStructArray<Gaussian,double> QuitThreshold_marginal;
		/// <summary>Field backing the QuitThresholdInitializer property</summary>
		private IDistribution<double[]> quitThresholdInitializer;
		/// <summary>Field backing the QuitThresholdPrecision property</summary>
		private double[] quitThresholdPrecision;
		public DistributionStructArray<Gamma,double> QuitThresholdPrecision_marginal;
		/// <summary>Field backing the QuitThresholdPrecisionInitializer property</summary>
		private IDistribution<double[]> quitThresholdPrecisionInitializer;
		public DistributionStructArray<Gaussian,double> skillInConditions_F;
		public Gaussian skillInConditions_F_reduced;
		/// <summary>Message to marginal of 'skillInConditions'</summary>
		public DistributionStructArray<Gaussian,double> skillInConditions_marginal_F;
		public DistributionStructArray<Gaussian,double>[] skillInConditions_uses_B;
		public DistributionStructArray<Gaussian,double>[] skillInConditions_uses_F;
		/// <summary>Field backing the SkillOffsetChangeMeanByExperience property</summary>
		private double[][] skillOffsetChangeMeanByExperience;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> SkillOffsetChangeMeanByExperience_marginal;
		/// <summary>Field backing the SkillOffsetChangeMeanByExperienceInitializer property</summary>
		private IDistribution<double[][]> skillOffsetChangeMeanByExperienceInitializer;
		/// <summary>Field backing the SkillOffsetChangeMeanPrecision property</summary>
		private double skillOffsetChangeMeanPrecision;
		/// <summary>Field backing the SkillOffsetChangePrecisionPerGame property</summary>
		private double[] skillOffsetChangePrecisionPerGame;
		public DistributionStructArray<TruncatedGamma,double> SkillOffsetChangePrecisionPerGame_marginal;
		/// <summary>Field backing the SkillOffsetChangePrecisionPerGameInitializer property</summary>
		private IDistribution<double[]> skillOffsetChangePrecisionPerGameInitializer;
		/// <summary>Field backing the SkillOffsetChangePrecisionPerMinute property</summary>
		private double[] skillOffsetChangePrecisionPerMinute;
		public DistributionStructArray<TruncatedGamma,double> SkillOffsetChangePrecisionPerMinute_marginal;
		/// <summary>Field backing the SkillOffsetChangePrecisionPerMinuteInitializer property</summary>
		private IDistribution<double[]> skillOffsetChangePrecisionPerMinuteInitializer;
		/// <summary>Field backing the SkillOffsetPriorPrecision property</summary>
		private double[] skillOffsetPriorPrecision;
		public DistributionStructArray<TruncatedGamma,double> SkillOffsetPriorPrecision_marginal;
		/// <summary>Field backing the SkillOffsetPriorPrecisionInitializer property</summary>
		private IDistribution<double[]> skillOffsetPriorPrecisionInitializer;
		public DistributionStructArray<Gaussian,double> skillOffsetPriorSample_F;
		/// <summary>Field backing the SkillPriorMean property</summary>
		private double[] skillPriorMean;
		public DistributionStructArray<Gaussian,double> SkillPriorMean_marginal;
		/// <summary>Field backing the SkillPriorMeanInitializer property</summary>
		private IDistribution<double[]> skillPriorMeanInitializer;
		/// <summary>Field backing the SkillVariableCount property</summary>
		private int skillVariableCount;
		/// <summary>Field backing the SquadOffset property</summary>
		private double[][] squadOffset;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> SquadOffset_marginal;
		/// <summary>Field backing the SquadOffsetInitializer property</summary>
		private IDistribution<double[][]> squadOffsetInitializer;
		/// <summary>Field backing the SquadSizeBucketCount property</summary>
		private int[] squadSizeBucketCount;
		/// <summary>Field backing the SquadSizes property</summary>
		private int[][] squadSizes;
		/// <summary>Field backing the SubarrayChangeVariableCountInGame property</summary>
		private int[] subarrayChangeVariableCountInGame;
		/// <summary>Field backing the teamCount property</summary>
		private int[] TeamCount;
		/// <summary>Field backing the TeamOrderInGame property</summary>
		private int[][] teamOrderInGame;
		/// <summary>Field backing the teamSizes property</summary>
		private int[][] TeamSizes;
		public DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]> teamStrength2_rep_F;
		/// <summary>The constant 'teamWeight'</summary>
		public double[][] teamWeight;
		/// <summary>Field backing the ThreadCount property</summary>
		private int threadCount;
		/// <summary>Field backing the UpdateChangeVariableCountInGame property</summary>
		private int[][] updateChangeVariableCountInGame;
		/// <summary>Field backing the UpdateChangeVariableSubarrayCountInGame property</summary>
		private int[][] updateChangeVariableSubarrayCountInGame;
		/// <summary>Field backing the UpdateChangeVariableSubarrayIndexInGame property</summary>
		private int[][][] updateChangeVariableSubarrayIndexInGame;
		/// <summary>Field backing the UpdateSubarrayChangeVariableCountInGame property</summary>
		private int[] updateSubarrayChangeVariableCountInGame;
		public bool vbool____9_reduced;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'BaseSkillChangePrecisionPerGame'</summary>
		public double BaseSkillChangePrecisionPerGame
		{
			get {
				return this.baseSkillChangePrecisionPerGame;
			}
			set {
				if (this.baseSkillChangePrecisionPerGame!=value) {
					this.baseSkillChangePrecisionPerGame = value;
					this.numberOfIterationsDone = 0;
					this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
					this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
					this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
					this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
					this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
					this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
					this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
					this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
					this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
					this.Changed_BaseSkillChangePrecisionPerGame_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'BaseSkillChangePrecisionPerGameInitializer'</summary>
		public IDistribution<double> BaseSkillChangePrecisionPerGameInitializer
		{
			get {
				return this.baseSkillChangePrecisionPerGameInitializer;
			}
			set {
				this.baseSkillChangePrecisionPerGameInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'BaseSkillChangePrecisionPerMinute'</summary>
		public double BaseSkillChangePrecisionPerMinute
		{
			get {
				return this.baseSkillChangePrecisionPerMinute;
			}
			set {
				if (this.baseSkillChangePrecisionPerMinute!=value) {
					this.baseSkillChangePrecisionPerMinute = value;
					this.numberOfIterationsDone = 0;
					this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
					this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
					this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
					this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
					this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
					this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
					this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
					this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
					this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
					this.Changed_BaseSkillChangePrecisionPerMinute_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'BaseSkillChangePrecisionPerMinuteInitializer'</summary>
		public IDistribution<double> BaseSkillChangePrecisionPerMinuteInitializer
		{
			get {
				return this.baseSkillChangePrecisionPerMinuteInitializer;
			}
			set {
				this.baseSkillChangePrecisionPerMinuteInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'BaseSkillPriorPrecision'</summary>
		public double BaseSkillPriorPrecision
		{
			get {
				return this.baseSkillPriorPrecision;
			}
			set {
				if (this.baseSkillPriorPrecision!=value) {
					this.baseSkillPriorPrecision = value;
					this.numberOfIterationsDone = 0;
					this.Changed_BaseSkillPriorPrecision_PlayerCount_isDone = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
					this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
					this.Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43_isDone = false;
					this.Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44_isDone = false;
					this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
					this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
					this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
					this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
					this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
					this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
					this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
					this.Changed_BaseSkillPriorPrecision_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'BaseSkillPriorPrecisionInitializer'</summary>
		public IDistribution<double> BaseSkillPriorPrecisionInitializer
		{
			get {
				return this.baseSkillPriorPrecisionInitializer;
			}
			set {
				this.baseSkillPriorPrecisionInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'BaseSkillWeights'</summary>
		public double[] BaseSkillWeights
		{
			get {
				return this.baseSkillWeights;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'BaseSkillWeights\'");
				}
				this.baseSkillWeights = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				this.Changed_BaseSkillWeights_PlayerConditionsCount_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'BaseSkillWeightsInitializer'</summary>
		public IDistribution<double[]> BaseSkillWeightsInitializer
		{
			get {
				return this.baseSkillWeightsInitializer;
			}
			set {
				this.baseSkillWeightsInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'BlockCount'</summary>
		public int BlockCount
		{
			get {
				return this.blockCount;
			}
			set {
				if (this.blockCount!=value) {
					this.blockCount = value;
					this.numberOfIterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'CombinedVariableIndexInGame'</summary>
		public int[][] CombinedVariableIndexInGame
		{
			get {
				return this.combinedVariableIndexInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'CombinedVariableIndexInGame\'");
				}
				this.combinedVariableIndexInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'DisconnectProbability'</summary>
		public double[] DisconnectProbability
		{
			get {
				return this.disconnectProbability;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'DisconnectProbability\'");
				}
				this.disconnectProbability = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				this.Changed_DisconnectProbability_PlayerConditionsCount_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'DisconnectProbabilityInitializer'</summary>
		public IDistribution<double[]> DisconnectProbabilityInitializer
		{
			get {
				return this.disconnectProbabilityInitializer;
			}
			set {
				this.disconnectProbabilityInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'DrawMargin'</summary>
		public double[] DrawMargin
		{
			get {
				return this.drawMargin;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'DrawMargin\'");
				}
				this.drawMargin = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				this.Changed_DrawMargin_PlayerConditionsCount_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'DrawMarginConditionsInGame'</summary>
		public int[] DrawMarginConditionsInGame
		{
			get {
				return this.drawMarginConditionsInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'DrawMarginConditionsInGame\'");
				}
				this.drawMarginConditionsInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'DrawMarginInitializer'</summary>
		public IDistribution<double[]> DrawMarginInitializer
		{
			get {
				return this.drawMarginInitializer;
			}
			set {
				this.drawMarginInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'DrawWithPreviousInGame'</summary>
		public bool[][] DrawWithPreviousInGame
		{
			get {
				return this.drawWithPreviousInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'DrawWithPreviousInGame\'");
				}
				this.drawWithPreviousInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_DrawWithPreviousInGame_GameCount_teamCount_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'EventCountsFlat'</summary>
		public double[][][] EventCountsFlat
		{
			get {
				return this.eventCountsFlat;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'EventCountsFlat\'");
				}
				this.eventCountsFlat = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'EventsPerMinuteEnemyMultiplierInitializer'</summary>
		public IDistribution<double[][]> EventsPerMinuteEnemyMultiplierInitializer
		{
			get {
				return this.eventsPerMinuteEnemyMultiplierInitializer;
			}
			set {
				this.eventsPerMinuteEnemyMultiplierInitializer = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isDone = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'EventsPerMinuteOffsetInitializer'</summary>
		public IDistribution<double[][]> EventsPerMinuteOffsetInitializer
		{
			get {
				return this.eventsPerMinuteOffsetInitializer;
			}
			set {
				this.eventsPerMinuteOffsetInitializer = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isDone = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'EventsPerMinutePerformanceMultiplierInitializer'</summary>
		public IDistribution<double[][]> EventsPerMinutePerformanceMultiplierInitializer
		{
			get {
				return this.eventsPerMinutePerformanceMultiplierInitializer;
			}
			set {
				this.eventsPerMinutePerformanceMultiplierInitializer = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isDone = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'EventsPerMinutePrecisionInitializer'</summary>
		public IDistribution<double[][]> EventsPerMinutePrecisionInitializer
		{
			get {
				return this.eventsPerMinutePrecisionInitializer;
			}
			set {
				this.eventsPerMinutePrecisionInitializer = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isDone = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'EventTypeCount'</summary>
		public int EventTypeCount
		{
			get {
				return this.eventTypeCount;
			}
			set {
				if (this.eventTypeCount!=value) {
					this.eventTypeCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
					this.Changed_EventTypeCount_GameCount_teamSizes_isDone = false;
					this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isDone = false;
					this.Changed_EventTypeCount_ExperienceForConditionsInGame_ExperienceThreshold_GameCount_teamSizes_isDone = false;
					this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
					this.Changed_EventTypeCount_PlayerConditionsCount_isDone = false;
					this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isDone = false;
					this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
					this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
					this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
					this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
					this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'ExperienceBucketCountInConditions'</summary>
		public int[] ExperienceBucketCountInConditions
		{
			get {
				return this.experienceBucketCountInConditions;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'ExperienceBucketCountInConditions\'");
				}
				this.experienceBucketCountInConditions = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_isDone = false;
				this.Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_SkillOffsetChangeMeanByExperience_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ExperienceForConditionsInGame'</summary>
		public int[][] ExperienceForConditionsInGame
		{
			get {
				return this.experienceForConditionsInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'ExperienceForConditionsInGame\'");
				}
				this.experienceForConditionsInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_EventTypeCount_ExperienceForConditionsInGame_ExperienceThreshold_GameCount_teamSizes_isDone = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ExperienceThreshold'</summary>
		public int ExperienceThreshold
		{
			get {
				return this.experienceThreshold;
			}
			set {
				if (this.experienceThreshold!=value) {
					this.experienceThreshold = value;
					this.numberOfIterationsDone = 0;
					this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
					this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
					this.Changed_EventTypeCount_ExperienceForConditionsInGame_ExperienceThreshold_GameCount_teamSizes_isDone = false;
					this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
					this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
					this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
					this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
					this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
					this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
					this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'GameCount'</summary>
		public int GameCount
		{
			get {
				return this.gameCount;
			}
			set {
				if (this.gameCount!=value) {
					this.gameCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_GameCount_isDone = false;
					this.Changed_DrawWithPreviousInGame_GameCount_teamCount_isDone = false;
					this.Changed_GameCount_teamCount_isDone = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isDone = false;
					this.Changed_GameCount_teamCount_teamSizes_isDone = false;
					this.Changed_GameCount_PlayerWeights_teamCount_teamSizes_isDone = false;
					this.Changed_GameCount_teamSizes_isDone = false;
					this.Changed_GameCount_PlayerQuitInGameFlat_teamSizes_isDone = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isDone = false;
					this.Changed_GameCount_SubarrayChangeVariableCountInGame_teamSizes_isDone = false;
					this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isDone = false;
					this.Changed_EventTypeCount_GameCount_teamSizes_isDone = false;
					this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isDone = false;
					this.Changed_EventTypeCount_ExperienceForConditionsInGame_ExperienceThreshold_GameCount_teamSizes_isDone = false;
					this.Changed_GameCount_SquadSizes_teamSizes_isDone = false;
					this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
					this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
					this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
					this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
					this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
					this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
					this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'GameCountInBlock'</summary>
		public int[][] GameCountInBlock
		{
			get {
				return this.gameCountInBlock;
			}
			set {
				if ((value!=null)&&(value.Length!=this.threadCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.threadCount)+" was expected for variable \'GameCountInBlock\'");
				}
				this.gameCountInBlock = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'GamesInBlock'</summary>
		public int[][][] GamesInBlock
		{
			get {
				return this.gamesInBlock;
			}
			set {
				if ((value!=null)&&(value.Length!=this.threadCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.threadCount)+" was expected for variable \'GamesInBlock\'");
				}
				this.gamesInBlock = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'InitialCombinedIndices'</summary>
		public int[] InitialCombinedIndices
		{
			get {
				return this.initialCombinedIndices;
			}
			set {
				if ((value!=null)&&(value.Length!=this.initialCombinedVariableCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.initialCombinedVariableCount)+" was expected for variable \'InitialCombinedIndices\'");
				}
				this.initialCombinedIndices = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44_isDone = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'InitialCombinedVariableCount'</summary>
		public int InitialCombinedVariableCount
		{
			get {
				return this.initialCombinedVariableCount;
			}
			set {
				if (this.initialCombinedVariableCount!=value) {
					this.initialCombinedVariableCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
					this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
					this.Changed_InitialCombinedVariableCount_isDone = false;
					this.Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43_isDone = false;
					this.Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44_isDone = false;
					this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
					this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
					this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
					this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
					this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
					this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
					this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'InitialSkillOffsetConditions'</summary>
		public int[] InitialSkillOffsetConditions
		{
			get {
				return this.initialSkillOffsetConditions;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerInConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerInConditionsCount)+" was expected for variable \'InitialSkillOffsetConditions\'");
				}
				this.initialSkillOffsetConditions = value;
				this.numberOfIterationsDone = 0;
				this.Changed_InitialSkillOffsetConditions_PlayerInConditionsCount_SkillOffsetPriorPrecision_SkillPriorMea39_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43_isDone = false;
				this.Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44_isDone = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'LengthInMinutes'</summary>
		public double[] LengthInMinutes
		{
			get {
				return this.lengthInMinutes;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'LengthInMinutes\'");
				}
				this.lengthInMinutes = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'LoggingAction'</summary>
		public Action<string> LoggingAction
		{
			get {
				return this.loggingAction;
			}
			set {
				this.loggingAction = value;
				this.numberOfIterationsDone = 0;
				this.Changed_LoggingAction_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'MinutesSinceLastGame'</summary>
		public double[][] MinutesSinceLastGame
		{
			get {
				return this.minutesSinceLastGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'MinutesSinceLastGame\'");
				}
				this.minutesSinceLastGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'MinutesSinceLastGameInConditions'</summary>
		public double[][] MinutesSinceLastGameInConditions
		{
			get {
				return this.minutesSinceLastGameInConditions;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'MinutesSinceLastGameInConditions\'");
				}
				this.minutesSinceLastGameInConditions = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'NoExperienceLastGame'</summary>
		public bool[][] NoExperienceLastGame
		{
			get {
				return this.noExperienceLastGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'NoExperienceLastGame\'");
				}
				this.noExperienceLastGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'NoExperienceLastGameInConditions'</summary>
		public bool[][] NoExperienceLastGameInConditions
		{
			get {
				return this.noExperienceLastGameInConditions;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'NoExperienceLastGameInConditions\'");
				}
				this.noExperienceLastGameInConditions = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'performanceVariance'</summary>
		public double performanceVariance
		{
			get {
				return this.PerformanceVariance;
			}
			set {
				if (this.PerformanceVariance!=value) {
					this.PerformanceVariance = value;
					this.numberOfIterationsDone = 0;
					this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
					this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
					this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
					this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
					this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
					this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
					this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
					this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
					this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'PlayerConditionsCount'</summary>
		public int PlayerConditionsCount
		{
			get {
				return this.playerConditionsCount;
			}
			set {
				if (this.playerConditionsCount!=value) {
					this.playerConditionsCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_PlayerConditionsCount_SquadSizeBucketCount_isDone = false;
					this.Changed_PlayerConditionsCount_SquadOffset_SquadSizeBucketCount_isDone = false;
					this.Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_isDone = false;
					this.Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_SkillOffsetChangeMeanByExperience_isDone = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
					this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
					this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
					this.Changed_PlayerConditionsCount_isDone = false;
					this.Changed_EventTypeCount_PlayerConditionsCount_isDone = false;
					this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isDone = false;
					this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isDone = false;
					this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isDone = false;
					this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isDone = false;
					this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isDone = false;
					this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
					this.Changed_DisconnectProbability_PlayerConditionsCount_isDone = false;
					this.Changed_PlayerConditionsCount_QuitProbability_isDone = false;
					this.Changed_PlayerConditionsCount_QuitThresholdPrecision_isDone = false;
					this.Changed_PlayerConditionsCount_QuitThreshold_isDone = false;
					this.Changed_DrawMargin_PlayerConditionsCount_isDone = false;
					this.Changed_BaseSkillWeights_PlayerConditionsCount_isDone = false;
					this.Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerGame_isDone = false;
					this.Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerMinute_isDone = false;
					this.Changed_PlayerConditionsCount_SkillOffsetPriorPrecision_isDone = false;
					this.Changed_PlayerConditionsCount_SkillPriorMean_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'PlayerConditionsToLearnInGame'</summary>
		public int[][] PlayerConditionsToLearnInGame
		{
			get {
				return this.playerConditionsToLearnInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'PlayerConditionsToLearnInGame\'");
				}
				this.playerConditionsToLearnInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PlayerCount'</summary>
		public int PlayerCount
		{
			get {
				return this.playerCount;
			}
			set {
				if (this.playerCount!=value) {
					this.playerCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_PlayerCount_isDone = false;
					this.Changed_BaseSkillPriorPrecision_PlayerCount_isDone = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
					this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
					this.Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43_isDone = false;
					this.Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44_isDone = false;
					this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
					this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
					this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
					this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
					this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
					this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
					this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'PlayerInConditionsCount'</summary>
		public int PlayerInConditionsCount
		{
			get {
				return this.playerInConditionsCount;
			}
			set {
				if (this.playerInConditionsCount!=value) {
					this.playerInConditionsCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_PlayerInConditionsCount_isDone = false;
					this.Changed_InitialSkillOffsetConditions_PlayerInConditionsCount_SkillOffsetPriorPrecision_SkillPriorMea39_isDone = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
					this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
					this.Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43_isDone = false;
					this.Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44_isDone = false;
					this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
					this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
					this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
					this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
					this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
					this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
					this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'PlayerQuitInGameFlat'</summary>
		public bool[][] PlayerQuitInGameFlat
		{
			get {
				return this.playerQuitInGameFlat;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'PlayerQuitInGameFlat\'");
				}
				this.playerQuitInGameFlat = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_PlayerQuitInGameFlat_teamSizes_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PlayerWeights'</summary>
		public double[][] PlayerWeights
		{
			get {
				return this.playerWeights;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'PlayerWeights\'");
				}
				this.playerWeights = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_PlayerWeights_teamCount_teamSizes_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PreviousChangeVariableSubarrayCountInGame'</summary>
		public int[][] PreviousChangeVariableSubarrayCountInGame
		{
			get {
				return this.previousChangeVariableSubarrayCountInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'PreviousChangeVariableSubarrayCountInGame\'");
				}
				this.previousChangeVariableSubarrayCountInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PreviousChangeVariableSubarrayIndexInGame'</summary>
		public int[][][] PreviousChangeVariableSubarrayIndexInGame
		{
			get {
				return this.previousChangeVariableSubarrayIndexInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'PreviousChangeVariableSubarrayIndexInGame\'");
				}
				this.previousChangeVariableSubarrayIndexInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'PreviousSubarrayChangeVariableCountInGame'</summary>
		public int[] PreviousSubarrayChangeVariableCountInGame
		{
			get {
				return this.previousSubarrayChangeVariableCountInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'PreviousSubarrayChangeVariableCountInGame\'");
				}
				this.previousSubarrayChangeVariableCountInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'QuitProbability'</summary>
		public double[] QuitProbability
		{
			get {
				return this.quitProbability;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'QuitProbability\'");
				}
				this.quitProbability = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				this.Changed_PlayerConditionsCount_QuitProbability_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'QuitProbabilityInitializer'</summary>
		public IDistribution<double[]> QuitProbabilityInitializer
		{
			get {
				return this.quitProbabilityInitializer;
			}
			set {
				this.quitProbabilityInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'QuitThreshold'</summary>
		public double[] QuitThreshold
		{
			get {
				return this.quitThreshold;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'QuitThreshold\'");
				}
				this.quitThreshold = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				this.Changed_PlayerConditionsCount_QuitThreshold_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'QuitThresholdInitializer'</summary>
		public IDistribution<double[]> QuitThresholdInitializer
		{
			get {
				return this.quitThresholdInitializer;
			}
			set {
				this.quitThresholdInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'QuitThresholdPrecision'</summary>
		public double[] QuitThresholdPrecision
		{
			get {
				return this.quitThresholdPrecision;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'QuitThresholdPrecision\'");
				}
				this.quitThresholdPrecision = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				this.Changed_PlayerConditionsCount_QuitThresholdPrecision_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'QuitThresholdPrecisionInitializer'</summary>
		public IDistribution<double[]> QuitThresholdPrecisionInitializer
		{
			get {
				return this.quitThresholdPrecisionInitializer;
			}
			set {
				this.quitThresholdPrecisionInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'SkillOffsetChangeMeanByExperience'</summary>
		public double[][] SkillOffsetChangeMeanByExperience
		{
			get {
				return this.skillOffsetChangeMeanByExperience;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'SkillOffsetChangeMeanByExperience\'");
				}
				this.skillOffsetChangeMeanByExperience = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_SkillOffsetChangeMeanByExperience_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'SkillOffsetChangeMeanByExperienceInitializer'</summary>
		public IDistribution<double[][]> SkillOffsetChangeMeanByExperienceInitializer
		{
			get {
				return this.skillOffsetChangeMeanByExperienceInitializer;
			}
			set {
				this.skillOffsetChangeMeanByExperienceInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'SkillOffsetChangeMeanPrecision'</summary>
		public double SkillOffsetChangeMeanPrecision
		{
			get {
				return this.skillOffsetChangeMeanPrecision;
			}
			set {
				if (this.skillOffsetChangeMeanPrecision!=value) {
					this.skillOffsetChangeMeanPrecision = value;
					this.numberOfIterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'SkillOffsetChangePrecisionPerGame'</summary>
		public double[] SkillOffsetChangePrecisionPerGame
		{
			get {
				return this.skillOffsetChangePrecisionPerGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'SkillOffsetChangePrecisionPerGame\'");
				}
				this.skillOffsetChangePrecisionPerGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				this.Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerGame_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'SkillOffsetChangePrecisionPerGameInitializer'</summary>
		public IDistribution<double[]> SkillOffsetChangePrecisionPerGameInitializer
		{
			get {
				return this.skillOffsetChangePrecisionPerGameInitializer;
			}
			set {
				this.skillOffsetChangePrecisionPerGameInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'SkillOffsetChangePrecisionPerMinute'</summary>
		public double[] SkillOffsetChangePrecisionPerMinute
		{
			get {
				return this.skillOffsetChangePrecisionPerMinute;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'SkillOffsetChangePrecisionPerMinute\'");
				}
				this.skillOffsetChangePrecisionPerMinute = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				this.Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerMinute_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'SkillOffsetChangePrecisionPerMinuteInitializer'</summary>
		public IDistribution<double[]> SkillOffsetChangePrecisionPerMinuteInitializer
		{
			get {
				return this.skillOffsetChangePrecisionPerMinuteInitializer;
			}
			set {
				this.skillOffsetChangePrecisionPerMinuteInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'SkillOffsetPriorPrecision'</summary>
		public double[] SkillOffsetPriorPrecision
		{
			get {
				return this.skillOffsetPriorPrecision;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'SkillOffsetPriorPrecision\'");
				}
				this.skillOffsetPriorPrecision = value;
				this.numberOfIterationsDone = 0;
				this.Changed_InitialSkillOffsetConditions_PlayerInConditionsCount_SkillOffsetPriorPrecision_SkillPriorMea39_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43_isDone = false;
				this.Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44_isDone = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				this.Changed_PlayerConditionsCount_SkillOffsetPriorPrecision_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'SkillOffsetPriorPrecisionInitializer'</summary>
		public IDistribution<double[]> SkillOffsetPriorPrecisionInitializer
		{
			get {
				return this.skillOffsetPriorPrecisionInitializer;
			}
			set {
				this.skillOffsetPriorPrecisionInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'SkillPriorMean'</summary>
		public double[] SkillPriorMean
		{
			get {
				return this.skillPriorMean;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'SkillPriorMean\'");
				}
				this.skillPriorMean = value;
				this.numberOfIterationsDone = 0;
				this.Changed_InitialSkillOffsetConditions_PlayerInConditionsCount_SkillOffsetPriorPrecision_SkillPriorMea39_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43_isDone = false;
				this.Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44_isDone = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				this.Changed_PlayerConditionsCount_SkillPriorMean_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'SkillPriorMeanInitializer'</summary>
		public IDistribution<double[]> SkillPriorMeanInitializer
		{
			get {
				return this.skillPriorMeanInitializer;
			}
			set {
				this.skillPriorMeanInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'SkillVariableCount'</summary>
		public int SkillVariableCount
		{
			get {
				return this.skillVariableCount;
			}
			set {
				if (this.skillVariableCount!=value) {
					this.skillVariableCount = value;
					this.numberOfIterationsDone = 0;
					this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
					this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
					this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
					this.Changed_SkillVariableCount_isDone = false;
					this.Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44_isDone = false;
					this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
					this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
					this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
					this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
					this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
					this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
					this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'SquadOffset'</summary>
		public double[][] SquadOffset
		{
			get {
				return this.squadOffset;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'SquadOffset\'");
				}
				this.squadOffset = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerConditionsCount_SquadOffset_SquadSizeBucketCount_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'SquadOffsetInitializer'</summary>
		public IDistribution<double[][]> SquadOffsetInitializer
		{
			get {
				return this.squadOffsetInitializer;
			}
			set {
				this.squadOffsetInitializer = value;
				this.numberOfIterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'SquadSizeBucketCount'</summary>
		public int[] SquadSizeBucketCount
		{
			get {
				return this.squadSizeBucketCount;
			}
			set {
				if ((value!=null)&&(value.Length!=this.playerConditionsCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.playerConditionsCount)+" was expected for variable \'SquadSizeBucketCount\'");
				}
				this.squadSizeBucketCount = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PlayerConditionsCount_SquadSizeBucketCount_isDone = false;
				this.Changed_PlayerConditionsCount_SquadOffset_SquadSizeBucketCount_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'SquadSizes'</summary>
		public int[][] SquadSizes
		{
			get {
				return this.squadSizes;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'SquadSizes\'");
				}
				this.squadSizes = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_GameCount_SquadSizes_teamSizes_isDone = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'SubarrayChangeVariableCountInGame'</summary>
		public int[] SubarrayChangeVariableCountInGame
		{
			get {
				return this.subarrayChangeVariableCountInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'SubarrayChangeVariableCountInGame\'");
				}
				this.subarrayChangeVariableCountInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_SubarrayChangeVariableCountInGame_teamSizes_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isDone = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'teamCount'</summary>
		public int[] teamCount
		{
			get {
				return this.TeamCount;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'teamCount\'");
				}
				this.TeamCount = value;
				this.numberOfIterationsDone = 0;
				this.Changed_DrawWithPreviousInGame_GameCount_teamCount_isDone = false;
				this.Changed_GameCount_teamCount_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isDone = false;
				this.Changed_GameCount_teamCount_teamSizes_isDone = false;
				this.Changed_GameCount_PlayerWeights_teamCount_teamSizes_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'TeamOrderInGame'</summary>
		public int[][] TeamOrderInGame
		{
			get {
				return this.teamOrderInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'TeamOrderInGame\'");
				}
				this.teamOrderInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'teamSizes'</summary>
		public int[][] teamSizes
		{
			get {
				return this.TeamSizes;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'teamSizes\'");
				}
				this.TeamSizes = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_teamCount_teamSizes_isDone = false;
				this.Changed_GameCount_PlayerWeights_teamCount_teamSizes_isDone = false;
				this.Changed_GameCount_teamSizes_isDone = false;
				this.Changed_GameCount_PlayerQuitInGameFlat_teamSizes_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isDone = false;
				this.Changed_GameCount_SubarrayChangeVariableCountInGame_teamSizes_isDone = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isDone = false;
				this.Changed_EventTypeCount_GameCount_teamSizes_isDone = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isDone = false;
				this.Changed_EventTypeCount_ExperienceForConditionsInGame_ExperienceThreshold_GameCount_teamSizes_isDone = false;
				this.Changed_GameCount_SquadSizes_teamSizes_isDone = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'ThreadCount'</summary>
		public int ThreadCount
		{
			get {
				return this.threadCount;
			}
			set {
				if (this.threadCount!=value) {
					this.threadCount = value;
					this.numberOfIterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'UpdateChangeVariableCountInGame'</summary>
		public int[][] UpdateChangeVariableCountInGame
		{
			get {
				return this.updateChangeVariableCountInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'UpdateChangeVariableCountInGame\'");
				}
				this.updateChangeVariableCountInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'UpdateChangeVariableSubarrayCountInGame'</summary>
		public int[][] UpdateChangeVariableSubarrayCountInGame
		{
			get {
				return this.updateChangeVariableSubarrayCountInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'UpdateChangeVariableSubarrayCountInGame\'");
				}
				this.updateChangeVariableSubarrayCountInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'UpdateChangeVariableSubarrayIndexInGame'</summary>
		public int[][][] UpdateChangeVariableSubarrayIndexInGame
		{
			get {
				return this.updateChangeVariableSubarrayIndexInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'UpdateChangeVariableSubarrayIndexInGame\'");
				}
				this.updateChangeVariableSubarrayIndexInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'UpdateSubarrayChangeVariableCountInGame'</summary>
		public int[] UpdateSubarrayChangeVariableCountInGame
		{
			get {
				return this.updateSubarrayChangeVariableCountInGame;
			}
			set {
				if ((value!=null)&&(value.Length!=this.gameCount)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.gameCount)+" was expected for variable \'UpdateSubarrayChangeVariableCountInGame\'");
				}
				this.updateSubarrayChangeVariableCountInGame = value;
				this.numberOfIterationsDone = 0;
				this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = false;
				this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = false;
				this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = false;
				this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = false;
				this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = false;
				this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = false;
				this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = false;
				this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = false;
				this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = false;
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Returns the marginal distribution for 'BaseSkillChangePrecisionPerGame' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public TruncatedGamma BaseSkillChangePrecisionPerGameMarginal()
		{
			return this.BaseSkillChangePrecisionPerGame_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'BaseSkillChangePrecisionPerMinute' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public TruncatedGamma BaseSkillChangePrecisionPerMinuteMarginal()
		{
			return this.BaseSkillChangePrecisionPerMinute_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'BaseSkillPriorPrecision' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public TruncatedGamma BaseSkillPriorPrecisionMarginal()
		{
			return this.BaseSkillPriorPrecision_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'BaseSkillWeights' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<TruncatedGaussian,double> BaseSkillWeightsMarginal()
		{
			return this.BaseSkillWeights_marginal;
		}

		/// <summary>Computations that depend on the observed value of BaseSkillChangePrecisionPerGame</summary>
		private void Changed_BaseSkillChangePrecisionPerGame()
		{
			if (this.Changed_BaseSkillChangePrecisionPerGame_isDone) {
				return ;
			}
			this.BaseSkillChangePrecisionPerGame_marginal = Distribution.SetPoint<TruncatedGamma,double>(this.BaseSkillChangePrecisionPerGame_marginal, this.baseSkillChangePrecisionPerGame);
			this.Changed_BaseSkillChangePrecisionPerGame_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of BaseSkillChangePrecisionPerGame and BaseSkillChangePrecisionPerMinute and BaseSkillPriorPrecision and BaseSkillWeights and CombinedVariableIndexInGame and DisconnectProbability and DrawMargin and DrawMarginConditionsInGame and DrawWithPreviousInGame and EventCountsFlat and EventsPerMinuteEnemyMultiplierInitializer and EventsPerMinuteOffsetInitializer and EventsPerMinutePerformanceMultiplierInitializer and EventsPerMinutePrecisionInitializer and EventTypeCount and ExperienceBucketCountInConditions and ExperienceForConditionsInGame and ExperienceThreshold and GameCount and InitialCombinedIndices and InitialCombinedVariableCount and InitialSkillOffsetConditions and LengthInMinutes and MinutesSinceLastGame and MinutesSinceLastGameInConditions and NoExperienceLastGame and NoExperienceLastGameInConditions and numberOfIterations and performanceVariance and PlayerConditionsCount and PlayerConditionsToLearnInGame and PlayerCount and PlayerInConditionsCount and PlayerQuitInGameFlat and PlayerWeights and PreviousChangeVariableSubarrayCountInGame and PreviousChangeVariableSubarrayIndexInGame and PreviousSubarrayChangeVariableCountInGame and QuitProbability and QuitThreshold and QuitThresholdPrecision and SkillOffsetChangeMeanByExperience and SkillOffsetChangePrecisionPerGame and SkillOffsetChangePrecisionPerMinute and SkillOffsetPriorPrecision and SkillPriorMean and SkillVariableCount and SquadOffset and SquadSizeBucketCount and SquadSizes and SubarrayChangeVariableCountInGame and teamCount and TeamOrderInGame and teamSizes and UpdateChangeVariableCountInGame and UpdateChangeVariableSubarrayCountInGame and UpdateChangeVariableSubarrayIndexInGame and UpdateSubarrayChangeVariableCountInGame</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48(int numberOfIterations)
		{
			if (this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone) {
				return ;
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				this.performancesByTeamForEvents_B_reduced = default(Gaussian);
				for(int game_Block = 0; game_Block<GamesInBlock[0].Length; game_Block++) {
					Parallel.For(0, GamesInBlock.Length, delegate(int game_thread) {
						for(int game_inBlock = 0; game_inBlock<GamesInBlock[game_thread][game_Block].Length; game_inBlock++) {
							int game = GamesInBlock[game_thread][game_Block][game_inBlock];
							for(int orderedTeam = 0; orderedTeam<this.TeamCount[game]; orderedTeam++) {
								this.orderedTeamSum_uses_F[game][orderedTeam][1] = Gaussian.Uniform();
								this.orderedTeamSum_uses_B[game][orderedTeam][1] = Gaussian.Uniform();
							}
						}
					});
				}
				for(int game_Block2 = 0; game_Block2<GamesInBlock[0].Length; game_Block2++) {
					Parallel.For(0, GamesInBlock.Length, delegate(int game_thread2) {
						for(int game_inBlock2 = 0; game_inBlock2<GamesInBlock[game_thread2][game_Block2].Length; game_inBlock2++) {
							int game = GamesInBlock[game_thread2][game_Block2][game_inBlock2];
							int[] thisDotteamIndexOfPlayer_game_local = default(int[]);
							thisDotteamIndexOfPlayer_game_local = new int[this.playerCountInGame[game]];
							int thisDotTeamCount_game_local = default(int);
							thisDotTeamCount_game_local = this.TeamCount[game];
							int[] thisDotTeamSizes_game_local = default(int[]);
							thisDotTeamSizes_game_local = this.TeamSizes[game];
							for(int team = 0; team<thisDotTeamCount_game_local; team++) {
								for(int teamPlayer = 0; teamPlayer<thisDotTeamSizes_game_local[team]; teamPlayer++) {
									thisDotteamIndexOfPlayer_game_local[this.indexOfPlayerOnTeam[game][team][teamPlayer]] = Factor.Copy<int>(team);
								}
							}
							int[] thisDotboundedExperienceForConditions_game_local = default(int[]);
							thisDotboundedExperienceForConditions_game_local = new int[this.playerCountInGame[game]];
							int[] thisDotplayerConditionsToLearnInGame_game_local = default(int[]);
							thisDotplayerConditionsToLearnInGame_game_local = this.playerConditionsToLearnInGame[game];
							int[] thisDotexperienceForConditionsInGame_game_local = default(int[]);
							if (this.playerCountInGame[game]>0) {
								thisDotexperienceForConditionsInGame_game_local = this.experienceForConditionsInGame[game];
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotExperienceBucketCountInConditionsMinus1_game_playerInGame_local = default(int);
								thisDotExperienceBucketCountInConditionsMinus1_game_playerInGame_local = Factor.Difference(this.experienceBucketCountInConditions[thisDotplayerConditionsToLearnInGame_game_local[playerInGame]], 1);
								thisDotboundedExperienceForConditions_game_local[playerInGame] = Math.Min(thisDotexperienceForConditionsInGame_game_local[playerInGame], thisDotExperienceBucketCountInConditionsMinus1_game_playerInGame_local);
							}
							DistributionStructArray<Gaussian,double> thisDotperformancesForEvents_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotperformancesForEvents_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int _ind0 = 0; _ind0<this.playerCountInGame[game]; _ind0++) {
								thisDotperformancesForEvents_F_game_local[_ind0] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotskillsPast_B_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillsPast_B_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int _iv6 = 0; _iv6<this.playerCountInGame[game]; _iv6++) {
								thisDotskillsPast_B_game_local[_iv6] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotskillsPast_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillsPast_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int _iv6 = 0; _iv6<this.playerCountInGame[game]; _iv6++) {
								thisDotskillsPast_F_game_local[_iv6] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotpredictedSkill2_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotpredictedSkill2_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							DistributionStructArray<Gaussian,double> thisDotskillsPastAndPresent_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillsPastAndPresent_F_game_local = new DistributionStructArray<Gaussian,double>(this.offsetVariableCountInGame[game]);
							for(int _iv4 = 0; _iv4<this.offsetVariableCountInGame[game]; _iv4++) {
								thisDotskillsPastAndPresent_F_game_local[_iv4] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotskillInConditions_CombinedVariableIndexInGame_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillInConditions_CombinedVariableIndexInGame_F_game_local = new DistributionStructArray<Gaussian,double>(this.combinedVariableCount[game]);
							for(int combinedVariable = 0; combinedVariable<this.combinedVariableCount[game]; combinedVariable++) {
								thisDotskillInConditions_CombinedVariableIndexInGame_F_game_local[combinedVariable] = Gaussian.Uniform();
							}
							thisDotskillInConditions_CombinedVariableIndexInGame_F_game_local = JaggedSubarrayWithMarginalOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.combinedVariables_B[game], this.skillInConditions_uses_F[1], this.skillInConditions_marginal_F, this.combinedVariableIndexInGame, game, thisDotskillInConditions_CombinedVariableIndexInGame_F_game_local);
							thisDotskillsPastAndPresent_F_game_local = SplitOp<double>.HeadAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotskillInConditions_CombinedVariableIndexInGame_F_game_local, this.offsetVariableCountInGame[game], thisDotskillsPastAndPresent_F_game_local);
							thisDotskillsPast_F_game_local = SplitOp<double>.HeadAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotskillsPastAndPresent_F_game_local, this.playerCountInGame[game], thisDotskillsPast_F_game_local);
							double[] thisDotoffsetChangePrecisionByTime_game_local = default(double[]);
							thisDotoffsetChangePrecisionByTime_game_local = new double[this.playerCountInGame[game]];
							bool[] thisDotnoExperienceLastGameInConditions_game_local = default(bool[]);
							thisDotnoExperienceLastGameInConditions_game_local = this.noExperienceLastGameInConditions[game];
							double[] thisDotminutesSinceLastGameInConditions_game_local = default(double[]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) { // broken
								if (!this.noExperienceLastGameInConditions[game][playerInGame]) {
									thisDotminutesSinceLastGameInConditions_game_local = this.minutesSinceLastGameInConditions[game];
									playerInGame = this.playerCountInGame[game]-1;
								}
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								bool thisDotnoExperienceLastGameInConditions_game_playerInGame_local = default(bool);
								thisDotnoExperienceLastGameInConditions_game_playerInGame_local = thisDotnoExperienceLastGameInConditions_game_local[playerInGame];
								int thisDotplayerConditionsToLearnInGame_game_playerInGame_local = default(int);
								double thisDotoffsetChangePrecisionByTime_game_playerInGame_local = default(double);
								if (!thisDotnoExperienceLastGameInConditions_game_playerInGame_local) {
									thisDotplayerConditionsToLearnInGame_game_playerInGame_local = thisDotplayerConditionsToLearnInGame_game_local[playerInGame];
									thisDotoffsetChangePrecisionByTime_game_playerInGame_local = Factor.Ratio(this.skillOffsetChangePrecisionPerMinute[thisDotplayerConditionsToLearnInGame_game_playerInGame_local], thisDotminutesSinceLastGameInConditions_game_local[playerInGame]);
								}
								Gaussian thisDotpredictedSkill2_F_game_playerInGame_local = default(Gaussian);
								thisDotpredictedSkill2_F_game_playerInGame_local = Gaussian.Uniform();
								Gaussian thisDotskillsPast_F_game_playerInGame_local = default(Gaussian);
								thisDotskillsPast_F_game_playerInGame_local = thisDotskillsPast_F_game_local[playerInGame];
								if (!thisDotnoExperienceLastGameInConditions_game_playerInGame_local) {
									Gaussian thisDotpredictedSkill1_F_game_playerInGame_local = default(Gaussian);
									Gaussian thisDotvdouble617_F_game_playerInGame_local = default(Gaussian);
									Gaussian thisDotpredictedSkill2_1__F_game_playerInGame_local = default(Gaussian);
									thisDotpredictedSkill1_F_game_playerInGame_local = GaussianOpBase.SampleAverageConditional(thisDotskillsPast_F_game_playerInGame_local, thisDotoffsetChangePrecisionByTime_game_playerInGame_local);
									thisDotoffsetChangePrecisionByTime_game_local[playerInGame] = thisDotoffsetChangePrecisionByTime_game_playerInGame_local;
									thisDotvdouble617_F_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotpredictedSkill1_F_game_playerInGame_local, this.skillOffsetChangeMeanByExperience[thisDotplayerConditionsToLearnInGame_game_playerInGame_local][thisDotboundedExperienceForConditions_game_local[playerInGame]]);
									thisDotpredictedSkill2_1__F_game_playerInGame_local = GaussianOpBase.SampleAverageConditional(thisDotvdouble617_F_game_playerInGame_local, this.skillOffsetChangePrecisionPerGame[thisDotplayerConditionsToLearnInGame_game_playerInGame_local]);
									thisDotpredictedSkill2_F_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotpredictedSkill2_F_game_playerInGame_local, thisDotpredictedSkill2_1__F_game_playerInGame_local);
								}
								if (thisDotnoExperienceLastGameInConditions_game_playerInGame_local) {
									thisDotpredictedSkill2_F_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotpredictedSkill2_F_game_playerInGame_local, thisDotskillsPast_F_game_playerInGame_local);
								}
								thisDotpredictedSkill2_F_game_local[playerInGame] = thisDotpredictedSkill2_F_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotbaseSkillChange_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotbaseSkillChange_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							bool[] thisDotnoExperienceLastGame_game_local = default(bool[]);
							if (this.playerCountInGame[game]>0) {
								thisDotnoExperienceLastGame_game_local = this.noExperienceLastGame[game];
							}
							double[] thisDotminutesSinceLastGame_game_local = default(double[]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) { // broken
								if (!this.noExperienceLastGame[game][playerInGame]) {
									thisDotminutesSinceLastGame_game_local = this.minutesSinceLastGame[game];
									playerInGame = this.playerCountInGame[game]-1;
								}
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotbaseSkillChange_F_game_playerInGame_local = default(Gaussian);
								thisDotbaseSkillChange_F_game_playerInGame_local = Gaussian.Uniform();
								bool thisDotnoExperienceLastGame_game_playerInGame_local = default(bool);
								thisDotnoExperienceLastGame_game_playerInGame_local = thisDotnoExperienceLastGame_game_local[playerInGame];
								if (thisDotnoExperienceLastGame_game_playerInGame_local) {
									Gaussian thisDotbaseSkillChange_0__F_game_playerInGame_local = default(Gaussian);
									thisDotbaseSkillChange_0__F_game_playerInGame_local = Gaussian.Uniform();
									thisDotbaseSkillChange_0__F_game_playerInGame_local = Distribution.SetPoint<Gaussian,double>(thisDotbaseSkillChange_0__F_game_playerInGame_local, Factor.Copy<double>(0.0));
									thisDotbaseSkillChange_F_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChange_F_game_playerInGame_local, thisDotbaseSkillChange_0__F_game_playerInGame_local);
								}
								if (!thisDotnoExperienceLastGame_game_playerInGame_local) {
									double thisDotbaseChangePrecisionByTime_game_playerInGame_local = default(double);
									thisDotbaseChangePrecisionByTime_game_playerInGame_local = Factor.Ratio(this.baseSkillChangePrecisionPerMinute, thisDotminutesSinceLastGame_game_local[playerInGame]);
									Gaussian thisDotbaseSkillChange1_F_game_playerInGame_local = default(Gaussian);
									thisDotbaseSkillChange1_F_game_playerInGame_local = GaussianOpBase.SampleAverageConditional(0.0, thisDotbaseChangePrecisionByTime_game_playerInGame_local);
									Gaussian thisDotbaseSkillChange2_F_game_playerInGame_local = default(Gaussian);
									thisDotbaseSkillChange2_F_game_playerInGame_local = GaussianOpBase.SampleAverageConditional(thisDotbaseSkillChange1_F_game_playerInGame_local, this.baseSkillChangePrecisionPerGame);
									thisDotbaseSkillChange_F_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChange_F_game_playerInGame_local, thisDotbaseSkillChange2_F_game_playerInGame_local);
								}
								thisDotbaseSkillChange_F_game_local[playerInGame] = thisDotbaseSkillChange_F_game_playerInGame_local;
							}
							int thisDotsubarrayChangeVariableCountInGame_game_local = default(int);
							thisDotsubarrayChangeVariableCountInGame_game_local = this.subarrayChangeVariableCountInGame[game];
							DistributionStructArray<Gaussian,double> thisDotbaseSkillChangesInGame_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotbaseSkillChangesInGame_F_game_local = new DistributionStructArray<Gaussian,double>(thisDotsubarrayChangeVariableCountInGame_game_local);
							for(int _iv3 = 0; _iv3<thisDotsubarrayChangeVariableCountInGame_game_local; _iv3++) {
								thisDotbaseSkillChangesInGame_F_game_local[_iv3] = Gaussian.Uniform();
							}
							int thisDotupdateSubarrayChangeVariableCountInGame_game_local = default(int);
							thisDotupdateSubarrayChangeVariableCountInGame_game_local = this.updateSubarrayChangeVariableCountInGame[game];
							DistributionStructArray<Gaussian,double> thisDotupdateSubarray_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotupdateSubarray_F_game_local = new DistributionStructArray<Gaussian,double>(thisDotupdateSubarrayChangeVariableCountInGame_game_local);
							for(int _iv7 = 0; _iv7<thisDotupdateSubarrayChangeVariableCountInGame_game_local; _iv7++) {
								thisDotupdateSubarray_F_game_local[_iv7] = Gaussian.Uniform();
							}
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotupdateChanges_F_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotupdateChanges_F_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
							thisDotbaseSkillChangesInGame_F_game_local = SplitOp<double>.TailAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotskillInConditions_CombinedVariableIndexInGame_F_game_local, this.offsetVariableCountInGame[game], thisDotbaseSkillChangesInGame_F_game_local);
							int thisDotpreviousSubarrayChangeVariableCountInGame_game_local = default(int);
							thisDotpreviousSubarrayChangeVariableCountInGame_game_local = this.previousSubarrayChangeVariableCountInGame[game];
							thisDotupdateSubarray_F_game_local = SplitOp<double>.TailAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotbaseSkillChangesInGame_F_game_local, thisDotpreviousSubarrayChangeVariableCountInGame_game_local, thisDotupdateSubarray_F_game_local);
							int[] thisDotupdateChangeVariableSubarrayCountInGame_game_local = default(int[]);
							thisDotupdateChangeVariableSubarrayCountInGame_game_local = this.updateChangeVariableSubarrayCountInGame[game];
							int[][] thisDotupdateChangeVariableSubarrayIndexInGame_game_local = default(int[][]);
							thisDotupdateChangeVariableSubarrayIndexInGame_game_local = this.updateChangeVariableSubarrayIndexInGame[game];
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local = default(int);
								thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local = thisDotupdateChangeVariableSubarrayCountInGame_game_local[playerInGame];
								DistributionStructArray<Gaussian,double> thisDotupdateChanges_F_game_playerInGame_local = default(DistributionStructArray<Gaussian,double>);
								thisDotupdateChanges_F_game_playerInGame_local = new DistributionStructArray<Gaussian,double>(thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local);
								for(int index47 = 0; index47<thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local; index47++) {
									thisDotupdateChanges_F_game_playerInGame_local[index47] = Gaussian.Uniform();
								}
								thisDotupdateChanges_F_game_playerInGame_local = SplitSubarrayOp<double>.ItemsAverageConditional(thisDotupdateSubarray_F_game_local, thisDotupdateChangeVariableSubarrayIndexInGame_game_local, playerInGame, thisDotupdateChanges_F_game_playerInGame_local, false);
                                thisDotupdateChanges_F_game_local[playerInGame] = thisDotupdateChanges_F_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotupdateChanges_item0_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotupdateChanges_item0_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							int[] thisDotupdateChangeVariableCountInGame_game_local = default(int[]);
							thisDotupdateChangeVariableCountInGame_game_local = this.updateChangeVariableCountInGame[game];
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotupdateChangeVariableCountInGame_game_playerInGame_local = default(int);
								thisDotupdateChangeVariableCountInGame_game_playerInGame_local = thisDotupdateChangeVariableCountInGame_game_local[playerInGame];
								if (((thisDotupdateChangeVariableCountInGame_game_playerInGame_local==1)||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local==2))||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local==4)) {
									Gaussian thisDotupdateChanges_item0_F_game_playerInGame_local = default(Gaussian);
									thisDotupdateChanges_item0_F_game_playerInGame_local = Gaussian.Uniform();
									thisDotupdateChanges_item0_F_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item0_F_game_playerInGame_local, thisDotupdateChanges_F_game_local[playerInGame][0]);
									thisDotupdateChanges_item0_F_game_local[playerInGame] = thisDotupdateChanges_item0_F_game_playerInGame_local;
								}
							}
							DistributionStructArray<Gaussian,double> thisDotbaseSkillChangePrimary_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotbaseSkillChangePrimary_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							DistributionStructArray<Gaussian,double> thisDotupdateChanges_item1_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotupdateChanges_item1_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotupdateChangeVariableCountInGame_game_playerInGame_local2 = default(int);
								thisDotupdateChangeVariableCountInGame_game_playerInGame_local2 = thisDotupdateChangeVariableCountInGame_game_local[playerInGame];
								Gaussian thisDotupdateChanges_item1_F_game_playerInGame_local = default(Gaussian);
								if ((thisDotupdateChangeVariableCountInGame_game_playerInGame_local2==2)||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local2==4)) {
									thisDotupdateChanges_item1_F_game_playerInGame_local = Gaussian.Uniform();
									thisDotupdateChanges_item1_F_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item1_F_game_playerInGame_local, thisDotupdateChanges_F_game_local[playerInGame][1]);
								}
								Gaussian thisDotbaseSkillChangeSecondary_B_game_playerInGame_local = default(Gaussian);
								thisDotbaseSkillChangeSecondary_B_game_playerInGame_local = Gaussian.Uniform();
								Gaussian thisDotupdateChanges_item0_F_game_playerInGame_local2 = default(Gaussian);
								thisDotupdateChanges_item0_F_game_playerInGame_local2 = thisDotupdateChanges_item0_F_game_local[playerInGame];
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local2==2) {
									Gaussian thisDotbaseSkillChangeSecondary_2__B_game_playerInGame_local = default(Gaussian);
									thisDotbaseSkillChangeSecondary_2__B_game_playerInGame_local = DoublePlusOp.BAverageConditional(thisDotupdateChanges_item1_F_game_playerInGame_local, thisDotupdateChanges_item0_F_game_playerInGame_local2);
									thisDotbaseSkillChangeSecondary_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSecondary_B_game_playerInGame_local, thisDotbaseSkillChangeSecondary_2__B_game_playerInGame_local);
								}
								thisDotupdateChanges_item1_F_game_local[playerInGame] = thisDotupdateChanges_item1_F_game_playerInGame_local;
								Gaussian thisDotbaseSkillChangePrimary_F_game_playerInGame_local = default(Gaussian);
								thisDotbaseSkillChangePrimary_F_game_playerInGame_local = Gaussian.Uniform();
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local2==1) {
									thisDotbaseSkillChangeSecondary_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSecondary_B_game_playerInGame_local, thisDotupdateChanges_item0_F_game_playerInGame_local2);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local2==4) {
									thisDotbaseSkillChangeSecondary_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSecondary_B_game_playerInGame_local, thisDotupdateChanges_item0_F_game_playerInGame_local2);
								}
								thisDotbaseSkillChangePrimary_F_game_playerInGame_local = SequentialCopyOp.FirstAverageConditional<Gaussian>(thisDotbaseSkillChange_F_game_local[playerInGame], thisDotbaseSkillChangeSecondary_B_game_playerInGame_local, thisDotbaseSkillChangePrimary_F_game_playerInGame_local);
								thisDotbaseSkillChangePrimary_F_game_local[playerInGame] = thisDotbaseSkillChangePrimary_F_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotpreviousSubarray_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotpreviousSubarray_F_game_local = new DistributionStructArray<Gaussian,double>(thisDotpreviousSubarrayChangeVariableCountInGame_game_local);
							for(int _iv8 = 0; _iv8<thisDotpreviousSubarrayChangeVariableCountInGame_game_local; _iv8++) {
								thisDotpreviousSubarray_F_game_local[_iv8] = Gaussian.Uniform();
							}
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotpreviousChanges_F_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotpreviousChanges_F_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
							thisDotpreviousSubarray_F_game_local = SplitOp<double>.HeadAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotbaseSkillChangesInGame_F_game_local, thisDotpreviousSubarrayChangeVariableCountInGame_game_local, thisDotpreviousSubarray_F_game_local);
							int[] thisDotpreviousChangeVariableSubarrayCountInGame_game_local = default(int[]);
							thisDotpreviousChangeVariableSubarrayCountInGame_game_local = this.previousChangeVariableSubarrayCountInGame[game];
							int[][] thisDotpreviousChangeVariableSubarrayIndexInGame_game_local = default(int[][]);
							thisDotpreviousChangeVariableSubarrayIndexInGame_game_local = this.previousChangeVariableSubarrayIndexInGame[game];
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local = default(int);
								thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local = thisDotpreviousChangeVariableSubarrayCountInGame_game_local[playerInGame];
								DistributionStructArray<Gaussian,double> thisDotpreviousChanges_F_game_playerInGame_local = default(DistributionStructArray<Gaussian,double>);
								thisDotpreviousChanges_F_game_playerInGame_local = new DistributionStructArray<Gaussian,double>(thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local);
								for(int index46 = 0; index46<thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local; index46++) {
									thisDotpreviousChanges_F_game_playerInGame_local[index46] = Gaussian.Uniform();
								}
								thisDotpreviousChanges_F_game_playerInGame_local = SplitSubarrayOp<double>.ItemsAverageConditional(thisDotpreviousSubarray_F_game_local, thisDotpreviousChangeVariableSubarrayIndexInGame_game_local, playerInGame, thisDotpreviousChanges_F_game_playerInGame_local, false);
                                thisDotpreviousChanges_F_game_local[playerInGame] = thisDotpreviousChanges_F_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotvdouble621_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble621_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotvdouble621_F_game_playerInGame_local = default(Gaussian);
								thisDotvdouble621_F_game_playerInGame_local = FastSumOp.SumAverageConditional(thisDotpreviousChanges_F_game_local[playerInGame]);
								thisDotvdouble621_F_game_local[playerInGame] = thisDotvdouble621_F_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotvdouble622_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble622_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotvdouble622_F_game_playerInGame_local = default(Gaussian);
								thisDotvdouble622_F_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotbaseSkillChangePrimary_F_game_local[playerInGame], thisDotvdouble621_F_game_local[playerInGame]);
								thisDotvdouble622_F_game_local[playerInGame] = thisDotvdouble622_F_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotvdouble638_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble638_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							Gaussian[][] thisDotupdateChanges_playerInGame_1_4__uses_F_game_local = default(Gaussian[][]);
							thisDotupdateChanges_playerInGame_1_4__uses_F_game_local = new Gaussian[this.playerCountInGame[game]][];
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								if (thisDotupdateChangeVariableCountInGame_game_local[playerInGame]==4) {
									thisDotupdateChanges_playerInGame_1_4__uses_F_game_local[playerInGame] = new Gaussian[2];
								}
							}
							Gaussian[][] thisDotupdateChanges_playerInGame_1_4__uses_B_game_local = default(Gaussian[][]);
							thisDotupdateChanges_playerInGame_1_4__uses_B_game_local = new Gaussian[this.playerCountInGame[game]][];
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotupdateChangeVariableCountInGame_game_playerInGame_local3 = default(int);
								thisDotupdateChangeVariableCountInGame_game_playerInGame_local3 = thisDotupdateChangeVariableCountInGame_game_local[playerInGame];
								Gaussian thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame__1_local = default(Gaussian);
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local3==4) {
									Gaussian[] thisDotupdateChanges_playerInGame_1_4__uses_B_game_playerInGame_local = default(Gaussian[]);
									thisDotupdateChanges_playerInGame_1_4__uses_B_game_playerInGame_local = new Gaussian[2];
									thisDotupdateChanges_playerInGame_1_4__uses_B_game_playerInGame_local[0] = Gaussian.Uniform();
									DistributionStructArray<Gaussian,double> thisDotupdateChanges_F_game_playerInGame_local2 = default(DistributionStructArray<Gaussian,double>);
									thisDotupdateChanges_F_game_playerInGame_local2 = thisDotupdateChanges_F_game_local[playerInGame];
									thisDotupdateChanges_playerInGame_1_4__uses_B_game_playerInGame_local[0] = DoublePlusOp.BAverageConditional(thisDotupdateChanges_F_game_playerInGame_local2[3], thisDotupdateChanges_F_game_playerInGame_local2[2]);
									thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame__1_local = Gaussian.Uniform();
									thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame__1_local = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotupdateChanges_playerInGame_1_4__uses_B_game_playerInGame_local, thisDotupdateChanges_item1_F_game_local[playerInGame], 1, thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame__1_local);
									thisDotupdateChanges_playerInGame_1_4__uses_B_game_local[playerInGame] = thisDotupdateChanges_playerInGame_1_4__uses_B_game_playerInGame_local;
								}
								Gaussian thisDotbaseSkillChangeSinceLastGame_F_game_playerInGame_local = default(Gaussian);
								thisDotbaseSkillChangeSinceLastGame_F_game_playerInGame_local = Gaussian.Uniform();
								Gaussian thisDotvdouble622_F_game_playerInGame_local2 = default(Gaussian);
								thisDotvdouble622_F_game_playerInGame_local2 = thisDotvdouble622_F_game_local[playerInGame];
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local3==4) {
									Gaussian thisDotbaseSkillChangeSinceLastGame_4__F_game_playerInGame_local = default(Gaussian);
									thisDotbaseSkillChangeSinceLastGame_4__F_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotvdouble622_F_game_playerInGame_local2, thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame__1_local);
									thisDotupdateChanges_playerInGame_1_4__uses_F_game_local[playerInGame][1] = thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame__1_local;
									thisDotbaseSkillChangeSinceLastGame_F_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSinceLastGame_F_game_playerInGame_local, thisDotbaseSkillChangeSinceLastGame_4__F_game_playerInGame_local);
								}
								Gaussian thisDotvdouble638_F_game_playerInGame_local = default(Gaussian);
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local3==0) {
									thisDotbaseSkillChangeSinceLastGame_F_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSinceLastGame_F_game_playerInGame_local, thisDotvdouble622_F_game_playerInGame_local2);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local3==1) {
									thisDotbaseSkillChangeSinceLastGame_F_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSinceLastGame_F_game_playerInGame_local, thisDotvdouble622_F_game_playerInGame_local2);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local3==2) {
									thisDotbaseSkillChangeSinceLastGame_F_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSinceLastGame_F_game_playerInGame_local, thisDotvdouble622_F_game_playerInGame_local2);
								}
								thisDotvdouble638_F_game_playerInGame_local = GaussianProductOpBase.ProductAverageConditional(thisDotbaseSkillChangeSinceLastGame_F_game_playerInGame_local, this.baseSkillWeights[thisDotplayerConditionsToLearnInGame_game_local[playerInGame]]);
								thisDotvdouble638_F_game_local[playerInGame] = thisDotvdouble638_F_game_playerInGame_local;
							}
							Gaussian[][] thisDotskillsPresent_uses_B_game_local = default(Gaussian[][]);
							thisDotskillsPresent_uses_B_game_local = new Gaussian[this.playerCountInGame[game]][];
							for(int _iv5 = 0; _iv5<this.playerCountInGame[game]; _iv5++) {
								Gaussian[] thisDotskillsPresent_uses_B_game__iv5_local = default(Gaussian[]);
								thisDotskillsPresent_uses_B_game__iv5_local = new Gaussian[2];
								thisDotskillsPresent_uses_B_game__iv5_local[0] = Gaussian.Uniform();
								thisDotskillsPresent_uses_B_game__iv5_local[1] = Gaussian.Uniform();
								thisDotskillsPresent_uses_B_game_local[_iv5] = thisDotskillsPresent_uses_B_game__iv5_local;
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotpredictedSkill_F_game_playerInGame_local = default(Gaussian);
								thisDotpredictedSkill_F_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotpredictedSkill2_F_game_local[playerInGame], thisDotvdouble638_F_game_local[playerInGame]);
								thisDotskillsPresent_uses_B_game_local[playerInGame][0] = ArrayHelper.SetTo<Gaussian>(thisDotskillsPresent_uses_B_game_local[playerInGame][0], thisDotpredictedSkill_F_game_playerInGame_local);
							}
							int[] thisDotboundedSquadSize_game_local = default(int[]);
							thisDotboundedSquadSize_game_local = new int[this.playerCountInGame[game]];
							int[] thisDotsquadSizes_game_local = default(int[]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) { // broken
								if (this.playerIsInSquad[game][playerInGame]) {
									thisDotsquadSizes_game_local = this.squadSizes[game];
									playerInGame = this.playerCountInGame[game]-1;
								}
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								if (this.playerIsInSquad[game][playerInGame]) {
									int thisDotvint325_game_playerInGame_local = default(int);
									thisDotvint325_game_playerInGame_local = Factor.Difference(this.squadSizeBucketCount[thisDotplayerConditionsToLearnInGame_game_local[playerInGame]], 1);
									int thisDotSquadSizeMinus2_game_playerInGame_local = default(int);
									thisDotSquadSizeMinus2_game_playerInGame_local = Factor.Difference(thisDotsquadSizes_game_local[playerInGame], 2);
									thisDotboundedSquadSize_game_local[playerInGame] = Math.Min(thisDotvint325_game_playerInGame_local, thisDotSquadSizeMinus2_game_playerInGame_local);
								}
							}
							Gaussian[][] thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_local = default(Gaussian[][]);
							thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_local = new Gaussian[this.playerCountInGame[game]][];
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian[] thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local = default(Gaussian[]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local = new Gaussian[2];
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local[0] = Gaussian.Uniform();
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_local[playerInGame] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotvdouble__304_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble__304_F_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local);
							for(int team = 0; team<thisDotTeamCount_game_local; team++) {
								thisDotvdouble__304_F_game_local[team] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							Gaussian[][] thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_local = default(Gaussian[][]);
							thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_local = new Gaussian[this.playerCountInGame[game]][];
							DistributionStructArray<Gaussian,double> thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								DistributionStructArray<Gaussian,double> thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_playerInGame_local = default(DistributionStructArray<Gaussian,double>);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_playerInGame_local = new DistributionStructArray<Gaussian,double>(this.eventTypeCount);
								for(int eventType = 0; eventType<this.eventTypeCount; eventType++) {
									Gaussian thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_playerInGame_eventType_local = default(Gaussian);
									thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_playerInGame_eventType_local = LowPriorityBackwardOp.ValueAverageConditional<Gaussian>(this.enemyAverageCopy_B[game][playerInGame][eventType]);
									thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_playerInGame_local[eventType] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_playerInGame_eventType_local;
								}
								Gaussian thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_game_playerInGame_local = default(Gaussian);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_game_playerInGame_local = ReplicateOp_Divide.ToDefInit<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_local[playerInGame][0]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_game_playerInGame_local = ReplicateOp_Divide.ToDef<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_playerInGame_local, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_game_playerInGame_local);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_local[playerInGame] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_playerInGame_local;
								Gaussian[] thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_playerInGame_local = default(Gaussian[]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_playerInGame_local = new Gaussian[2];
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_playerInGame_local[0] = Gaussian.Uniform();
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_playerInGame_local[1] = Gaussian.Uniform();
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_playerInGame_local[0] = ArrayHelper.SetTo<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_playerInGame_local[0], thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_game_playerInGame_local);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_game_local[playerInGame] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_game_playerInGame_local;
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_playerInGame_local[1] = LowPriorityBackwardOp.ValueAverageConditional<Gaussian>(this.enemyAverageQuit_B[game][playerInGame]);
								Gaussian thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_game_playerInGame_local = default(Gaussian);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_game_playerInGame_local = Gaussian.Uniform();
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_game_playerInGame_local = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_playerInGame_local, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_game_playerInGame_local);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_game_local[playerInGame] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_game_playerInGame_local;
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_local[playerInGame] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotvdouble__304_F_marginal_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble__304_F_marginal_game_local = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(thisDotvdouble__304_F_game_local);
							DistributionStructArray<Gaussian,double> thisDotvdouble__304_B_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble__304_B_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local);
							for(int team = 0; team<thisDotTeamCount_game_local; team++) {
								thisDotvdouble__304_B_game_local[team] = Gaussian.Uniform();
							}
							thisDotvdouble__304_B_game_local = GetItemsOp<double>.ArrayAverageConditional(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_game_local, thisDotteamIndexOfPlayer_game_local, thisDotvdouble__304_B_game_local);
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotteamStrength2_rep_B_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotteamStrength2_rep_B_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(thisDotTeamCount_game_local);
							for(int _a = 0; _a<thisDotTeamCount_game_local; _a++) {
								thisDotteamStrength2_rep_B_game_local[_a] = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local);
							}
							for(int team = 0; team<thisDotTeamCount_game_local; team++) {
								for(int _a = 0; _a<thisDotTeamCount_game_local; _a++) {
									thisDotteamStrength2_rep_B_game_local[_a][team] = Gaussian.Uniform();
								}
							}
							for(int team = 0; team<thisDotTeamCount_game_local; team++) {
								thisDotteamStrength2_rep_B_game_local[team] = SumExceptOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(thisDotvdouble__304_B_game_local[team], this.teamStrength2_rep_F[game][team], team, thisDotteamStrength2_rep_B_game_local[team]);
							}
							DistributionStructArray<Gaussian,double> thisDotteamStrength_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamStrength_F_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local);
							for(int team = 0; team<thisDotTeamCount_game_local; team++) {
								thisDotteamStrength_F_game_local[team] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotteamStrength2_rep_F_marginal_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamStrength2_rep_F_marginal_game_local = ReplicateOp_Divide.MarginalInit<DistributionStructArray<Gaussian,double>>(thisDotteamStrength_F_game_local);
							DistributionStructArray<Gaussian,double> thisDotteamStrength2_rep_B_toDef_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamStrength2_rep_B_toDef_game_local = ReplicateOp_Divide.ToDefInit<DistributionStructArray<Gaussian,double>>(thisDotteamStrength_F_game_local);
							thisDotteamStrength2_rep_B_toDef_game_local = ReplicateOp_Divide.ToDef<DistributionStructArray<Gaussian,double>>(thisDotteamStrength2_rep_B_game_local, thisDotteamStrength2_rep_B_toDef_game_local);
							DistributionStructArray<Gaussian,double> thisDotteamSumOfWeightedPerformancesForEvents_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamSumOfWeightedPerformancesForEvents_F_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local);
							for(int _iv9 = 0; _iv9<thisDotTeamCount_game_local; _iv9++) {
								thisDotteamSumOfWeightedPerformancesForEvents_F_game_local[_iv9] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotteamSumOfWeightedPerformances_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamSumOfWeightedPerformances_F_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local);
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotweightedPerformances_F_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotweightedPerformances_F_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(thisDotTeamCount_game_local);
							DistributionStructArray<Gaussian,double> thisDotperformancesPrimary_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotperformancesPrimary_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							DistributionStructArray<Gaussian,double> thisDotperformances_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotperformances_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							Gaussian[][] thisDotskillsPresent_uses_F_game_local = default(Gaussian[][]);
							thisDotskillsPresent_uses_F_game_local = new Gaussian[this.playerCountInGame[game]][];
							for(int _iv5 = 0; _iv5<this.playerCountInGame[game]; _iv5++) {
								thisDotskillsPresent_uses_F_game_local[_iv5] = new Gaussian[2];
							}
							DistributionStructArray<Gaussian,double> thisDotskillsPresent_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillsPresent_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int _iv5 = 0; _iv5<this.playerCountInGame[game]; _iv5++) {
								thisDotskillsPresent_F_game_local[_iv5] = Gaussian.Uniform();
							}
							thisDotskillsPresent_F_game_local = SplitOp<double>.TailAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotskillsPastAndPresent_F_game_local, this.playerCountInGame[game], thisDotskillsPresent_F_game_local);
							for(int _iv5 = 0; _iv5<this.playerCountInGame[game]; _iv5++) {
								Gaussian thisDotskillsPresent_uses_F_game__iv5__1_local = default(Gaussian);
								thisDotskillsPresent_uses_F_game__iv5__1_local = Gaussian.Uniform();
								thisDotskillsPresent_uses_F_game__iv5__1_local = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotskillsPresent_uses_B_game_local[_iv5], thisDotskillsPresent_F_game_local[_iv5], 1, thisDotskillsPresent_uses_F_game__iv5__1_local);
								thisDotskillsPresent_uses_F_game_local[_iv5][1] = thisDotskillsPresent_uses_F_game__iv5__1_local;
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotskillInSquad_F_game_playerInGame_local = default(Gaussian);
								thisDotskillInSquad_F_game_playerInGame_local = Gaussian.Uniform();
								Gaussian thisDotskillsPresent_uses_F_game_playerInGame__1_local = default(Gaussian);
								thisDotskillsPresent_uses_F_game_playerInGame__1_local = thisDotskillsPresent_uses_F_game_local[playerInGame][1];
								if (this.playerIsInSquad[game][playerInGame]) {
									Gaussian thisDotskillInSquad_playerInGame_0__F_game_playerInGame_local = default(Gaussian);
									thisDotskillInSquad_playerInGame_0__F_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotskillsPresent_uses_F_game_playerInGame__1_local, this.squadOffset[thisDotplayerConditionsToLearnInGame_game_local[playerInGame]][thisDotboundedSquadSize_game_local[playerInGame]]);
									thisDotskillInSquad_F_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotskillInSquad_F_game_playerInGame_local, thisDotskillInSquad_playerInGame_0__F_game_playerInGame_local);
								}
								Gaussian thisDotperformances_F_game_playerInGame_local = default(Gaussian);
								if (!this.playerIsInSquad[game][playerInGame]) {
									thisDotskillInSquad_F_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotskillInSquad_F_game_playerInGame_local, thisDotskillsPresent_uses_F_game_playerInGame__1_local);
								}
								thisDotperformances_F_game_playerInGame_local = GaussianFromMeanAndVarianceOp.SampleAverageConditional(thisDotskillInSquad_F_game_playerInGame_local, this.PerformanceVariance);
								Gaussian thisDotperformancesPrimary_F_game_playerInGame_local = default(Gaussian);
								thisDotperformancesPrimary_F_game_playerInGame_local = Gaussian.Uniform();
								thisDotperformancesPrimary_F_game_playerInGame_local = SequentialCopyOp.FirstAverageConditional<Gaussian>(thisDotperformances_F_game_playerInGame_local, this.performancesForEvents_B[game][playerInGame], thisDotperformancesPrimary_F_game_playerInGame_local);
								thisDotperformancesPrimary_F_game_local[playerInGame] = thisDotperformancesPrimary_F_game_playerInGame_local;
								thisDotperformances_F_game_local[playerInGame] = thisDotperformances_F_game_playerInGame_local;
							}
							for(int team = 0; team<thisDotTeamCount_game_local; team++) { // broken
								if (thisDotTeamSizes_game_local[team]>0) {
									this.performancesByTeamForEvents_B_reduced = Gaussian.Uniform();
									team = thisDotTeamCount_game_local-1;
								}
							}
							for(int team = 0; team<thisDotTeamCount_game_local; team++) {
								int thisDotTeamSizes_game_team_local = default(int);
								thisDotTeamSizes_game_team_local = thisDotTeamSizes_game_local[team];
								DistributionStructArray<Gaussian,double> thisDotperformancesByTeam_F_game_team_local = default(DistributionStructArray<Gaussian,double>);
								thisDotperformancesByTeam_F_game_team_local = new DistributionStructArray<Gaussian,double>(thisDotTeamSizes_game_team_local);
								for(int teamPlayer = 0; teamPlayer<thisDotTeamSizes_game_team_local; teamPlayer++) {
									thisDotperformancesByTeam_F_game_team_local[teamPlayer] = Gaussian.Uniform();
								}
								DistributionStructArray<Gaussian,double> thisDotweightedPerformances_F_game_team_local = default(DistributionStructArray<Gaussian,double>);
								thisDotweightedPerformances_F_game_team_local = new DistributionStructArray<Gaussian,double>(thisDotTeamSizes_game_team_local);
								thisDotperformancesByTeam_F_game_team_local = SplitSubarrayOp<double>.ItemsAverageConditional(thisDotperformancesPrimary_F_game_local, this.indexOfPlayerOnTeam[game], team, thisDotperformancesByTeam_F_game_team_local, false);
                                for (int teamPlayer = 0; teamPlayer<thisDotTeamSizes_game_team_local; teamPlayer++) {
									Gaussian thisDotperformancesByTeamPrimary_F_game_team_teamPlayer_local = default(Gaussian);
									thisDotperformancesByTeamPrimary_F_game_team_teamPlayer_local = Gaussian.Uniform();
									Gaussian thisDotweightedPerformances_F_game_team_teamPlayer_local = default(Gaussian);
									thisDotperformancesByTeamPrimary_F_game_team_teamPlayer_local = SequentialCopyOp.FirstAverageConditional<Gaussian>(thisDotperformancesByTeam_F_game_team_local[teamPlayer], this.performancesByTeamForEvents_B_reduced, thisDotperformancesByTeamPrimary_F_game_team_teamPlayer_local);
									thisDotweightedPerformances_F_game_team_teamPlayer_local = GaussianProductOpBase.ProductAverageConditional(thisDotperformancesByTeamPrimary_F_game_team_teamPlayer_local, this.playerWeightsByTeam[game][team][teamPlayer]);
									thisDotweightedPerformances_F_game_team_local[teamPlayer] = thisDotweightedPerformances_F_game_team_teamPlayer_local;
								}
								Gaussian thisDotteamSumOfWeightedPerformances_F_game_team_local = default(Gaussian);
								thisDotteamSumOfWeightedPerformances_F_game_team_local = FastSumOp.SumAverageConditional(thisDotweightedPerformances_F_game_team_local);
								thisDotteamSumOfWeightedPerformances_F_game_local[team] = thisDotteamSumOfWeightedPerformances_F_game_team_local;
								thisDotweightedPerformances_F_game_local[team] = thisDotweightedPerformances_F_game_team_local;
							}
							DistributionStructArray<Gaussian,double> thisDotteamSumOfWeightedPerformancesPrimary_B_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamSumOfWeightedPerformancesPrimary_B_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local);
							for(int team = 0; team<thisDotTeamCount_game_local; team++) {
								thisDotteamSumOfWeightedPerformancesPrimary_B_game_local[team] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotorderedTeamSum_B_RorderedTeam_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotorderedTeamSum_B_RorderedTeam_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local);
							DistributionStructArray<Gaussian,double> thisDotorderedTeamSum_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotorderedTeamSum_F_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local);
							for(int orderedTeam = 0; orderedTeam<thisDotTeamCount_game_local; orderedTeam++) {
								thisDotorderedTeamSum_F_game_local[orderedTeam] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotteamSumOfWeightedPerformancesPrimary_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamSumOfWeightedPerformancesPrimary_F_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local);
							DistributionStructArray<Gaussian,double> thisDotteamSumOfWeightedPerformancesForEvents_B_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamSumOfWeightedPerformancesForEvents_B_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local);
							for(int _iv9 = 0; _iv9<thisDotTeamCount_game_local; _iv9++) {
								thisDotteamSumOfWeightedPerformancesForEvents_B_game_local[_iv9] = Gaussian.Uniform();
							}
							Gaussian[][] thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_local = default(Gaussian[][]);
							thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_local = new Gaussian[thisDotTeamCount_game_local][];
							for(int _iv9 = 0; _iv9<thisDotTeamCount_game_local; _iv9++) {
								Gaussian[] thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game__iv9_local = default(Gaussian[]);
								thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game__iv9_local = new Gaussian[2];
								thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game__iv9_local[1] = Gaussian.Uniform();
								thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game__iv9_local[0] = Gaussian.Uniform();
								thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_local[_iv9] = thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game__iv9_local;
							}
							for(int team = 0; team<thisDotTeamCount_game_local; team++) {
								Gaussian thisDotteamStrength_B_game_team_local = default(Gaussian);
								thisDotteamStrength_B_game_team_local = LowPriorityBackwardOp.ValueAverageConditional<Gaussian>(thisDotteamStrength2_rep_B_toDef_game_local[team]);
								Gaussian[] thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_team_local = default(Gaussian[]);
								thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_team_local = thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_local[team];
								if (!this.denomIsZero[game][team]) {
									Gaussian thisDotteamSumOfWeightedPerformancesForEvents_team_1__B_game_team_local = default(Gaussian);
									thisDotteamSumOfWeightedPerformancesForEvents_team_1__B_game_team_local = GaussianProductOpBase.ProductAverageConditional(thisDotteamStrength_B_game_team_local, this.enemyWeight[game][team]);
									thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_team_local[0] = ArrayHelper.SetTo<Gaussian>(thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_team_local[0], thisDotteamSumOfWeightedPerformancesForEvents_team_1__B_game_team_local);
								}
								if (this.denomIsZero[game][team]) {
									thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_team_local[0] = ArrayHelper.SetTo<Gaussian>(thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_team_local[0], thisDotteamStrength_B_game_team_local);
								}
								Gaussian thisDotteamSumOfWeightedPerformancesForEvents_B_game_team_local = default(Gaussian);
								thisDotteamSumOfWeightedPerformancesForEvents_B_game_team_local = thisDotteamSumOfWeightedPerformancesForEvents_B_game_local[team];
								thisDotteamSumOfWeightedPerformancesForEvents_B_game_team_local = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_team_local, thisDotteamSumOfWeightedPerformancesForEvents_B_game_team_local);
								thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_local[team] = thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_team_local;
								Gaussian thisDotteamSumOfWeightedPerformancesPrimary_F_game_team_local = default(Gaussian);
								thisDotteamSumOfWeightedPerformancesPrimary_F_game_team_local = Gaussian.Uniform();
								thisDotteamSumOfWeightedPerformancesPrimary_F_game_team_local = SequentialCopyOp.FirstAverageConditional<Gaussian>(thisDotteamSumOfWeightedPerformances_F_game_local[team], thisDotteamSumOfWeightedPerformancesForEvents_B_game_team_local, thisDotteamSumOfWeightedPerformancesPrimary_F_game_team_local);
								thisDotteamSumOfWeightedPerformancesPrimary_F_game_local[team] = thisDotteamSumOfWeightedPerformancesPrimary_F_game_team_local;
								thisDotteamSumOfWeightedPerformancesForEvents_B_game_local[team] = thisDotteamSumOfWeightedPerformancesForEvents_B_game_team_local;
							}
							int[] thisDotteamOrderInGame_game_local = default(int[]);
							thisDotteamOrderInGame_game_local = this.teamOrderInGame[game];
							thisDotorderedTeamSum_F_game_local = SubarrayOp<double>.ItemsAverageConditional(thisDotteamSumOfWeightedPerformancesPrimary_F_game_local, thisDotteamOrderInGame_game_local, thisDotorderedTeamSum_F_game_local);
							bool[] thisDotdrawWithPreviousInGame_game_local = default(bool[]);
							for(int orderedTeam = 0; orderedTeam<this.TeamCount[game]; orderedTeam++) { // broken
								if (orderedTeam>0) {
									thisDotdrawWithPreviousInGame_game_local = this.drawWithPreviousInGame[game];
									orderedTeam = this.TeamCount[game]-1;
								}
							}
							int thisDotdrawMarginConditionsInGame_game_local = default(int);
							for(int orderedTeam = 0; orderedTeam<this.TeamCount[game]; orderedTeam++) { // broken
								if (orderedTeam>0) {
									thisDotdrawMarginConditionsInGame_game_local = this.drawMarginConditionsInGame[game];
									orderedTeam = this.TeamCount[game]-1;
								}
							}
							double thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local = default(double);
							for(int orderedTeam = 0; orderedTeam<this.TeamCount[game]; orderedTeam++) { // broken
								if (orderedTeam>0) {
									thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local = this.drawMargin[thisDotdrawMarginConditionsInGame_game_local];
									orderedTeam = this.TeamCount[game]-1;
								}
							}
							for(int orderedTeam = 0; orderedTeam<thisDotTeamCount_game_local; orderedTeam++) {
								Gaussian thisDotorderedTeamSum_F_game_orderedTeam_local = default(Gaussian);
								thisDotorderedTeamSum_F_game_orderedTeam_local = thisDotorderedTeamSum_F_game_local[orderedTeam];
								this.orderedTeamSum_uses_F[game][orderedTeam][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.orderedTeamSum_uses_B[game][orderedTeam], thisDotorderedTeamSum_F_game_orderedTeam_local, 1, this.orderedTeamSum_uses_F[game][orderedTeam][1]);
								if (orderedTeam>0) {
									Gaussian thisDotPerformanceDifference_F_game_orderedTeam_local = default(Gaussian);
									thisDotPerformanceDifference_F_game_orderedTeam_local = DoublePlusOp.AAverageConditional(this.orderedTeamSum_uses_F[game][orderedTeam-1][0], this.orderedTeamSum_uses_F[game][orderedTeam][1]);
									Gaussian thisDotPerformanceDifference_B_game_orderedTeam_local = default(Gaussian);
									thisDotPerformanceDifference_B_game_orderedTeam_local = Gaussian.Uniform();
									bool thisDotdrawWithPreviousInGame_game_orderedTeam_local = default(bool);
									thisDotdrawWithPreviousInGame_game_orderedTeam_local = thisDotdrawWithPreviousInGame_game_local[orderedTeam];
									if (!thisDotdrawWithPreviousInGame_game_orderedTeam_local) {
										Gaussian thisDotPerformanceDifference_1__B_game_orderedTeam_local = default(Gaussian);
										thisDotPerformanceDifference_1__B_game_orderedTeam_local = DoubleIsBetweenOp.XAverageConditional(true, thisDotPerformanceDifference_F_game_orderedTeam_local, thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local, double.PositiveInfinity);
										thisDotPerformanceDifference_B_game_orderedTeam_local = ArrayHelper.SetTo<Gaussian>(thisDotPerformanceDifference_B_game_orderedTeam_local, thisDotPerformanceDifference_1__B_game_orderedTeam_local);
									}
									Gaussian thisDotorderedTeamSum_orderedTeam_0__B_game_orderedTeam_local = default(Gaussian);
									if (thisDotdrawWithPreviousInGame_game_orderedTeam_local) {
										double thisDotvdouble696_game_orderedTeam_local = default(double);
										thisDotvdouble696_game_orderedTeam_local = Factor.Difference(0.0, thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local);
										Gaussian thisDotPerformanceDifference_0__B_game_orderedTeam_local = default(Gaussian);
										thisDotPerformanceDifference_0__B_game_orderedTeam_local = DoubleIsBetweenOp.XAverageConditional(true, thisDotPerformanceDifference_F_game_orderedTeam_local, thisDotvdouble696_game_orderedTeam_local, thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local);
										thisDotPerformanceDifference_B_game_orderedTeam_local = ArrayHelper.SetTo<Gaussian>(thisDotPerformanceDifference_B_game_orderedTeam_local, thisDotPerformanceDifference_0__B_game_orderedTeam_local);
									}
									thisDotorderedTeamSum_orderedTeam_0__B_game_orderedTeam_local = DoublePlusOp.BAverageConditional(this.orderedTeamSum_uses_F[game][orderedTeam-1][0], thisDotPerformanceDifference_B_game_orderedTeam_local);
									this.orderedTeamSum_uses_B[game][orderedTeam][1] = ArrayHelper.SetTo<Gaussian>(this.orderedTeamSum_uses_B[game][orderedTeam][1], thisDotorderedTeamSum_orderedTeam_0__B_game_orderedTeam_local);
								}
								this.orderedTeamSum_uses_F[game][orderedTeam][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.orderedTeamSum_uses_B[game][orderedTeam], thisDotorderedTeamSum_F_game_orderedTeam_local, 0, this.orderedTeamSum_uses_F[game][orderedTeam][0]);
							}
							for(int orderedTeam = thisDotTeamCount_game_local-1; orderedTeam>=0; orderedTeam--) {
								this.orderedTeamSum_uses_F[game][orderedTeam][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.orderedTeamSum_uses_B[game][orderedTeam], thisDotorderedTeamSum_F_game_local[orderedTeam], 1, this.orderedTeamSum_uses_F[game][orderedTeam][1]);
								if (orderedTeam>0) {
									Gaussian thisDotPerformanceDifference_F_RorderedTeam_game_orderedTeam_local = default(Gaussian);
									thisDotPerformanceDifference_F_RorderedTeam_game_orderedTeam_local = DoublePlusOp.AAverageConditional(this.orderedTeamSum_uses_F[game][orderedTeam-1][0], this.orderedTeamSum_uses_F[game][orderedTeam][1]);
									Gaussian thisDotPerformanceDifference_B_RorderedTeam_game_orderedTeam_local = default(Gaussian);
									thisDotPerformanceDifference_B_RorderedTeam_game_orderedTeam_local = Gaussian.Uniform();
									bool thisDotdrawWithPreviousInGame_game_orderedTeam_local2 = default(bool);
									thisDotdrawWithPreviousInGame_game_orderedTeam_local2 = thisDotdrawWithPreviousInGame_game_local[orderedTeam];
									if (!thisDotdrawWithPreviousInGame_game_orderedTeam_local2) {
										Gaussian thisDotPerformanceDifference_1__B_RorderedTeam_game_orderedTeam_local = default(Gaussian);
										thisDotPerformanceDifference_1__B_RorderedTeam_game_orderedTeam_local = DoubleIsBetweenOp.XAverageConditional(true, thisDotPerformanceDifference_F_RorderedTeam_game_orderedTeam_local, thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local, double.PositiveInfinity);
										thisDotPerformanceDifference_B_RorderedTeam_game_orderedTeam_local = ArrayHelper.SetTo<Gaussian>(thisDotPerformanceDifference_B_RorderedTeam_game_orderedTeam_local, thisDotPerformanceDifference_1__B_RorderedTeam_game_orderedTeam_local);
									}
									if (thisDotdrawWithPreviousInGame_game_orderedTeam_local2) {
										double thisDotvdouble696_RorderedTeam_game_orderedTeam_local = default(double);
										thisDotvdouble696_RorderedTeam_game_orderedTeam_local = Factor.Difference(0.0, thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local);
										Gaussian thisDotPerformanceDifference_0__B_RorderedTeam_game_orderedTeam_local = default(Gaussian);
										thisDotPerformanceDifference_0__B_RorderedTeam_game_orderedTeam_local = DoubleIsBetweenOp.XAverageConditional(true, thisDotPerformanceDifference_F_RorderedTeam_game_orderedTeam_local, thisDotvdouble696_RorderedTeam_game_orderedTeam_local, thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local);
										thisDotPerformanceDifference_B_RorderedTeam_game_orderedTeam_local = ArrayHelper.SetTo<Gaussian>(thisDotPerformanceDifference_B_RorderedTeam_game_orderedTeam_local, thisDotPerformanceDifference_0__B_RorderedTeam_game_orderedTeam_local);
									}
									Gaussian thisDotorderedTeamSum_orderedTeamMinus1_0__B_RorderedTeam_game_orderedTeam_local = default(Gaussian);
									thisDotorderedTeamSum_orderedTeamMinus1_0__B_RorderedTeam_game_orderedTeam_local = DoublePlusOp.SumAverageConditional(thisDotPerformanceDifference_B_RorderedTeam_game_orderedTeam_local, this.orderedTeamSum_uses_F[game][orderedTeam][1]);
									this.orderedTeamSum_uses_B[game][orderedTeam-1][0] = ArrayHelper.SetTo<Gaussian>(this.orderedTeamSum_uses_B[game][orderedTeam-1][0], thisDotorderedTeamSum_orderedTeamMinus1_0__B_RorderedTeam_game_orderedTeam_local);
								}
								Gaussian thisDotorderedTeamSum_B_RorderedTeam_game_orderedTeam_local = default(Gaussian);
								thisDotorderedTeamSum_B_RorderedTeam_game_orderedTeam_local = Gaussian.Uniform();
								thisDotorderedTeamSum_B_RorderedTeam_game_orderedTeam_local = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.orderedTeamSum_uses_B[game][orderedTeam], thisDotorderedTeamSum_B_RorderedTeam_game_orderedTeam_local);
								thisDotorderedTeamSum_B_RorderedTeam_game_local[orderedTeam] = thisDotorderedTeamSum_B_RorderedTeam_game_orderedTeam_local;
							}
							thisDotteamSumOfWeightedPerformancesPrimary_B_game_local = SubarrayOp<double>.ArrayAverageConditional(thisDotorderedTeamSum_B_RorderedTeam_game_local, thisDotteamOrderInGame_game_local, thisDotteamSumOfWeightedPerformancesPrimary_B_game_local);
							Gaussian[][] thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game_local = default(Gaussian[][]);
							thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game_local = new Gaussian[thisDotTeamCount_game_local][];
							for(int _iv9 = 0; _iv9<thisDotTeamCount_game_local; _iv9++) {
								Gaussian[] thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game__iv9_local = default(Gaussian[]);
								thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game__iv9_local = new Gaussian[2];
								thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game__iv9_local[0] = Gaussian.Uniform();
								thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game_local[_iv9] = thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game__iv9_local;
							}
							for(int team = 0; team<thisDotTeamCount_game_local; team++) {
								Gaussian thisDotteamSumOfWeightedPerformancesForEvents_F_game_team_local = default(Gaussian);
								thisDotteamSumOfWeightedPerformancesForEvents_F_game_team_local = thisDotteamSumOfWeightedPerformancesForEvents_F_game_local[team];
								thisDotteamSumOfWeightedPerformancesForEvents_F_game_team_local = SequentialCopyOp.SecondAverageConditional<Gaussian>(thisDotteamSumOfWeightedPerformances_F_game_local[team], thisDotteamSumOfWeightedPerformancesPrimary_B_game_local[team], thisDotteamSumOfWeightedPerformancesForEvents_F_game_team_local);
								Gaussian thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game_team__0_local = default(Gaussian);
								thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game_team__0_local = thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game_local[team][0];
								thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game_team__0_local = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotteamSumOfWeightedPerformancesForEvents_uses_B_game_local[team], thisDotteamSumOfWeightedPerformancesForEvents_F_game_team_local, 0, thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game_team__0_local);
								thisDotteamSumOfWeightedPerformancesForEvents_F_game_local[team] = thisDotteamSumOfWeightedPerformancesForEvents_F_game_team_local;
								Gaussian thisDotteamStrength_F_game_team_local = default(Gaussian);
								thisDotteamStrength_F_game_team_local = thisDotteamStrength_F_game_local[team];
								if (!this.denomIsZero[game][team]) {
									Gaussian thisDotteamStrength_team_1__F_game_team_local = default(Gaussian);
									thisDotteamStrength_team_1__F_game_team_local = GaussianProductOpBase.AAverageConditional(thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game_team__0_local, this.enemyWeight[game][team]);
									thisDotteamStrength_F_game_team_local = ArrayHelper.SetTo<Gaussian>(thisDotteamStrength_F_game_team_local, thisDotteamStrength_team_1__F_game_team_local);
								}
								if (this.denomIsZero[game][team]) {
									thisDotteamStrength_F_game_team_local = ArrayHelper.SetTo<Gaussian>(thisDotteamStrength_F_game_team_local, thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game_team__0_local);
								}
								thisDotteamStrength_F_game_local[team] = thisDotteamStrength_F_game_team_local;
								thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game_local[team][0] = thisDotteamSumOfWeightedPerformancesForEvents_uses_F_game_team__0_local;
							}
							thisDotteamStrength2_rep_F_marginal_game_local = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(thisDotteamStrength2_rep_B_toDef_game_local, thisDotteamStrength_F_game_local, thisDotteamStrength2_rep_F_marginal_game_local);
							for(int _a = 0; _a<thisDotTeamCount_game_local; _a++) {
								this.teamStrength2_rep_F[game][_a] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(thisDotteamStrength2_rep_B_game_local[_a], thisDotteamStrength2_rep_F_marginal_game_local, _a, this.teamStrength2_rep_F[game][_a]);
							}
							for(int team = 0; team<thisDotTeamCount_game_local; team++) {
								thisDotvdouble__304_F_game_local[team] = SumExceptOp.SumExceptAverageConditional(this.teamStrength2_rep_F[game][team], team);
							}
							thisDotvdouble__304_F_marginal_game_local = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotvdouble__304_F_game_local, thisDotvdouble__304_B_game_local, thisDotvdouble__304_F_marginal_game_local);
							DistributionStructArray<Gaussian,double> thisDotperformancesPrimary_B_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotperformancesPrimary_B_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								thisDotperformancesPrimary_B_game_local[playerInGame] = Gaussian.Uniform();
							}
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotperformancesByTeam_B_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotperformancesByTeam_B_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(thisDotTeamCount_game_local);
							for(int team = 0; team<thisDotTeamCount_game_local; team++) {
								Gaussian thisDotteamSumOfWeightedPerformances_B_game_team_local = default(Gaussian);
								thisDotteamSumOfWeightedPerformances_B_game_team_local = Gaussian.Uniform();
								int thisDotTeamSizes_game_team_local2 = default(int);
								thisDotTeamSizes_game_team_local2 = thisDotTeamSizes_game_local[team];
								DistributionStructArray<Gaussian,double> thisDotweightedPerformances_B_game_team_local = default(DistributionStructArray<Gaussian,double>);
								thisDotweightedPerformances_B_game_team_local = new DistributionStructArray<Gaussian,double>(thisDotTeamSizes_game_team_local2);
								for(int teamPlayer = 0; teamPlayer<thisDotTeamSizes_game_team_local2; teamPlayer++) {
									thisDotweightedPerformances_B_game_team_local[teamPlayer] = Gaussian.Uniform();
								}
								DistributionStructArray<Gaussian,double> thisDotperformancesByTeam_B_game_team_local = default(DistributionStructArray<Gaussian,double>);
								thisDotperformancesByTeam_B_game_team_local = new DistributionStructArray<Gaussian,double>(thisDotTeamSizes_game_team_local2);
								thisDotteamSumOfWeightedPerformances_B_game_team_local = SequentialCopyOp.ValueAverageConditional<Gaussian>(thisDotteamSumOfWeightedPerformancesPrimary_B_game_local[team], thisDotteamSumOfWeightedPerformancesForEvents_B_game_local[team], thisDotteamSumOfWeightedPerformances_B_game_team_local);
								thisDotweightedPerformances_B_game_team_local = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(thisDotteamSumOfWeightedPerformances_B_game_team_local, thisDotteamSumOfWeightedPerformances_F_game_local[team], thisDotweightedPerformances_F_game_local[team], thisDotweightedPerformances_B_game_team_local);
								for(int teamPlayer = 0; teamPlayer<thisDotTeamSizes_game_team_local2; teamPlayer++) {
									Gaussian thisDotperformancesByTeamPrimary_B_game_team_teamPlayer_local = default(Gaussian);
									Gaussian thisDotperformancesByTeam_B_game_team_teamPlayer_local = default(Gaussian);
									thisDotperformancesByTeam_B_game_team_teamPlayer_local = Gaussian.Uniform();
									thisDotperformancesByTeamPrimary_B_game_team_teamPlayer_local = GaussianProductOpBase.AAverageConditional(thisDotweightedPerformances_B_game_team_local[teamPlayer], this.playerWeightsByTeam[game][team][teamPlayer]);
									thisDotperformancesByTeam_B_game_team_teamPlayer_local = SequentialCopyOp.ValueAverageConditional<Gaussian>(thisDotperformancesByTeamPrimary_B_game_team_teamPlayer_local, this.performancesByTeamForEvents_B_reduced, thisDotperformancesByTeam_B_game_team_teamPlayer_local);
									thisDotperformancesByTeam_B_game_team_local[teamPlayer] = thisDotperformancesByTeam_B_game_team_teamPlayer_local;
								}
								thisDotperformancesByTeam_B_game_local[team] = thisDotperformancesByTeam_B_game_team_local;
							}
							thisDotperformancesPrimary_B_game_local = SplitSubarrayOp<double>.ArrayAverageConditional(thisDotperformancesByTeam_B_game_local, this.indexOfPlayerOnTeam[game], thisDotperformancesPrimary_B_game_local);
							DistributionStructArray<Gaussian,double> thisDotperformancesForQuit_F_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotperformancesForQuit_F_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int _ind0 = 0; _ind0<this.playerCountInGame[game]; _ind0++) {
								thisDotperformancesForQuit_F_game_local[_ind0] = Gaussian.Uniform();
							}
							double thisDotlengthInMinutes_game_local = default(double);
							if (this.playerCountInGame[game]>0) {
								thisDotlengthInMinutes_game_local = this.lengthInMinutes[game];
							}
							double[] thisDotplayerWeights_game_local = default(double[]);
							if (this.playerCountInGame[game]>0) {
								thisDotplayerWeights_game_local = this.playerWeights[game];
							}
							double[][] thisDoteventCountsFlat_game_local = default(double[][]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) { // broken
								if (this.eventTypeCount>0) {
									if (!this.isExperienced_reduced[game][playerInGame]) {
										thisDoteventCountsFlat_game_local = this.eventCountsFlat[game];
										playerInGame = this.playerCountInGame[game]-1;
									}
								}
							}
							bool[] thisDotplayerQuitInGameFlat_game_local = default(bool[]);
							if (this.playerCountInGame[game]>0) {
								thisDotplayerQuitInGameFlat_game_local = this.playerQuitInGameFlat[game];
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotperformancesForEventsPrimary_rep_F_marginal_game_playerInGame_local = default(Gaussian);
								thisDotperformancesForEventsPrimary_rep_F_marginal_game_playerInGame_local = ReplicateOp_Divide.MarginalInit<Gaussian>(this.performancesForEventsPrimary_F[game][playerInGame]);
								Gaussian thisDotperformancesPrimary_B_game_playerInGame_local = default(Gaussian);
								thisDotperformancesPrimary_B_game_playerInGame_local = thisDotperformancesPrimary_B_game_local[playerInGame];
								Gaussian thisDotperformancesForEvents_F_game_playerInGame_local = default(Gaussian);
								thisDotperformancesForEvents_F_game_playerInGame_local = thisDotperformancesForEvents_F_game_local[playerInGame];
								thisDotperformancesForEvents_F_game_playerInGame_local = SequentialCopyOp.SecondAverageConditional<Gaussian>(thisDotperformances_F_game_local[playerInGame], thisDotperformancesPrimary_B_game_playerInGame_local, thisDotperformancesForEvents_F_game_playerInGame_local);
								Gaussian thisDotperformancesForQuit_B_game_playerInGame_local = default(Gaussian);
								thisDotperformancesForQuit_B_game_playerInGame_local = LowPriorityBackwardOp.ValueAverageConditional<Gaussian>(this.playerPerfQuit_B[game][playerInGame]);
								this.performancesForEventsPrimary_F[game][playerInGame] = SequentialCopyOp.FirstAverageConditional<Gaussian>(thisDotperformancesForEvents_F_game_playerInGame_local, thisDotperformancesForQuit_B_game_playerInGame_local, this.performancesForEventsPrimary_F[game][playerInGame]);
								thisDotperformancesForEventsPrimary_rep_F_marginal_game_playerInGame_local = ReplicateOp_Divide.Marginal<Gaussian>(this.performancesForEventsPrimary_rep_B_toDef[game][playerInGame], this.performancesForEventsPrimary_F[game][playerInGame], thisDotperformancesForEventsPrimary_rep_F_marginal_game_playerInGame_local);
								Gaussian[] thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local2 = default(Gaussian[]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local2 = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_local[playerInGame];
								Gaussian thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_marginal_game_playerInGame_local = default(Gaussian);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_marginal_game_playerInGame_local = ReplicateOp_Divide.MarginalInit<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local2[0]);
								Gaussian thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__F_game_playerInGame_local = default(Gaussian);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__F_game_playerInGame_local = Gaussian.Uniform();
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__F_game_playerInGame_local = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_game_local[playerInGame], thisDotvdouble__304_F_game_local, thisDotvdouble__304_F_marginal_game_local, thisDotteamIndexOfPlayer_game_local, playerInGame, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__F_game_playerInGame_local);
								Gaussian[] thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_playerInGame_local2 = default(Gaussian[]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_playerInGame_local2 = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_local[playerInGame];
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local2[0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_playerInGame_local2, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__F_game_playerInGame_local, 0, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local2[0]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_marginal_game_playerInGame_local = ReplicateOp_Divide.Marginal<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_game_local[playerInGame], thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local2[0], thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_marginal_game_playerInGame_local);
								double thisDotminutesPlayed_game_playerInGame_local = default(double);
								thisDotminutesPlayed_game_playerInGame_local = Factor.Product(thisDotlengthInMinutes_game_local, thisDotplayerWeights_game_local[playerInGame]);
								DistributionStructArray<Gaussian,double> thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_playerInGame_local2 = default(DistributionStructArray<Gaussian,double>);
								if (this.eventTypeCount>0) {
									thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_playerInGame_local2 = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_local[playerInGame];
								}
								int thisDotplayerConditionsToLearnInGame_game_playerInGame_local2 = default(int);
								thisDotplayerConditionsToLearnInGame_game_playerInGame_local2 = thisDotplayerConditionsToLearnInGame_game_local[playerInGame];
								double[] thisDoteventCountsFlat_game_playerInGame_local = default(double[]);
								if (this.eventTypeCount>0) {
									if (!this.isExperienced_reduced[game][playerInGame]) {
										thisDoteventCountsFlat_game_playerInGame_local = thisDoteventCountsFlat_game_local[playerInGame];
									}
								}
								for(int eventType = 0; eventType<this.eventTypeCount; eventType++) {
									Gaussian thisDotvdouble757_F_game_playerInGame_eventType_local = default(Gaussian);
									Gaussian thisDotvdouble758_F_game_playerInGame_eventType_local = default(Gaussian);
									Gaussian thisDotvdouble761_F_game_playerInGame_eventType_local = default(Gaussian);
									Gaussian thisDotEventCountMean_F_game_playerInGame_eventType_local = default(Gaussian);
									Gaussian thisDotvdouble760_F_game_playerInGame_eventType_local = default(Gaussian);
									Gaussian thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_game_playerInGame_eventType_local = default(Gaussian);
									thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_game_playerInGame_eventType_local = Gaussian.Uniform();
									thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_game_playerInGame_eventType_local = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_game_playerInGame_local2[eventType], thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_marginal_game_playerInGame_local, eventType, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_game_playerInGame_eventType_local);
									thisDotvdouble760_F_game_playerInGame_eventType_local = GaussianProductOp_PointB.ProductAverageConditional(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_game_playerInGame_eventType_local, this.EventsPerMinuteEnemyMultiplier_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local2][eventType]);
									Gaussian thisDotperformancesForEventsPrimary_rep_F_game_playerInGame_eventType_local = default(Gaussian);
									thisDotperformancesForEventsPrimary_rep_F_game_playerInGame_eventType_local = Gaussian.Uniform();
									thisDotperformancesForEventsPrimary_rep_F_game_playerInGame_eventType_local = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.playerPerfCopy_B[game][playerInGame][eventType], thisDotperformancesForEventsPrimary_rep_F_marginal_game_playerInGame_local, eventType, thisDotperformancesForEventsPrimary_rep_F_game_playerInGame_eventType_local);
									thisDotvdouble757_F_game_playerInGame_eventType_local = GaussianProductOp_PointB.ProductAverageConditional(thisDotperformancesForEventsPrimary_rep_F_game_playerInGame_eventType_local, this.EventsPerMinutePerformanceMultiplier_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local2][eventType]);
									thisDotvdouble758_F_game_playerInGame_eventType_local = DoublePlusOp.SumAverageConditional(this.EventsPerMinuteOffset_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local2][eventType], thisDotvdouble757_F_game_playerInGame_eventType_local);
									thisDotvdouble761_F_game_playerInGame_eventType_local = DoublePlusOp.SumAverageConditional(thisDotvdouble758_F_game_playerInGame_eventType_local, thisDotvdouble760_F_game_playerInGame_eventType_local);
									thisDotEventCountMean_F_game_playerInGame_eventType_local = GaussianProductOpBase.ProductAverageConditional(thisDotvdouble761_F_game_playerInGame_eventType_local, thisDotminutesPlayed_game_playerInGame_local);
									Gaussian thisDotEventCountMean_B_game_playerInGame_eventType_local = default(Gaussian);
									thisDotEventCountMean_B_game_playerInGame_eventType_local = Gaussian.Uniform();
									if (!this.isExperienced_reduced[game][playerInGame]) {
										Gaussian thisDotrealCount_F_game_playerInGame_eventType_local = default(Gaussian);
										Gaussian thisDotrealCount_use_B_game_playerInGame_eventType_local = default(Gaussian);
										Gamma thisDotEventCountPrecision_F_game_playerInGame_eventType_local = default(Gamma);
										Gaussian thisDotEventCountMean_1__B_game_playerInGame_eventType_local = default(Gaussian);
										thisDotEventCountPrecision_F_game_playerInGame_eventType_local = GammaRatioOp.RatioAverageConditional(this.EventsPerMinutePrecision_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local2][eventType], thisDotminutesPlayed_game_playerInGame_local);
										thisDotrealCount_F_game_playerInGame_eventType_local = GaussianOp_PointPrecision.SampleAverageConditional(thisDotEventCountMean_F_game_playerInGame_eventType_local, thisDotEventCountPrecision_F_game_playerInGame_eventType_local);
										thisDotrealCount_use_B_game_playerInGame_eventType_local = MaxGaussianOp.BAverageConditional(thisDoteventCountsFlat_game_playerInGame_local[eventType], 0.0, thisDotrealCount_F_game_playerInGame_eventType_local);
										thisDotEventCountMean_1__B_game_playerInGame_eventType_local = GaussianOp_PointPrecision.MeanAverageConditional(thisDotrealCount_use_B_game_playerInGame_eventType_local, thisDotEventCountPrecision_F_game_playerInGame_eventType_local);
										thisDotEventCountMean_B_game_playerInGame_eventType_local = ArrayHelper.SetTo<Gaussian>(thisDotEventCountMean_B_game_playerInGame_eventType_local, thisDotEventCountMean_1__B_game_playerInGame_eventType_local);
									}
									Gaussian thisDotvdouble761_B_game_playerInGame_eventType_local = default(Gaussian);
									Gaussian thisDotvdouble760_B_game_playerInGame_eventType_local = default(Gaussian);
									Gaussian thisDotenemyAverage_B_game_playerInGame_eventType_local = default(Gaussian);
									Gaussian thisDotvdouble758_B_game_playerInGame_eventType_local = default(Gaussian);
									Gaussian thisDotvdouble757_B_game_playerInGame_eventType_local = default(Gaussian);
									thisDotvdouble761_B_game_playerInGame_eventType_local = GaussianProductOpBase.AAverageConditional(thisDotEventCountMean_B_game_playerInGame_eventType_local, thisDotminutesPlayed_game_playerInGame_local);
									thisDotvdouble758_B_game_playerInGame_eventType_local = DoublePlusOp.AAverageConditional(thisDotvdouble761_B_game_playerInGame_eventType_local, thisDotvdouble760_F_game_playerInGame_eventType_local);
									thisDotvdouble757_B_game_playerInGame_eventType_local = DoublePlusOp.BAverageConditional(thisDotvdouble758_B_game_playerInGame_eventType_local, this.EventsPerMinuteOffset_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local2][eventType]);
									this.playerPerfCopy_B[game][playerInGame][eventType] = GaussianProductOp_PointB.AAverageConditional(thisDotvdouble757_B_game_playerInGame_eventType_local, this.EventsPerMinutePerformanceMultiplier_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local2][eventType]);
									thisDotvdouble760_B_game_playerInGame_eventType_local = DoublePlusOp.BAverageConditional(thisDotvdouble761_B_game_playerInGame_eventType_local, thisDotvdouble758_F_game_playerInGame_eventType_local);
									thisDotenemyAverage_B_game_playerInGame_eventType_local = GaussianProductOp_PointB.AAverageConditional(thisDotvdouble760_B_game_playerInGame_eventType_local, this.EventsPerMinuteEnemyMultiplier_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local2][eventType]);
									this.enemyAverageCopy_B[game][playerInGame][eventType] = DampBackwardOp.ValueAverageConditional<Gaussian>(thisDotenemyAverage_B_game_playerInGame_eventType_local, 0.5, this.enemyAverageCopy_B[game][playerInGame][eventType]);
								}
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local2[1] = Gaussian.Uniform();
								Gaussian thisDotperformanceAdvantage_F_game_playerInGame_local = default(Gaussian);
								Gaussian thisDotvdouble777_F_game_playerInGame_local = default(Gaussian);
								Gaussian thisDotperformanceUnderThreshold_F_game_playerInGame_local = default(Gaussian);
								Bernoulli thisDotquit_F_game_playerInGame_local = default(Bernoulli);
								thisDotquit_F_game_playerInGame_local = BernoulliFromBetaOp.SampleAverageConditional(this.quitProbability[thisDotplayerConditionsToLearnInGame_game_playerInGame_local2]);
								Bernoulli thisDotdrop_F_game_playerInGame_local = default(Bernoulli);
								thisDotdrop_F_game_playerInGame_local = BernoulliFromBetaOp.SampleAverageConditional(this.disconnectProbability[thisDotplayerConditionsToLearnInGame_game_playerInGame_local2]);
								Bernoulli thisDotvbool70_B_game_playerInGame_local = default(Bernoulli);
								thisDotvbool70_B_game_playerInGame_local = BooleanOrOp.BAverageConditional(thisDotplayerQuitInGameFlat_game_local[playerInGame], thisDotdrop_F_game_playerInGame_local);
								Bernoulli thisDotlowPerformance_B_game_playerInGame_local = default(Bernoulli);
								thisDotlowPerformance_B_game_playerInGame_local = BooleanAndOp.BAverageConditional(thisDotvbool70_B_game_playerInGame_local, thisDotquit_F_game_playerInGame_local);
								Gaussian thisDotperformanceUnderThreshold_use_B_game_playerInGame_local = default(Gaussian);
								Gaussian thisDotvdouble777_B_game_playerInGame_local = default(Gaussian);
								Gaussian thisDotperformanceAdvantage_B_game_playerInGame_local = default(Gaussian);
								Gaussian thisDotperformances_use_B_game_playerInGame_local = default(Gaussian);
								thisDotperformances_use_B_game_playerInGame_local = Gaussian.Uniform();
								Gaussian thisDotskillInSquad_B_game_playerInGame_local = default(Gaussian);
								this.performancesForEventsPrimary_rep_B_toDef[game][playerInGame] = ReplicateOp_Divide.ToDef<Gaussian>(this.playerPerfCopy_B[game][playerInGame], this.performancesForEventsPrimary_rep_B_toDef[game][playerInGame]);
								this.performancesForEvents_B[game][playerInGame] = SequentialCopyOp.ValueAverageConditional<Gaussian>(this.performancesForEventsPrimary_rep_B_toDef[game][playerInGame], thisDotperformancesForQuit_B_game_playerInGame_local, this.performancesForEvents_B[game][playerInGame]);
								thisDotperformances_use_B_game_playerInGame_local = SequentialCopyOp.ValueAverageConditional<Gaussian>(thisDotperformancesPrimary_B_game_playerInGame_local, this.performancesForEvents_B[game][playerInGame], thisDotperformances_use_B_game_playerInGame_local);
								thisDotskillInSquad_B_game_playerInGame_local = GaussianFromMeanAndVarianceOp.MeanAverageConditional(thisDotperformances_use_B_game_playerInGame_local, this.PerformanceVariance);
								Gaussian thisDotskillsPresent_uses_B_game_playerInGame__1_local = default(Gaussian);
								thisDotskillsPresent_uses_B_game_playerInGame__1_local = thisDotskillsPresent_uses_B_game_local[playerInGame][1];
								if (this.playerIsInSquad[game][playerInGame]) {
									Gaussian thisDotskillsPresent_playerInGame_0__B_game_playerInGame_local = default(Gaussian);
									thisDotskillsPresent_playerInGame_0__B_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotskillInSquad_B_game_playerInGame_local, this.squadOffset[thisDotplayerConditionsToLearnInGame_game_playerInGame_local2][thisDotboundedSquadSize_game_local[playerInGame]]);
									thisDotskillsPresent_uses_B_game_playerInGame__1_local = ArrayHelper.SetTo<Gaussian>(thisDotskillsPresent_uses_B_game_playerInGame__1_local, thisDotskillsPresent_playerInGame_0__B_game_playerInGame_local);
								}
								if (!this.playerIsInSquad[game][playerInGame]) {
									thisDotskillsPresent_uses_B_game_playerInGame__1_local = ArrayHelper.SetTo<Gaussian>(thisDotskillsPresent_uses_B_game_playerInGame__1_local, thisDotskillInSquad_B_game_playerInGame_local);
								}
								thisDotskillsPresent_uses_B_game_local[playerInGame][1] = thisDotskillsPresent_uses_B_game_playerInGame__1_local;
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local2[1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_game_playerInGame_local2, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__F_game_playerInGame_local, 1, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local2[1]);
								Gaussian thisDotperformancesForQuit_F_game_playerInGame_local = default(Gaussian);
								thisDotperformancesForQuit_F_game_playerInGame_local = thisDotperformancesForQuit_F_game_local[playerInGame];
								thisDotperformancesForQuit_F_game_playerInGame_local = SequentialCopyOp.SecondAverageConditional<Gaussian>(thisDotperformancesForEvents_F_game_playerInGame_local, this.performancesForEventsPrimary_rep_B_toDef[game][playerInGame], thisDotperformancesForQuit_F_game_playerInGame_local);
								thisDotperformancesForEvents_F_game_local[playerInGame] = thisDotperformancesForEvents_F_game_playerInGame_local;
								thisDotperformanceAdvantage_F_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotperformancesForQuit_F_game_playerInGame_local, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local2[1]);
								double thisDotquitThreshold_thisDotplayerConditionsToLearnInGame_game_playerInGame_local = default(double);
								thisDotquitThreshold_thisDotplayerConditionsToLearnInGame_game_playerInGame_local = this.quitThreshold[thisDotplayerConditionsToLearnInGame_game_playerInGame_local2];
								thisDotvdouble777_F_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotquitThreshold_thisDotplayerConditionsToLearnInGame_game_playerInGame_local, thisDotperformanceAdvantage_F_game_playerInGame_local);
								double thisDotquitThresholdPrecision_thisDotplayerConditionsToLearnInGame_game_playerInGame_local = default(double);
								thisDotquitThresholdPrecision_thisDotplayerConditionsToLearnInGame_game_playerInGame_local = this.quitThresholdPrecision[thisDotplayerConditionsToLearnInGame_game_playerInGame_local2];
								thisDotperformanceUnderThreshold_F_game_playerInGame_local = GaussianOpBase.SampleAverageConditional(thisDotvdouble777_F_game_playerInGame_local, thisDotquitThresholdPrecision_thisDotplayerConditionsToLearnInGame_game_playerInGame_local);
								thisDotperformanceUnderThreshold_use_B_game_playerInGame_local = IsPositiveOp_Proper.XAverageConditional(thisDotlowPerformance_B_game_playerInGame_local, thisDotperformanceUnderThreshold_F_game_playerInGame_local);
								thisDotvdouble777_B_game_playerInGame_local = GaussianOpBase.MeanAverageConditional(thisDotperformanceUnderThreshold_use_B_game_playerInGame_local, thisDotquitThresholdPrecision_thisDotplayerConditionsToLearnInGame_game_playerInGame_local);
								thisDotperformanceAdvantage_B_game_playerInGame_local = DoublePlusOp.BAverageConditional(thisDotquitThreshold_thisDotplayerConditionsToLearnInGame_game_playerInGame_local, thisDotvdouble777_B_game_playerInGame_local);
								this.playerPerfQuit_B[game][playerInGame] = DoublePlusOp.SumAverageConditional(thisDotperformanceAdvantage_B_game_playerInGame_local, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local2[1]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_local[playerInGame] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_game_playerInGame_local2;
								this.enemyAverageQuit_B[game][playerInGame] = DoublePlusOp.BAverageConditional(thisDotperformancesForQuit_F_game_playerInGame_local, thisDotperformanceAdvantage_B_game_playerInGame_local);
								thisDotperformancesForQuit_F_game_local[playerInGame] = thisDotperformancesForQuit_F_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotskillsPresent_B_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillsPresent_B_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int _iv5 = 0; _iv5<this.playerCountInGame[game]; _iv5++) {
								Gaussian thisDotskillsPresent_B_game__iv5_local = default(Gaussian);
								thisDotskillsPresent_B_game__iv5_local = Gaussian.Uniform();
								Gaussian[] thisDotskillsPresent_uses_B_game__iv5_local2 = default(Gaussian[]);
								thisDotskillsPresent_uses_B_game__iv5_local2 = thisDotskillsPresent_uses_B_game_local[_iv5];
								thisDotskillsPresent_B_game__iv5_local = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(thisDotskillsPresent_uses_B_game__iv5_local2, thisDotskillsPresent_B_game__iv5_local);
								thisDotskillsPresent_B_game_local[_iv5] = thisDotskillsPresent_B_game__iv5_local;
								Gaussian thisDotskillsPresent_uses_F_game__iv5__0_local = default(Gaussian);
								thisDotskillsPresent_uses_F_game__iv5__0_local = Gaussian.Uniform();
								thisDotskillsPresent_uses_F_game__iv5__0_local = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotskillsPresent_uses_B_game__iv5_local2, thisDotskillsPresent_F_game_local[_iv5], 0, thisDotskillsPresent_uses_F_game__iv5__0_local);
								thisDotskillsPresent_uses_F_game_local[_iv5][0] = thisDotskillsPresent_uses_F_game__iv5__0_local;
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotpredictedSkill2_B_game_playerInGame_local = default(Gaussian);
								thisDotpredictedSkill2_B_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotskillsPresent_uses_F_game_local[playerInGame][0], thisDotvdouble638_F_game_local[playerInGame]);
								bool thisDotnoExperienceLastGameInConditions_game_playerInGame_local2 = default(bool);
								thisDotnoExperienceLastGameInConditions_game_playerInGame_local2 = thisDotnoExperienceLastGameInConditions_game_local[playerInGame];
								Gaussian thisDotskillsPast_B_game_playerInGame_local = default(Gaussian);
								thisDotskillsPast_B_game_playerInGame_local = thisDotskillsPast_B_game_local[playerInGame];
								if (!thisDotnoExperienceLastGameInConditions_game_playerInGame_local2) {
									Gaussian thisDotvdouble617_B_game_playerInGame_local = default(Gaussian);
									Gaussian thisDotpredictedSkill1_use_B_game_playerInGame_local = default(Gaussian);
									Gaussian thisDotskillsPast_playerInGame_1__B_game_playerInGame_local = default(Gaussian);
									int thisDotplayerConditionsToLearnInGame_game_playerInGame_local3 = default(int);
									thisDotplayerConditionsToLearnInGame_game_playerInGame_local3 = thisDotplayerConditionsToLearnInGame_game_local[playerInGame];
									thisDotvdouble617_B_game_playerInGame_local = GaussianOpBase.MeanAverageConditional(thisDotpredictedSkill2_B_game_playerInGame_local, this.skillOffsetChangePrecisionPerGame[thisDotplayerConditionsToLearnInGame_game_playerInGame_local3]);
									thisDotpredictedSkill1_use_B_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotvdouble617_B_game_playerInGame_local, this.skillOffsetChangeMeanByExperience[thisDotplayerConditionsToLearnInGame_game_playerInGame_local3][thisDotboundedExperienceForConditions_game_local[playerInGame]]);
									thisDotskillsPast_playerInGame_1__B_game_playerInGame_local = GaussianOpBase.MeanAverageConditional(thisDotpredictedSkill1_use_B_game_playerInGame_local, thisDotoffsetChangePrecisionByTime_game_local[playerInGame]);
									thisDotskillsPast_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotskillsPast_B_game_playerInGame_local, thisDotskillsPast_playerInGame_1__B_game_playerInGame_local);
								}
								if (thisDotnoExperienceLastGameInConditions_game_playerInGame_local2) {
									thisDotskillsPast_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotskillsPast_B_game_playerInGame_local, thisDotpredictedSkill2_B_game_playerInGame_local);
								}
								thisDotskillsPast_B_game_local[playerInGame] = thisDotskillsPast_B_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotskillsPastAndPresent_B_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillsPastAndPresent_B_game_local = new DistributionStructArray<Gaussian,double>(this.offsetVariableCountInGame[game]);
							for(int _iv4 = 0; _iv4<this.offsetVariableCountInGame[game]; _iv4++) {
								thisDotskillsPastAndPresent_B_game_local[_iv4] = Gaussian.Uniform();
							}
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotpreviousChanges_B_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotpreviousChanges_B_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotupdateChanges_B_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotupdateChanges_B_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local2 = default(int);
								thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local2 = thisDotupdateChangeVariableSubarrayCountInGame_game_local[playerInGame];
								DistributionStructArray<Gaussian,double> thisDotupdateChanges_B_game_playerInGame_local = default(DistributionStructArray<Gaussian,double>);
								thisDotupdateChanges_B_game_playerInGame_local = new DistributionStructArray<Gaussian,double>(thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local2);
								for(int index47 = 0; index47<thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local2; index47++) {
									thisDotupdateChanges_B_game_playerInGame_local[index47] = Gaussian.Uniform();
								}
								thisDotupdateChanges_B_game_local[playerInGame] = thisDotupdateChanges_B_game_playerInGame_local;
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotvdouble638_B_game_playerInGame_local = default(Gaussian);
								Gaussian thisDotbaseSkillChangeSinceLastGame_B_game_playerInGame_local = default(Gaussian);
								Gaussian thisDotvdouble622_B_game_playerInGame_local = default(Gaussian);
								thisDotvdouble622_B_game_playerInGame_local = Gaussian.Uniform();
								thisDotvdouble638_B_game_playerInGame_local = DoublePlusOp.BAverageConditional(thisDotskillsPresent_uses_F_game_local[playerInGame][0], thisDotpredictedSkill2_F_game_local[playerInGame]);
								thisDotbaseSkillChangeSinceLastGame_B_game_playerInGame_local = GaussianProductOpBase.AAverageConditional(thisDotvdouble638_B_game_playerInGame_local, this.baseSkillWeights[thisDotplayerConditionsToLearnInGame_game_local[playerInGame]]);
								int thisDotupdateChangeVariableCountInGame_game_playerInGame_local4 = default(int);
								thisDotupdateChangeVariableCountInGame_game_playerInGame_local4 = thisDotupdateChangeVariableCountInGame_game_local[playerInGame];
								Gaussian[] thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame_local = default(Gaussian[]);
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==4) {
									Gaussian thisDotvdouble622_4__B_game_playerInGame_local = default(Gaussian);
									thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame_local = thisDotupdateChanges_playerInGame_1_4__uses_F_game_local[playerInGame];
									thisDotvdouble622_4__B_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotbaseSkillChangeSinceLastGame_B_game_playerInGame_local, thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame_local[1]);
									thisDotvdouble622_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotvdouble622_B_game_playerInGame_local, thisDotvdouble622_4__B_game_playerInGame_local);
								}
								Gaussian thisDotvdouble621_B_game_playerInGame_local = default(Gaussian);
								int thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local2 = default(int);
								thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local2 = thisDotpreviousChangeVariableSubarrayCountInGame_game_local[playerInGame];
								DistributionStructArray<Gaussian,double> thisDotpreviousChanges_B_game_playerInGame_local = default(DistributionStructArray<Gaussian,double>);
								thisDotpreviousChanges_B_game_playerInGame_local = new DistributionStructArray<Gaussian,double>(thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local2);
								for(int index46 = 0; index46<thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local2; index46++) {
									thisDotpreviousChanges_B_game_playerInGame_local[index46] = Gaussian.Uniform();
								}
								Gaussian thisDotbaseSkillChangePrimary_B_game_playerInGame_local = default(Gaussian);
								Gaussian thisDotbaseSkillChangeSecondary_F_game_playerInGame_local = default(Gaussian);
								thisDotbaseSkillChangeSecondary_F_game_playerInGame_local = Gaussian.Uniform();
								Gaussian thisDotupdateChanges_item0_B_game_playerInGame_local = default(Gaussian);
								if (((thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==1)||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==2))||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==4)) {
									thisDotupdateChanges_item0_B_game_playerInGame_local = Gaussian.Uniform();
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==0) {
									thisDotvdouble622_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotvdouble622_B_game_playerInGame_local, thisDotbaseSkillChangeSinceLastGame_B_game_playerInGame_local);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==1) {
									thisDotvdouble622_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotvdouble622_B_game_playerInGame_local, thisDotbaseSkillChangeSinceLastGame_B_game_playerInGame_local);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==2) {
									thisDotvdouble622_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotvdouble622_B_game_playerInGame_local, thisDotbaseSkillChangeSinceLastGame_B_game_playerInGame_local);
								}
								Gaussian thisDotvdouble621_F_game_playerInGame_local2 = default(Gaussian);
								thisDotvdouble621_F_game_playerInGame_local2 = thisDotvdouble621_F_game_local[playerInGame];
								thisDotbaseSkillChangePrimary_B_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotvdouble622_B_game_playerInGame_local, thisDotvdouble621_F_game_playerInGame_local2);
								thisDotbaseSkillChangeSecondary_F_game_playerInGame_local = SequentialCopyOp.SecondAverageConditional<Gaussian>(thisDotbaseSkillChange_F_game_local[playerInGame], thisDotbaseSkillChangePrimary_B_game_playerInGame_local, thisDotbaseSkillChangeSecondary_F_game_playerInGame_local);
								Gaussian thisDotupdateChanges_item1_F_game_playerInGame_local2 = default(Gaussian);
								thisDotupdateChanges_item1_F_game_playerInGame_local2 = thisDotupdateChanges_item1_F_game_local[playerInGame];
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==2) {
									Gaussian thisDotupdateChanges_playerInGame_0_2__B_game_playerInGame_local = default(Gaussian);
									thisDotupdateChanges_playerInGame_0_2__B_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotupdateChanges_item1_F_game_playerInGame_local2, thisDotbaseSkillChangeSecondary_F_game_playerInGame_local);
									thisDotupdateChanges_item0_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item0_B_game_playerInGame_local, thisDotupdateChanges_playerInGame_0_2__B_game_playerInGame_local);
								}
								Gaussian thisDotupdateChanges_item1_B_game_playerInGame_local = default(Gaussian);
								if ((thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==2)||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==4)) {
									thisDotupdateChanges_item1_B_game_playerInGame_local = Gaussian.Uniform();
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==2) {
									Gaussian thisDotvdouble629_F_game_playerInGame_local = default(Gaussian);
									thisDotvdouble629_F_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotupdateChanges_item0_F_game_local[playerInGame], thisDotbaseSkillChangeSecondary_F_game_playerInGame_local);
									thisDotupdateChanges_item1_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item1_B_game_playerInGame_local, thisDotvdouble629_F_game_playerInGame_local);
								}
								DistributionStructArray<Gaussian,double> thisDotupdateChanges_B_game_playerInGame_local2 = default(DistributionStructArray<Gaussian,double>);
								thisDotupdateChanges_B_game_playerInGame_local2 = thisDotupdateChanges_B_game_local[playerInGame];
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==4) {
									Gaussian[] thisDotupdateChanges_playerInGame_1_4__uses_B_game_playerInGame_local2 = default(Gaussian[]);
									thisDotupdateChanges_playerInGame_1_4__uses_B_game_playerInGame_local2 = thisDotupdateChanges_playerInGame_1_4__uses_B_game_local[playerInGame];
									thisDotupdateChanges_playerInGame_1_4__uses_B_game_playerInGame_local2[1] = Gaussian.Uniform();
									Gaussian thisDotupdateChanges_playerInGame_1_4__B_game_playerInGame_local = default(Gaussian);
									thisDotupdateChanges_playerInGame_1_4__B_game_playerInGame_local = Gaussian.Uniform();
									thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame_local[0] = Gaussian.Uniform();
									Gaussian thisDotupdateChanges_playerInGame_2_4__B_game_playerInGame_local = default(Gaussian);
									Gaussian thisDotvdouble635_F_game_playerInGame_local = default(Gaussian);
									thisDotupdateChanges_playerInGame_1_4__uses_B_game_playerInGame_local2[1] = DoublePlusOp.BAverageConditional(thisDotbaseSkillChangeSinceLastGame_B_game_playerInGame_local, thisDotvdouble622_F_game_local[playerInGame]);
									thisDotupdateChanges_playerInGame_1_4__B_game_playerInGame_local = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(thisDotupdateChanges_playerInGame_1_4__uses_B_game_playerInGame_local2, thisDotupdateChanges_playerInGame_1_4__B_game_playerInGame_local);
									thisDotupdateChanges_item1_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item1_B_game_playerInGame_local, thisDotupdateChanges_playerInGame_1_4__B_game_playerInGame_local);
									thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame_local[0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotupdateChanges_playerInGame_1_4__uses_B_game_playerInGame_local2, thisDotupdateChanges_item1_F_game_playerInGame_local2, 0, thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame_local[0]);
									thisDotupdateChanges_playerInGame_1_4__uses_B_game_local[playerInGame] = thisDotupdateChanges_playerInGame_1_4__uses_B_game_playerInGame_local2;
									DistributionStructArray<Gaussian,double> thisDotupdateChanges_F_game_playerInGame_local3 = default(DistributionStructArray<Gaussian,double>);
									thisDotupdateChanges_F_game_playerInGame_local3 = thisDotupdateChanges_F_game_local[playerInGame];
									thisDotupdateChanges_playerInGame_2_4__B_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotupdateChanges_F_game_playerInGame_local3[3], thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame_local[0]);
									thisDotupdateChanges_B_game_playerInGame_local2[2] = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_B_game_playerInGame_local2[2], thisDotupdateChanges_playerInGame_2_4__B_game_playerInGame_local);
									thisDotvdouble635_F_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotupdateChanges_F_game_playerInGame_local3[2], thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame_local[0]);
									thisDotupdateChanges_playerInGame_1_4__uses_F_game_local[playerInGame] = thisDotupdateChanges_playerInGame_1_4__uses_F_game_playerInGame_local;
									thisDotupdateChanges_B_game_playerInGame_local2[3] = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_B_game_playerInGame_local2[3], thisDotvdouble635_F_game_playerInGame_local);
								}
								thisDotvdouble621_B_game_playerInGame_local = DoublePlusOp.BAverageConditional(thisDotvdouble622_B_game_playerInGame_local, thisDotbaseSkillChangePrimary_F_game_local[playerInGame]);
								thisDotpreviousChanges_B_game_playerInGame_local = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(thisDotvdouble621_B_game_playerInGame_local, thisDotvdouble621_F_game_playerInGame_local2, thisDotpreviousChanges_F_game_local[playerInGame], thisDotpreviousChanges_B_game_playerInGame_local);
								thisDotpreviousChanges_B_game_local[playerInGame] = thisDotpreviousChanges_B_game_playerInGame_local;
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==1) {
									thisDotupdateChanges_item0_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item0_B_game_playerInGame_local, thisDotbaseSkillChangeSecondary_F_game_playerInGame_local);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==4) {
									thisDotupdateChanges_item0_B_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item0_B_game_playerInGame_local, thisDotbaseSkillChangeSecondary_F_game_playerInGame_local);
								}
								if (((thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==1)||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==2))||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==4)) {
									thisDotupdateChanges_B_game_playerInGame_local2[0] = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_B_game_playerInGame_local2[0], thisDotupdateChanges_item0_B_game_playerInGame_local);
								}
								if ((thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==2)||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local4==4)) {
									thisDotupdateChanges_B_game_playerInGame_local2[1] = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_B_game_playerInGame_local2[1], thisDotupdateChanges_item1_B_game_playerInGame_local);
								}
								thisDotupdateChanges_B_game_local[playerInGame] = thisDotupdateChanges_B_game_playerInGame_local2;
							}
							DistributionStructArray<Gaussian,double> thisDotpreviousSubarray_B_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotpreviousSubarray_B_game_local = new DistributionStructArray<Gaussian,double>(thisDotpreviousSubarrayChangeVariableCountInGame_game_local);
							for(int _iv8 = 0; _iv8<thisDotpreviousSubarrayChangeVariableCountInGame_game_local; _iv8++) {
								thisDotpreviousSubarray_B_game_local[_iv8] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotupdateSubarray_B_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotupdateSubarray_B_game_local = new DistributionStructArray<Gaussian,double>(thisDotupdateSubarrayChangeVariableCountInGame_game_local);
							for(int _iv7 = 0; _iv7<thisDotupdateSubarrayChangeVariableCountInGame_game_local; _iv7++) {
								thisDotupdateSubarray_B_game_local[_iv7] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotbaseSkillChangesInGame_B_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotbaseSkillChangesInGame_B_game_local = new DistributionStructArray<Gaussian,double>(thisDotsubarrayChangeVariableCountInGame_game_local);
							for(int _iv3 = 0; _iv3<thisDotsubarrayChangeVariableCountInGame_game_local; _iv3++) {
								thisDotbaseSkillChangesInGame_B_game_local[_iv3] = Gaussian.Uniform();
							}
							thisDotskillsPastAndPresent_B_game_local = SplitOp<double>.ArrayAverageConditional(thisDotskillsPast_B_game_local, this.playerCountInGame[game], thisDotskillsPresent_B_game_local, thisDotskillsPastAndPresent_B_game_local);
							thisDotpreviousSubarray_B_game_local = SplitSubarrayOp<double>.ArrayAverageConditional(thisDotpreviousChanges_B_game_local, thisDotpreviousChangeVariableSubarrayIndexInGame_game_local, thisDotpreviousSubarray_B_game_local);
							thisDotupdateSubarray_B_game_local = SplitSubarrayOp<double>.ArrayAverageConditional(thisDotupdateChanges_B_game_local, thisDotupdateChangeVariableSubarrayIndexInGame_game_local, thisDotupdateSubarray_B_game_local);
							thisDotbaseSkillChangesInGame_B_game_local = SplitOp<double>.ArrayAverageConditional(thisDotpreviousSubarray_B_game_local, thisDotpreviousSubarrayChangeVariableCountInGame_game_local, thisDotupdateSubarray_B_game_local, thisDotbaseSkillChangesInGame_B_game_local);
							this.combinedVariables_B[game] = SplitOp<double>.ArrayAverageConditional(thisDotskillsPastAndPresent_B_game_local, this.offsetVariableCountInGame[game], thisDotbaseSkillChangesInGame_B_game_local, this.combinedVariables_B[game]);
							this.skillInConditions_marginal_F = JaggedSubarrayWithMarginalOp<double>.MarginalIncrementItems(this.combinedVariables_B[game], thisDotskillInConditions_CombinedVariableIndexInGame_F_game_local, this.combinedVariableIndexInGame, game, this.skillInConditions_marginal_F);
						}
					});
				}
				this.performancesByTeamForEvents_B_reduced_Rgame = default(Gaussian);
				for(int game_Block3 = GamesInBlock[0].Length-1; game_Block3>=0; game_Block3--) {
					Parallel.For(0, GamesInBlock.Length, delegate(int game_thread3) {
						for(int game_inBlock3 = GamesInBlock[game_thread3][game_Block3].Length-1; game_inBlock3>=0; game_inBlock3--) {
							int game = GamesInBlock[game_thread3][game_Block3][game_inBlock3];
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								DistributionStructArray<Gaussian,double> thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_playerInGame_local = default(DistributionStructArray<Gaussian,double>);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_playerInGame_local = new DistributionStructArray<Gaussian,double>(this.eventTypeCount);
								for(int eventType = 0; eventType<this.eventTypeCount; eventType++) {
									Gaussian thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_playerInGame_eventType_local = LowPriorityBackwardOp.ValueAverageConditional<Gaussian>(this.enemyAverageCopy_B[game][playerInGame][eventType]);
									thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_playerInGame_local[eventType] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_playerInGame_eventType_local;
								}
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_local[playerInGame] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_playerInGame_local;
							}
							Gaussian[][] thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_local = default(Gaussian[][]);
							thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_local = new Gaussian[this.playerCountInGame[game]][];
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian[] thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local = default(Gaussian[]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local = new Gaussian[2];
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local[0] = Gaussian.Uniform();
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_local[playerInGame] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_Rgame_game_playerInGame_local = ReplicateOp_Divide.ToDefInit<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_local[playerInGame][0]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_Rgame_game_playerInGame_local = ReplicateOp_Divide.ToDef<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_local[playerInGame], thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_Rgame_game_playerInGame_local);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_Rgame_game_local[playerInGame] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_Rgame_game_playerInGame_local;
							}
							Gaussian[][] thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_local = default(Gaussian[][]);
							thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_local = new Gaussian[this.playerCountInGame[game]][];
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian[] thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_playerInGame_local = default(Gaussian[]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_playerInGame_local = new Gaussian[2];
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_playerInGame_local[0] = Gaussian.Uniform();
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_playerInGame_local[0] = ArrayHelper.SetTo<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_playerInGame_local[0], thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_Rgame_game_local[playerInGame]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_playerInGame_local[1] = Gaussian.Uniform();
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_playerInGame_local[1] = LowPriorityBackwardOp.ValueAverageConditional<Gaussian>(this.enemyAverageQuit_B[game][playerInGame]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_local[playerInGame] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_Rgame_game_playerInGame_local = Gaussian.Uniform();
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_Rgame_game_playerInGame_local = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_local[playerInGame], thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_Rgame_game_playerInGame_local);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_Rgame_game_local[playerInGame] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_Rgame_game_playerInGame_local;
							}
							int[] thisDotteamIndexOfPlayer_Rgame_game_local = default(int[]);
							thisDotteamIndexOfPlayer_Rgame_game_local = new int[this.playerCountInGame[game]];
							int thisDotTeamCount_game_local2 = default(int);
							thisDotTeamCount_game_local2 = this.TeamCount[game];
							int[] thisDotTeamSizes_game_local2 = default(int[]);
							thisDotTeamSizes_game_local2 = this.TeamSizes[game];
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								for(int teamPlayer = 0; teamPlayer<thisDotTeamSizes_game_local2[team]; teamPlayer++) {
									thisDotteamIndexOfPlayer_Rgame_game_local[this.indexOfPlayerOnTeam[game][team][teamPlayer]] = Factor.Copy<int>(team);
								}
							}
							DistributionStructArray<Gaussian,double> thisDotvdouble__304_B_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble__304_B_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local2);
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								thisDotvdouble__304_B_Rgame_game_local[team] = Gaussian.Uniform();
							}
							thisDotvdouble__304_B_Rgame_game_local = GetItemsOp<double>.ArrayAverageConditional(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_Rgame_game_local, thisDotteamIndexOfPlayer_Rgame_game_local, thisDotvdouble__304_B_Rgame_game_local);
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotteamStrength2_rep_B_Rgame_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotteamStrength2_rep_B_Rgame_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(thisDotTeamCount_game_local2);
							for(int _a = 0; _a<thisDotTeamCount_game_local2; _a++) {
								thisDotteamStrength2_rep_B_Rgame_game_local[_a] = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local2);
							}
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								for(int _a = 0; _a<thisDotTeamCount_game_local2; _a++) {
									thisDotteamStrength2_rep_B_Rgame_game_local[_a][team] = Gaussian.Uniform();
								}
							}
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								thisDotteamStrength2_rep_B_Rgame_game_local[team] = SumExceptOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(thisDotvdouble__304_B_Rgame_game_local[team], this.teamStrength2_rep_F[game][team], team, thisDotteamStrength2_rep_B_Rgame_game_local[team]);
							}
							DistributionStructArray<Gaussian,double> thisDotteamStrength_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamStrength_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local2);
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								thisDotteamStrength_F_Rgame_game_local[team] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotteamStrength2_rep_B_toDef_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamStrength2_rep_B_toDef_Rgame_game_local = ReplicateOp_Divide.ToDefInit<DistributionStructArray<Gaussian,double>>(thisDotteamStrength_F_Rgame_game_local);
							thisDotteamStrength2_rep_B_toDef_Rgame_game_local = ReplicateOp_Divide.ToDef<DistributionStructArray<Gaussian,double>>(thisDotteamStrength2_rep_B_Rgame_game_local, thisDotteamStrength2_rep_B_toDef_Rgame_game_local);
							Gaussian[][] thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_local = default(Gaussian[][]);
							thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_local = new Gaussian[thisDotTeamCount_game_local2][];
							for(int _iv9 = 0; _iv9<thisDotTeamCount_game_local2; _iv9++) {
								Gaussian[] thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game__iv9_local = default(Gaussian[]);
								thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game__iv9_local = new Gaussian[2];
								thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game__iv9_local[1] = Gaussian.Uniform();
								thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game__iv9_local[0] = Gaussian.Uniform();
								thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_local[_iv9] = thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game__iv9_local;
							}
							DistributionStructArray<Gaussian,double> thisDotteamSumOfWeightedPerformancesForEvents_B_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamSumOfWeightedPerformancesForEvents_B_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local2);
							for(int _iv9 = 0; _iv9<thisDotTeamCount_game_local2; _iv9++) {
								thisDotteamSumOfWeightedPerformancesForEvents_B_Rgame_game_local[_iv9] = Gaussian.Uniform();
							}
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								Gaussian thisDotteamStrength_B_Rgame_game_team_local = default(Gaussian);
								thisDotteamStrength_B_Rgame_game_team_local = LowPriorityBackwardOp.ValueAverageConditional<Gaussian>(thisDotteamStrength2_rep_B_toDef_Rgame_game_local[team]);
								Gaussian[] thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_team_local = default(Gaussian[]);
								thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_team_local = thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_local[team];
								if (this.denomIsZero[game][team]) {
									thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_team_local[0] = ArrayHelper.SetTo<Gaussian>(thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_team_local[0], thisDotteamStrength_B_Rgame_game_team_local);
								}
								if (!this.denomIsZero[game][team]) {
									Gaussian thisDotteamSumOfWeightedPerformancesForEvents_team_1__B_Rgame_game_team_local = default(Gaussian);
									thisDotteamSumOfWeightedPerformancesForEvents_team_1__B_Rgame_game_team_local = GaussianProductOpBase.ProductAverageConditional(thisDotteamStrength_B_Rgame_game_team_local, this.enemyWeight[game][team]);
									thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_team_local[0] = ArrayHelper.SetTo<Gaussian>(thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_team_local[0], thisDotteamSumOfWeightedPerformancesForEvents_team_1__B_Rgame_game_team_local);
								}
								thisDotteamSumOfWeightedPerformancesForEvents_B_Rgame_game_local[team] = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_team_local, thisDotteamSumOfWeightedPerformancesForEvents_B_Rgame_game_local[team]);
								thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_local[team] = thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_team_local;
							}
							DistributionStructArray<Gaussian,double> thisDotskillInConditions_CombinedVariableIndexInGame_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillInConditions_CombinedVariableIndexInGame_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.combinedVariableCount[game]);
							for(int combinedVariable = 0; combinedVariable<this.combinedVariableCount[game]; combinedVariable++) {
								thisDotskillInConditions_CombinedVariableIndexInGame_F_Rgame_game_local[combinedVariable] = Gaussian.Uniform();
							}
							thisDotskillInConditions_CombinedVariableIndexInGame_F_Rgame_game_local = JaggedSubarrayWithMarginalOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.combinedVariables_B[game], this.skillInConditions_uses_F[1], this.skillInConditions_marginal_F, this.combinedVariableIndexInGame, game, thisDotskillInConditions_CombinedVariableIndexInGame_F_Rgame_game_local);
							DistributionStructArray<Gaussian,double> thisDotskillsPastAndPresent_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillsPastAndPresent_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.offsetVariableCountInGame[game]);
							for(int _iv4 = 0; _iv4<this.offsetVariableCountInGame[game]; _iv4++) {
								thisDotskillsPastAndPresent_F_Rgame_game_local[_iv4] = Gaussian.Uniform();
							}
							thisDotskillsPastAndPresent_F_Rgame_game_local = SplitOp<double>.HeadAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotskillInConditions_CombinedVariableIndexInGame_F_Rgame_game_local, this.offsetVariableCountInGame[game], thisDotskillsPastAndPresent_F_Rgame_game_local);
							DistributionStructArray<Gaussian,double> thisDotskillsPresent_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillsPresent_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int _iv5 = 0; _iv5<this.playerCountInGame[game]; _iv5++) {
								thisDotskillsPresent_F_Rgame_game_local[_iv5] = Gaussian.Uniform();
							}
							thisDotskillsPresent_F_Rgame_game_local = SplitOp<double>.TailAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotskillsPastAndPresent_F_Rgame_game_local, this.playerCountInGame[game], thisDotskillsPresent_F_Rgame_game_local);
							int thisDotsubarrayChangeVariableCountInGame_game_local2 = default(int);
							thisDotsubarrayChangeVariableCountInGame_game_local2 = this.subarrayChangeVariableCountInGame[game];
							DistributionStructArray<Gaussian,double> thisDotbaseSkillChangesInGame_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotbaseSkillChangesInGame_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotsubarrayChangeVariableCountInGame_game_local2);
							for(int _iv3 = 0; _iv3<thisDotsubarrayChangeVariableCountInGame_game_local2; _iv3++) {
								thisDotbaseSkillChangesInGame_F_Rgame_game_local[_iv3] = Gaussian.Uniform();
							}
							thisDotbaseSkillChangesInGame_F_Rgame_game_local = SplitOp<double>.TailAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotskillInConditions_CombinedVariableIndexInGame_F_Rgame_game_local, this.offsetVariableCountInGame[game], thisDotbaseSkillChangesInGame_F_Rgame_game_local);
							int thisDotupdateSubarrayChangeVariableCountInGame_game_local2 = default(int);
							thisDotupdateSubarrayChangeVariableCountInGame_game_local2 = this.updateSubarrayChangeVariableCountInGame[game];
							DistributionStructArray<Gaussian,double> thisDotupdateSubarray_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotupdateSubarray_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotupdateSubarrayChangeVariableCountInGame_game_local2);
							for(int _iv7 = 0; _iv7<thisDotupdateSubarrayChangeVariableCountInGame_game_local2; _iv7++) {
								thisDotupdateSubarray_F_Rgame_game_local[_iv7] = Gaussian.Uniform();
							}
							int thisDotpreviousSubarrayChangeVariableCountInGame_game_local2 = default(int);
							thisDotpreviousSubarrayChangeVariableCountInGame_game_local2 = this.previousSubarrayChangeVariableCountInGame[game];
							thisDotupdateSubarray_F_Rgame_game_local = SplitOp<double>.TailAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotbaseSkillChangesInGame_F_Rgame_game_local, thisDotpreviousSubarrayChangeVariableCountInGame_game_local2, thisDotupdateSubarray_F_Rgame_game_local);
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotupdateChanges_F_Rgame_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotupdateChanges_F_Rgame_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
							int[] thisDotupdateChangeVariableSubarrayCountInGame_game_local2 = default(int[]);
							thisDotupdateChangeVariableSubarrayCountInGame_game_local2 = this.updateChangeVariableSubarrayCountInGame[game];
							int[][] thisDotupdateChangeVariableSubarrayIndexInGame_game_local2 = default(int[][]);
							thisDotupdateChangeVariableSubarrayIndexInGame_game_local2 = this.updateChangeVariableSubarrayIndexInGame[game];
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local3 = default(int);
								thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local3 = thisDotupdateChangeVariableSubarrayCountInGame_game_local2[playerInGame];
								DistributionStructArray<Gaussian,double> thisDotupdateChanges_F_Rgame_game_playerInGame_local = default(DistributionStructArray<Gaussian,double>);
								thisDotupdateChanges_F_Rgame_game_playerInGame_local = new DistributionStructArray<Gaussian,double>(thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local3);
								for(int index47 = 0; index47<thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local3; index47++) {
									thisDotupdateChanges_F_Rgame_game_playerInGame_local[index47] = Gaussian.Uniform();
								}
								thisDotupdateChanges_F_Rgame_game_playerInGame_local = SplitSubarrayOp<double>.ItemsAverageConditional(thisDotupdateSubarray_F_Rgame_game_local, thisDotupdateChangeVariableSubarrayIndexInGame_game_local2, playerInGame, thisDotupdateChanges_F_Rgame_game_playerInGame_local, false);
                                thisDotupdateChanges_F_Rgame_game_local[playerInGame] = thisDotupdateChanges_F_Rgame_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotupdateChanges_item0_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotupdateChanges_item0_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							int[] thisDotupdateChangeVariableCountInGame_game_local2 = default(int[]);
							thisDotupdateChangeVariableCountInGame_game_local2 = this.updateChangeVariableCountInGame[game];
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotupdateChangeVariableCountInGame_game_playerInGame_local5 = default(int);
								thisDotupdateChangeVariableCountInGame_game_playerInGame_local5 = thisDotupdateChangeVariableCountInGame_game_local2[playerInGame];
								if (((thisDotupdateChangeVariableCountInGame_game_playerInGame_local5==1)||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local5==2))||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local5==4)) {
									Gaussian thisDotupdateChanges_item0_F_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotupdateChanges_item0_F_Rgame_game_playerInGame_local = Gaussian.Uniform();
									thisDotupdateChanges_item0_F_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item0_F_Rgame_game_playerInGame_local, thisDotupdateChanges_F_Rgame_game_local[playerInGame][0]);
									thisDotupdateChanges_item0_F_Rgame_game_local[playerInGame] = thisDotupdateChanges_item0_F_Rgame_game_playerInGame_local;
								}
							}
							DistributionStructArray<Gaussian,double> thisDotbaseSkillChangePrimary_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotbaseSkillChangePrimary_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							DistributionStructArray<Gaussian,double> thisDotupdateChanges_item1_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotupdateChanges_item1_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotupdateChangeVariableCountInGame_game_playerInGame_local6 = default(int);
								thisDotupdateChangeVariableCountInGame_game_playerInGame_local6 = thisDotupdateChangeVariableCountInGame_game_local2[playerInGame];
								if ((thisDotupdateChangeVariableCountInGame_game_playerInGame_local6==2)||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local6==4)) {
									Gaussian thisDotupdateChanges_item1_F_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotupdateChanges_item1_F_Rgame_game_playerInGame_local = Gaussian.Uniform();
									thisDotupdateChanges_item1_F_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item1_F_Rgame_game_playerInGame_local, thisDotupdateChanges_F_Rgame_game_local[playerInGame][1]);
									thisDotupdateChanges_item1_F_Rgame_game_local[playerInGame] = thisDotupdateChanges_item1_F_Rgame_game_playerInGame_local;
								}
							}
							DistributionStructArray<Gaussian,double> thisDotbaseSkillChange_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotbaseSkillChange_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							bool[] thisDotnoExperienceLastGame_game_local2 = default(bool[]);
							if (this.playerCountInGame[game]>0) {
								thisDotnoExperienceLastGame_game_local2 = this.noExperienceLastGame[game];
							}
							double[] thisDotminutesSinceLastGame_game_local2 = default(double[]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) { // broken
								if (!this.noExperienceLastGame[game][playerInGame]) {
									thisDotminutesSinceLastGame_game_local2 = this.minutesSinceLastGame[game];
									playerInGame = this.playerCountInGame[game]-1;
								}
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotbaseSkillChange_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotbaseSkillChange_F_Rgame_game_playerInGame_local = Gaussian.Uniform();
								bool thisDotnoExperienceLastGame_game_playerInGame_local2 = default(bool);
								thisDotnoExperienceLastGame_game_playerInGame_local2 = thisDotnoExperienceLastGame_game_local2[playerInGame];
								if (thisDotnoExperienceLastGame_game_playerInGame_local2) {
									Gaussian thisDotbaseSkillChange_0__F_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotbaseSkillChange_0__F_Rgame_game_playerInGame_local = Gaussian.Uniform();
									thisDotbaseSkillChange_0__F_Rgame_game_playerInGame_local = Distribution.SetPoint<Gaussian,double>(thisDotbaseSkillChange_0__F_Rgame_game_playerInGame_local, Factor.Copy<double>(0.0));
									thisDotbaseSkillChange_F_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChange_F_Rgame_game_playerInGame_local, thisDotbaseSkillChange_0__F_Rgame_game_playerInGame_local);
								}
								if (!thisDotnoExperienceLastGame_game_playerInGame_local2) {
									double thisDotbaseChangePrecisionByTime_Rgame_game_playerInGame_local = default(double);
									thisDotbaseChangePrecisionByTime_Rgame_game_playerInGame_local = Factor.Ratio(this.baseSkillChangePrecisionPerMinute, thisDotminutesSinceLastGame_game_local2[playerInGame]);
									Gaussian thisDotbaseSkillChange1_F_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotbaseSkillChange1_F_Rgame_game_playerInGame_local = GaussianOpBase.SampleAverageConditional(0.0, thisDotbaseChangePrecisionByTime_Rgame_game_playerInGame_local);
									Gaussian thisDotbaseSkillChange2_F_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotbaseSkillChange2_F_Rgame_game_playerInGame_local = GaussianOpBase.SampleAverageConditional(thisDotbaseSkillChange1_F_Rgame_game_playerInGame_local, this.baseSkillChangePrecisionPerGame);
									thisDotbaseSkillChange_F_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChange_F_Rgame_game_playerInGame_local, thisDotbaseSkillChange2_F_Rgame_game_playerInGame_local);
								}
								Gaussian thisDotbaseSkillChangeSecondary_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotbaseSkillChangeSecondary_B_Rgame_game_playerInGame_local = Gaussian.Uniform();
								int thisDotupdateChangeVariableCountInGame_game_playerInGame_local7 = default(int);
								thisDotupdateChangeVariableCountInGame_game_playerInGame_local7 = thisDotupdateChangeVariableCountInGame_game_local2[playerInGame];
								Gaussian thisDotupdateChanges_item0_F_Rgame_game_playerInGame_local2 = default(Gaussian);
								thisDotupdateChanges_item0_F_Rgame_game_playerInGame_local2 = thisDotupdateChanges_item0_F_Rgame_game_local[playerInGame];
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local7==1) {
									thisDotbaseSkillChangeSecondary_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSecondary_B_Rgame_game_playerInGame_local, thisDotupdateChanges_item0_F_Rgame_game_playerInGame_local2);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local7==2) {
									Gaussian thisDotbaseSkillChangeSecondary_2__B_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotbaseSkillChangeSecondary_2__B_Rgame_game_playerInGame_local = DoublePlusOp.BAverageConditional(thisDotupdateChanges_item1_F_Rgame_game_local[playerInGame], thisDotupdateChanges_item0_F_Rgame_game_playerInGame_local2);
									thisDotbaseSkillChangeSecondary_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSecondary_B_Rgame_game_playerInGame_local, thisDotbaseSkillChangeSecondary_2__B_Rgame_game_playerInGame_local);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local7==4) {
									thisDotbaseSkillChangeSecondary_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSecondary_B_Rgame_game_playerInGame_local, thisDotupdateChanges_item0_F_Rgame_game_playerInGame_local2);
								}
								Gaussian thisDotbaseSkillChangePrimary_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotbaseSkillChangePrimary_F_Rgame_game_playerInGame_local = Gaussian.Uniform();
								thisDotbaseSkillChangePrimary_F_Rgame_game_playerInGame_local = SequentialCopyOp.FirstAverageConditional<Gaussian>(thisDotbaseSkillChange_F_Rgame_game_playerInGame_local, thisDotbaseSkillChangeSecondary_B_Rgame_game_playerInGame_local, thisDotbaseSkillChangePrimary_F_Rgame_game_playerInGame_local);
								thisDotbaseSkillChangePrimary_F_Rgame_game_local[playerInGame] = thisDotbaseSkillChangePrimary_F_Rgame_game_playerInGame_local;
								thisDotbaseSkillChange_F_Rgame_game_local[playerInGame] = thisDotbaseSkillChange_F_Rgame_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotpreviousSubarray_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotpreviousSubarray_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotpreviousSubarrayChangeVariableCountInGame_game_local2);
							for(int _iv8 = 0; _iv8<thisDotpreviousSubarrayChangeVariableCountInGame_game_local2; _iv8++) {
								thisDotpreviousSubarray_F_Rgame_game_local[_iv8] = Gaussian.Uniform();
							}
							thisDotpreviousSubarray_F_Rgame_game_local = SplitOp<double>.HeadAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotbaseSkillChangesInGame_F_Rgame_game_local, thisDotpreviousSubarrayChangeVariableCountInGame_game_local2, thisDotpreviousSubarray_F_Rgame_game_local);
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotpreviousChanges_F_Rgame_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotpreviousChanges_F_Rgame_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
							int[] thisDotpreviousChangeVariableSubarrayCountInGame_game_local2 = default(int[]);
							thisDotpreviousChangeVariableSubarrayCountInGame_game_local2 = this.previousChangeVariableSubarrayCountInGame[game];
							int[][] thisDotpreviousChangeVariableSubarrayIndexInGame_game_local2 = default(int[][]);
							thisDotpreviousChangeVariableSubarrayIndexInGame_game_local2 = this.previousChangeVariableSubarrayIndexInGame[game];
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local3 = default(int);
								thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local3 = thisDotpreviousChangeVariableSubarrayCountInGame_game_local2[playerInGame];
								DistributionStructArray<Gaussian,double> thisDotpreviousChanges_F_Rgame_game_playerInGame_local = default(DistributionStructArray<Gaussian,double>);
								thisDotpreviousChanges_F_Rgame_game_playerInGame_local = new DistributionStructArray<Gaussian,double>(thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local3);
								for(int index46 = 0; index46<thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local3; index46++) {
									thisDotpreviousChanges_F_Rgame_game_playerInGame_local[index46] = Gaussian.Uniform();
								}
								thisDotpreviousChanges_F_Rgame_game_playerInGame_local = SplitSubarrayOp<double>.ItemsAverageConditional(thisDotpreviousSubarray_F_Rgame_game_local, thisDotpreviousChangeVariableSubarrayIndexInGame_game_local2, playerInGame, thisDotpreviousChanges_F_Rgame_game_playerInGame_local, false);
                                thisDotpreviousChanges_F_Rgame_game_local[playerInGame] = thisDotpreviousChanges_F_Rgame_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotvdouble621_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble621_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotvdouble621_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotvdouble621_F_Rgame_game_playerInGame_local = FastSumOp.SumAverageConditional(thisDotpreviousChanges_F_Rgame_game_local[playerInGame]);
								thisDotvdouble621_F_Rgame_game_local[playerInGame] = thisDotvdouble621_F_Rgame_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotvdouble622_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble622_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotvdouble622_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotvdouble622_F_Rgame_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotbaseSkillChangePrimary_F_Rgame_game_local[playerInGame], thisDotvdouble621_F_Rgame_game_local[playerInGame]);
								thisDotvdouble622_F_Rgame_game_local[playerInGame] = thisDotvdouble622_F_Rgame_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotvdouble638_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble638_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							Gaussian[][] thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_local = default(Gaussian[][]);
							thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_local = new Gaussian[this.playerCountInGame[game]][];
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								if (thisDotupdateChangeVariableCountInGame_game_local2[playerInGame]==4) {
									thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_local[playerInGame] = new Gaussian[2];
								}
							}
							Gaussian[][] thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_local = default(Gaussian[][]);
							thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_local = new Gaussian[this.playerCountInGame[game]][];
							int[] thisDotplayerConditionsToLearnInGame_game_local2 = default(int[]);
							thisDotplayerConditionsToLearnInGame_game_local2 = this.playerConditionsToLearnInGame[game];
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotupdateChangeVariableCountInGame_game_playerInGame_local8 = default(int);
								thisDotupdateChangeVariableCountInGame_game_playerInGame_local8 = thisDotupdateChangeVariableCountInGame_game_local2[playerInGame];
								Gaussian thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame__1_local = default(Gaussian);
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local8==4) {
									Gaussian[] thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_playerInGame_local = default(Gaussian[]);
									thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_playerInGame_local = new Gaussian[2];
									thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_playerInGame_local[0] = Gaussian.Uniform();
									DistributionStructArray<Gaussian,double> thisDotupdateChanges_F_Rgame_game_playerInGame_local2 = default(DistributionStructArray<Gaussian,double>);
									thisDotupdateChanges_F_Rgame_game_playerInGame_local2 = thisDotupdateChanges_F_Rgame_game_local[playerInGame];
									thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_playerInGame_local[0] = DoublePlusOp.BAverageConditional(thisDotupdateChanges_F_Rgame_game_playerInGame_local2[3], thisDotupdateChanges_F_Rgame_game_playerInGame_local2[2]);
									thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_playerInGame_local[1] = Gaussian.Uniform();
									thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame__1_local = Gaussian.Uniform();
									thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame__1_local = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_playerInGame_local, thisDotupdateChanges_item1_F_Rgame_game_local[playerInGame], 1, thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame__1_local);
									thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_local[playerInGame] = thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_playerInGame_local;
								}
								Gaussian thisDotbaseSkillChangeSinceLastGame_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotbaseSkillChangeSinceLastGame_F_Rgame_game_playerInGame_local = Gaussian.Uniform();
								Gaussian thisDotvdouble622_F_Rgame_game_playerInGame_local2 = default(Gaussian);
								thisDotvdouble622_F_Rgame_game_playerInGame_local2 = thisDotvdouble622_F_Rgame_game_local[playerInGame];
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local8==0) {
									thisDotbaseSkillChangeSinceLastGame_F_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSinceLastGame_F_Rgame_game_playerInGame_local, thisDotvdouble622_F_Rgame_game_playerInGame_local2);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local8==1) {
									thisDotbaseSkillChangeSinceLastGame_F_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSinceLastGame_F_Rgame_game_playerInGame_local, thisDotvdouble622_F_Rgame_game_playerInGame_local2);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local8==2) {
									thisDotbaseSkillChangeSinceLastGame_F_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSinceLastGame_F_Rgame_game_playerInGame_local, thisDotvdouble622_F_Rgame_game_playerInGame_local2);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local8==4) {
									Gaussian thisDotbaseSkillChangeSinceLastGame_4__F_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotbaseSkillChangeSinceLastGame_4__F_Rgame_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotvdouble622_F_Rgame_game_playerInGame_local2, thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame__1_local);
									thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_local[playerInGame][1] = thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame__1_local;
									thisDotbaseSkillChangeSinceLastGame_F_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotbaseSkillChangeSinceLastGame_F_Rgame_game_playerInGame_local, thisDotbaseSkillChangeSinceLastGame_4__F_Rgame_game_playerInGame_local);
								}
								Gaussian thisDotvdouble638_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotvdouble638_F_Rgame_game_playerInGame_local = GaussianProductOpBase.ProductAverageConditional(thisDotbaseSkillChangeSinceLastGame_F_Rgame_game_playerInGame_local, this.baseSkillWeights[thisDotplayerConditionsToLearnInGame_game_local2[playerInGame]]);
								thisDotvdouble638_F_Rgame_game_local[playerInGame] = thisDotvdouble638_F_Rgame_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotskillsPast_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillsPast_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int _iv6 = 0; _iv6<this.playerCountInGame[game]; _iv6++) {
								thisDotskillsPast_F_Rgame_game_local[_iv6] = Gaussian.Uniform();
							}
							thisDotskillsPast_F_Rgame_game_local = SplitOp<double>.HeadAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotskillsPastAndPresent_F_Rgame_game_local, this.playerCountInGame[game], thisDotskillsPast_F_Rgame_game_local);
							DistributionStructArray<Gaussian,double> thisDotpredictedSkill2_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotpredictedSkill2_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							double[] thisDotoffsetChangePrecisionByTime_Rgame_game_local = default(double[]);
							thisDotoffsetChangePrecisionByTime_Rgame_game_local = new double[this.playerCountInGame[game]];
							bool[] thisDotnoExperienceLastGameInConditions_game_local2 = default(bool[]);
							thisDotnoExperienceLastGameInConditions_game_local2 = this.noExperienceLastGameInConditions[game];
							double[] thisDotminutesSinceLastGameInConditions_game_local2 = default(double[]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) { // broken
								if (!this.noExperienceLastGameInConditions[game][playerInGame]) {
									thisDotminutesSinceLastGameInConditions_game_local2 = this.minutesSinceLastGameInConditions[game];
									playerInGame = this.playerCountInGame[game]-1;
								}
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								if (!thisDotnoExperienceLastGameInConditions_game_local2[playerInGame]) {
									thisDotoffsetChangePrecisionByTime_Rgame_game_local[playerInGame] = Factor.Ratio(this.skillOffsetChangePrecisionPerMinute[thisDotplayerConditionsToLearnInGame_game_local2[playerInGame]], thisDotminutesSinceLastGameInConditions_game_local2[playerInGame]);
								}
							}
							int[] thisDotboundedExperienceForConditions_Rgame_game_local = default(int[]);
							thisDotboundedExperienceForConditions_Rgame_game_local = new int[this.playerCountInGame[game]];
							int[] thisDotexperienceForConditionsInGame_game_local2 = default(int[]);
							if (this.playerCountInGame[game]>0) {
								thisDotexperienceForConditionsInGame_game_local2 = this.experienceForConditionsInGame[game];
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotplayerConditionsToLearnInGame_game_playerInGame_local4 = default(int);
								thisDotplayerConditionsToLearnInGame_game_playerInGame_local4 = thisDotplayerConditionsToLearnInGame_game_local2[playerInGame];
								int thisDotExperienceBucketCountInConditionsMinus1_Rgame_game_playerInGame_local = default(int);
								thisDotExperienceBucketCountInConditionsMinus1_Rgame_game_playerInGame_local = Factor.Difference(this.experienceBucketCountInConditions[thisDotplayerConditionsToLearnInGame_game_playerInGame_local4], 1);
								int thisDotboundedExperienceForConditions_Rgame_game_playerInGame_local = default(int);
								thisDotboundedExperienceForConditions_Rgame_game_playerInGame_local = Math.Min(thisDotexperienceForConditionsInGame_game_local2[playerInGame], thisDotExperienceBucketCountInConditionsMinus1_Rgame_game_playerInGame_local);
								Gaussian thisDotpredictedSkill2_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotpredictedSkill2_F_Rgame_game_playerInGame_local = Gaussian.Uniform();
								bool thisDotnoExperienceLastGameInConditions_game_playerInGame_local3 = default(bool);
								thisDotnoExperienceLastGameInConditions_game_playerInGame_local3 = thisDotnoExperienceLastGameInConditions_game_local2[playerInGame];
								Gaussian thisDotskillsPast_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotskillsPast_F_Rgame_game_playerInGame_local = thisDotskillsPast_F_Rgame_game_local[playerInGame];
								if (thisDotnoExperienceLastGameInConditions_game_playerInGame_local3) {
									thisDotpredictedSkill2_F_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotpredictedSkill2_F_Rgame_game_playerInGame_local, thisDotskillsPast_F_Rgame_game_playerInGame_local);
								}
								if (!thisDotnoExperienceLastGameInConditions_game_playerInGame_local3) {
									Gaussian thisDotpredictedSkill1_F_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotpredictedSkill1_F_Rgame_game_playerInGame_local = GaussianOpBase.SampleAverageConditional(thisDotskillsPast_F_Rgame_game_playerInGame_local, thisDotoffsetChangePrecisionByTime_Rgame_game_local[playerInGame]);
									Gaussian thisDotvdouble617_F_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotvdouble617_F_Rgame_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotpredictedSkill1_F_Rgame_game_playerInGame_local, this.skillOffsetChangeMeanByExperience[thisDotplayerConditionsToLearnInGame_game_playerInGame_local4][thisDotboundedExperienceForConditions_Rgame_game_playerInGame_local]);
									Gaussian thisDotpredictedSkill2_1__F_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotpredictedSkill2_1__F_Rgame_game_playerInGame_local = GaussianOpBase.SampleAverageConditional(thisDotvdouble617_F_Rgame_game_playerInGame_local, this.skillOffsetChangePrecisionPerGame[thisDotplayerConditionsToLearnInGame_game_playerInGame_local4]);
									thisDotpredictedSkill2_F_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotpredictedSkill2_F_Rgame_game_playerInGame_local, thisDotpredictedSkill2_1__F_Rgame_game_playerInGame_local);
								}
								thisDotpredictedSkill2_F_Rgame_game_local[playerInGame] = thisDotpredictedSkill2_F_Rgame_game_playerInGame_local;
								thisDotboundedExperienceForConditions_Rgame_game_local[playerInGame] = thisDotboundedExperienceForConditions_Rgame_game_playerInGame_local;
							}
							Gaussian[][] thisDotskillsPresent_uses_B_Rgame_game_local = default(Gaussian[][]);
							thisDotskillsPresent_uses_B_Rgame_game_local = new Gaussian[this.playerCountInGame[game]][];
							for(int _iv5 = 0; _iv5<this.playerCountInGame[game]; _iv5++) {
								Gaussian[] thisDotskillsPresent_uses_B_Rgame_game__iv5_local = default(Gaussian[]);
								thisDotskillsPresent_uses_B_Rgame_game__iv5_local = new Gaussian[2];
								thisDotskillsPresent_uses_B_Rgame_game__iv5_local[0] = Gaussian.Uniform();
								thisDotskillsPresent_uses_B_Rgame_game__iv5_local[1] = Gaussian.Uniform();
								thisDotskillsPresent_uses_B_Rgame_game_local[_iv5] = thisDotskillsPresent_uses_B_Rgame_game__iv5_local;
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotpredictedSkill_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotpredictedSkill_F_Rgame_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotpredictedSkill2_F_Rgame_game_local[playerInGame], thisDotvdouble638_F_Rgame_game_local[playerInGame]);
								thisDotskillsPresent_uses_B_Rgame_game_local[playerInGame][0] = ArrayHelper.SetTo<Gaussian>(thisDotskillsPresent_uses_B_Rgame_game_local[playerInGame][0], thisDotpredictedSkill_F_Rgame_game_playerInGame_local);
							}
							Gaussian[][] thisDotskillsPresent_uses_F_Rgame_game_local = default(Gaussian[][]);
							thisDotskillsPresent_uses_F_Rgame_game_local = new Gaussian[this.playerCountInGame[game]][];
							for(int _iv5 = 0; _iv5<this.playerCountInGame[game]; _iv5++) {
								Gaussian[] thisDotskillsPresent_uses_F_Rgame_game__iv5_local = default(Gaussian[]);
								thisDotskillsPresent_uses_F_Rgame_game__iv5_local = new Gaussian[2];
								thisDotskillsPresent_uses_F_Rgame_game__iv5_local[1] = Gaussian.Uniform();
								thisDotskillsPresent_uses_F_Rgame_game__iv5_local[1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotskillsPresent_uses_B_Rgame_game_local[_iv5], thisDotskillsPresent_F_Rgame_game_local[_iv5], 1, thisDotskillsPresent_uses_F_Rgame_game__iv5_local[1]);
								thisDotskillsPresent_uses_F_Rgame_game__iv5_local[0] = Gaussian.Uniform();
								thisDotskillsPresent_uses_F_Rgame_game_local[_iv5] = thisDotskillsPresent_uses_F_Rgame_game__iv5_local;
							}
							DistributionStructArray<Gaussian,double> thisDotperformances_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotperformances_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							int[] thisDotboundedSquadSize_Rgame_game_local = default(int[]);
							thisDotboundedSquadSize_Rgame_game_local = new int[this.playerCountInGame[game]];
							int[] thisDotsquadSizes_game_local2 = default(int[]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) { // broken
								if (this.playerIsInSquad[game][playerInGame]) {
									thisDotsquadSizes_game_local2 = this.squadSizes[game];
									playerInGame = this.playerCountInGame[game]-1;
								}
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotplayerConditionsToLearnInGame_game_playerInGame_local5 = default(int);
								int thisDotboundedSquadSize_Rgame_game_playerInGame_local = default(int);
								if (this.playerIsInSquad[game][playerInGame]) {
									thisDotplayerConditionsToLearnInGame_game_playerInGame_local5 = thisDotplayerConditionsToLearnInGame_game_local2[playerInGame];
									int thisDotvint325_Rgame_game_playerInGame_local = default(int);
									thisDotvint325_Rgame_game_playerInGame_local = Factor.Difference(this.squadSizeBucketCount[thisDotplayerConditionsToLearnInGame_game_playerInGame_local5], 1);
									int thisDotSquadSizeMinus2_Rgame_game_playerInGame_local = default(int);
									thisDotSquadSizeMinus2_Rgame_game_playerInGame_local = Factor.Difference(thisDotsquadSizes_game_local2[playerInGame], 2);
									thisDotboundedSquadSize_Rgame_game_playerInGame_local = Math.Min(thisDotvint325_Rgame_game_playerInGame_local, thisDotSquadSizeMinus2_Rgame_game_playerInGame_local);
								}
								Gaussian thisDotskillInSquad_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotskillInSquad_F_Rgame_game_playerInGame_local = Gaussian.Uniform();
								Gaussian thisDotskillsPresent_uses_F_Rgame_game_playerInGame__1_local = default(Gaussian);
								thisDotskillsPresent_uses_F_Rgame_game_playerInGame__1_local = thisDotskillsPresent_uses_F_Rgame_game_local[playerInGame][1];
								if (this.playerIsInSquad[game][playerInGame]) {
									Gaussian thisDotskillInSquad_playerInGame_0__F_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotskillInSquad_playerInGame_0__F_Rgame_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotskillsPresent_uses_F_Rgame_game_playerInGame__1_local, this.squadOffset[thisDotplayerConditionsToLearnInGame_game_playerInGame_local5][thisDotboundedSquadSize_Rgame_game_playerInGame_local]);
									thisDotboundedSquadSize_Rgame_game_local[playerInGame] = thisDotboundedSquadSize_Rgame_game_playerInGame_local;
									thisDotskillInSquad_F_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotskillInSquad_F_Rgame_game_playerInGame_local, thisDotskillInSquad_playerInGame_0__F_Rgame_game_playerInGame_local);
								}
								if (!this.playerIsInSquad[game][playerInGame]) {
									thisDotskillInSquad_F_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotskillInSquad_F_Rgame_game_playerInGame_local, thisDotskillsPresent_uses_F_Rgame_game_playerInGame__1_local);
								}
								Gaussian thisDotperformances_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotperformances_F_Rgame_game_playerInGame_local = GaussianFromMeanAndVarianceOp.SampleAverageConditional(thisDotskillInSquad_F_Rgame_game_playerInGame_local, this.PerformanceVariance);
								thisDotperformances_F_Rgame_game_local[playerInGame] = thisDotperformances_F_Rgame_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotperformancesPrimary_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotperformancesPrimary_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotperformancesPrimary_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotperformancesPrimary_F_Rgame_game_playerInGame_local = Gaussian.Uniform();
								thisDotperformancesPrimary_F_Rgame_game_playerInGame_local = SequentialCopyOp.FirstAverageConditional<Gaussian>(thisDotperformances_F_Rgame_game_local[playerInGame], this.performancesForEvents_B[game][playerInGame], thisDotperformancesPrimary_F_Rgame_game_playerInGame_local);
								thisDotperformancesPrimary_F_Rgame_game_local[playerInGame] = thisDotperformancesPrimary_F_Rgame_game_playerInGame_local;
							}
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotweightedPerformances_F_Rgame_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotweightedPerformances_F_Rgame_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(thisDotTeamCount_game_local2);
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) { // broken
								if (thisDotTeamSizes_game_local2[team]>0) {
									this.performancesByTeamForEvents_B_reduced_Rgame = Gaussian.Uniform();
									team = thisDotTeamCount_game_local2-1;
								}
							}
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								int thisDotTeamSizes_game_team_local3 = default(int);
								thisDotTeamSizes_game_team_local3 = thisDotTeamSizes_game_local2[team];
								DistributionStructArray<Gaussian,double> thisDotperformancesByTeam_F_Rgame_game_team_local = default(DistributionStructArray<Gaussian,double>);
								thisDotperformancesByTeam_F_Rgame_game_team_local = new DistributionStructArray<Gaussian,double>(thisDotTeamSizes_game_team_local3);
								for(int teamPlayer = 0; teamPlayer<thisDotTeamSizes_game_team_local3; teamPlayer++) {
									thisDotperformancesByTeam_F_Rgame_game_team_local[teamPlayer] = Gaussian.Uniform();
								}
								thisDotperformancesByTeam_F_Rgame_game_team_local = SplitSubarrayOp<double>.ItemsAverageConditional(thisDotperformancesPrimary_F_Rgame_game_local, this.indexOfPlayerOnTeam[game], team, thisDotperformancesByTeam_F_Rgame_game_team_local, false);
                                DistributionStructArray<Gaussian,double> thisDotweightedPerformances_F_Rgame_game_team_local = default(DistributionStructArray<Gaussian,double>);
								thisDotweightedPerformances_F_Rgame_game_team_local = new DistributionStructArray<Gaussian,double>(thisDotTeamSizes_game_team_local3);
								for(int teamPlayer = 0; teamPlayer<thisDotTeamSizes_game_team_local3; teamPlayer++) {
									Gaussian thisDotperformancesByTeamPrimary_F_Rgame_game_team_teamPlayer_local = default(Gaussian);
									thisDotperformancesByTeamPrimary_F_Rgame_game_team_teamPlayer_local = Gaussian.Uniform();
									thisDotperformancesByTeamPrimary_F_Rgame_game_team_teamPlayer_local = SequentialCopyOp.FirstAverageConditional<Gaussian>(thisDotperformancesByTeam_F_Rgame_game_team_local[teamPlayer], this.performancesByTeamForEvents_B_reduced_Rgame, thisDotperformancesByTeamPrimary_F_Rgame_game_team_teamPlayer_local);
									Gaussian thisDotweightedPerformances_F_Rgame_game_team_teamPlayer_local = default(Gaussian);
									thisDotweightedPerformances_F_Rgame_game_team_teamPlayer_local = GaussianProductOpBase.ProductAverageConditional(thisDotperformancesByTeamPrimary_F_Rgame_game_team_teamPlayer_local, this.playerWeightsByTeam[game][team][teamPlayer]);
									thisDotweightedPerformances_F_Rgame_game_team_local[teamPlayer] = thisDotweightedPerformances_F_Rgame_game_team_teamPlayer_local;
								}
								thisDotweightedPerformances_F_Rgame_game_local[team] = thisDotweightedPerformances_F_Rgame_game_team_local;
							}
							DistributionStructArray<Gaussian,double> thisDotteamSumOfWeightedPerformances_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamSumOfWeightedPerformances_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local2);
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								Gaussian thisDotteamSumOfWeightedPerformances_F_Rgame_game_team_local = default(Gaussian);
								thisDotteamSumOfWeightedPerformances_F_Rgame_game_team_local = FastSumOp.SumAverageConditional(thisDotweightedPerformances_F_Rgame_game_local[team]);
								thisDotteamSumOfWeightedPerformances_F_Rgame_game_local[team] = thisDotteamSumOfWeightedPerformances_F_Rgame_game_team_local;
							}
							DistributionStructArray<Gaussian,double> thisDotteamSumOfWeightedPerformancesPrimary_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamSumOfWeightedPerformancesPrimary_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local2);
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								Gaussian thisDotteamSumOfWeightedPerformancesPrimary_F_Rgame_game_team_local = default(Gaussian);
								thisDotteamSumOfWeightedPerformancesPrimary_F_Rgame_game_team_local = Gaussian.Uniform();
								thisDotteamSumOfWeightedPerformancesPrimary_F_Rgame_game_team_local = SequentialCopyOp.FirstAverageConditional<Gaussian>(thisDotteamSumOfWeightedPerformances_F_Rgame_game_local[team], thisDotteamSumOfWeightedPerformancesForEvents_B_Rgame_game_local[team], thisDotteamSumOfWeightedPerformancesPrimary_F_Rgame_game_team_local);
								thisDotteamSumOfWeightedPerformancesPrimary_F_Rgame_game_local[team] = thisDotteamSumOfWeightedPerformancesPrimary_F_Rgame_game_team_local;
							}
							DistributionStructArray<Gaussian,double> thisDotorderedTeamSum_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotorderedTeamSum_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local2);
							for(int orderedTeam = 0; orderedTeam<thisDotTeamCount_game_local2; orderedTeam++) {
								thisDotorderedTeamSum_F_Rgame_game_local[orderedTeam] = Gaussian.Uniform();
							}
							int[] thisDotteamOrderInGame_game_local2 = default(int[]);
							thisDotteamOrderInGame_game_local2 = this.teamOrderInGame[game];
							thisDotorderedTeamSum_F_Rgame_game_local = SubarrayOp<double>.ItemsAverageConditional(thisDotteamSumOfWeightedPerformancesPrimary_F_Rgame_game_local, thisDotteamOrderInGame_game_local2, thisDotorderedTeamSum_F_Rgame_game_local);
							bool[] thisDotdrawWithPreviousInGame_game_local2 = default(bool[]);
							for(int orderedTeam = 0; orderedTeam<this.TeamCount[game]; orderedTeam++) { // broken
								if (orderedTeam>0) {
									thisDotdrawWithPreviousInGame_game_local2 = this.drawWithPreviousInGame[game];
									orderedTeam = this.TeamCount[game]-1;
								}
							}
							int thisDotdrawMarginConditionsInGame_game_local2 = default(int);
							for(int orderedTeam = 0; orderedTeam<this.TeamCount[game]; orderedTeam++) { // broken
								if (orderedTeam>0) {
									thisDotdrawMarginConditionsInGame_game_local2 = this.drawMarginConditionsInGame[game];
									orderedTeam = this.TeamCount[game]-1;
								}
							}
							double thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local2 = default(double);
							for(int orderedTeam = 0; orderedTeam<this.TeamCount[game]; orderedTeam++) { // broken
								if (orderedTeam>0) {
									thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local2 = this.drawMargin[thisDotdrawMarginConditionsInGame_game_local2];
									orderedTeam = this.TeamCount[game]-1;
								}
							}
							for(int orderedTeam = 0; orderedTeam<thisDotTeamCount_game_local2; orderedTeam++) {
								Gaussian thisDotorderedTeamSum_F_Rgame_game_orderedTeam_local = default(Gaussian);
								thisDotorderedTeamSum_F_Rgame_game_orderedTeam_local = thisDotorderedTeamSum_F_Rgame_game_local[orderedTeam];
								this.orderedTeamSum_uses_F[game][orderedTeam][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.orderedTeamSum_uses_B[game][orderedTeam], thisDotorderedTeamSum_F_Rgame_game_orderedTeam_local, 1, this.orderedTeamSum_uses_F[game][orderedTeam][1]);
								if (orderedTeam>0) {
									Gaussian thisDotPerformanceDifference_F_Rgame_game_orderedTeam_local = default(Gaussian);
									thisDotPerformanceDifference_F_Rgame_game_orderedTeam_local = DoublePlusOp.AAverageConditional(this.orderedTeamSum_uses_F[game][orderedTeam-1][0], this.orderedTeamSum_uses_F[game][orderedTeam][1]);
									Gaussian thisDotPerformanceDifference_B_Rgame_game_orderedTeam_local = default(Gaussian);
									thisDotPerformanceDifference_B_Rgame_game_orderedTeam_local = Gaussian.Uniform();
									bool thisDotdrawWithPreviousInGame_game_orderedTeam_local3 = default(bool);
									thisDotdrawWithPreviousInGame_game_orderedTeam_local3 = thisDotdrawWithPreviousInGame_game_local2[orderedTeam];
									if (!thisDotdrawWithPreviousInGame_game_orderedTeam_local3) {
										Gaussian thisDotPerformanceDifference_1__B_Rgame_game_orderedTeam_local = default(Gaussian);
										thisDotPerformanceDifference_1__B_Rgame_game_orderedTeam_local = DoubleIsBetweenOp.XAverageConditional(true, thisDotPerformanceDifference_F_Rgame_game_orderedTeam_local, thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local2, double.PositiveInfinity);
										thisDotPerformanceDifference_B_Rgame_game_orderedTeam_local = ArrayHelper.SetTo<Gaussian>(thisDotPerformanceDifference_B_Rgame_game_orderedTeam_local, thisDotPerformanceDifference_1__B_Rgame_game_orderedTeam_local);
									}
									if (thisDotdrawWithPreviousInGame_game_orderedTeam_local3) {
										double thisDotvdouble696_Rgame_game_orderedTeam_local = default(double);
										thisDotvdouble696_Rgame_game_orderedTeam_local = Factor.Difference(0.0, thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local2);
										Gaussian thisDotPerformanceDifference_0__B_Rgame_game_orderedTeam_local = default(Gaussian);
										thisDotPerformanceDifference_0__B_Rgame_game_orderedTeam_local = DoubleIsBetweenOp.XAverageConditional(true, thisDotPerformanceDifference_F_Rgame_game_orderedTeam_local, thisDotvdouble696_Rgame_game_orderedTeam_local, thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local2);
										thisDotPerformanceDifference_B_Rgame_game_orderedTeam_local = ArrayHelper.SetTo<Gaussian>(thisDotPerformanceDifference_B_Rgame_game_orderedTeam_local, thisDotPerformanceDifference_0__B_Rgame_game_orderedTeam_local);
									}
									Gaussian thisDotorderedTeamSum_orderedTeam_0__B_Rgame_game_orderedTeam_local = default(Gaussian);
									thisDotorderedTeamSum_orderedTeam_0__B_Rgame_game_orderedTeam_local = DoublePlusOp.BAverageConditional(this.orderedTeamSum_uses_F[game][orderedTeam-1][0], thisDotPerformanceDifference_B_Rgame_game_orderedTeam_local);
									this.orderedTeamSum_uses_B[game][orderedTeam][1] = ArrayHelper.SetTo<Gaussian>(this.orderedTeamSum_uses_B[game][orderedTeam][1], thisDotorderedTeamSum_orderedTeam_0__B_Rgame_game_orderedTeam_local);
								}
								this.orderedTeamSum_uses_F[game][orderedTeam][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.orderedTeamSum_uses_B[game][orderedTeam], thisDotorderedTeamSum_F_Rgame_game_orderedTeam_local, 0, this.orderedTeamSum_uses_F[game][orderedTeam][0]);
							}
							DistributionStructArray<Gaussian,double> thisDotorderedTeamSum_B_Rgame_RorderedTeam_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotorderedTeamSum_B_Rgame_RorderedTeam_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local2);
							for(int orderedTeam = thisDotTeamCount_game_local2-1; orderedTeam>=0; orderedTeam--) {
								this.orderedTeamSum_uses_F[game][orderedTeam][1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(this.orderedTeamSum_uses_B[game][orderedTeam], thisDotorderedTeamSum_F_Rgame_game_local[orderedTeam], 1, this.orderedTeamSum_uses_F[game][orderedTeam][1]);
								if (orderedTeam>0) {
									Gaussian thisDotPerformanceDifference_F_Rgame_RorderedTeam_game_orderedTeam_local = default(Gaussian);
									thisDotPerformanceDifference_F_Rgame_RorderedTeam_game_orderedTeam_local = DoublePlusOp.AAverageConditional(this.orderedTeamSum_uses_F[game][orderedTeam-1][0], this.orderedTeamSum_uses_F[game][orderedTeam][1]);
									Gaussian thisDotPerformanceDifference_B_Rgame_RorderedTeam_game_orderedTeam_local = default(Gaussian);
									thisDotPerformanceDifference_B_Rgame_RorderedTeam_game_orderedTeam_local = Gaussian.Uniform();
									bool thisDotdrawWithPreviousInGame_game_orderedTeam_local4 = default(bool);
									thisDotdrawWithPreviousInGame_game_orderedTeam_local4 = thisDotdrawWithPreviousInGame_game_local2[orderedTeam];
									if (!thisDotdrawWithPreviousInGame_game_orderedTeam_local4) {
										Gaussian thisDotPerformanceDifference_1__B_Rgame_RorderedTeam_game_orderedTeam_local = default(Gaussian);
										thisDotPerformanceDifference_1__B_Rgame_RorderedTeam_game_orderedTeam_local = DoubleIsBetweenOp.XAverageConditional(true, thisDotPerformanceDifference_F_Rgame_RorderedTeam_game_orderedTeam_local, thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local2, double.PositiveInfinity);
										thisDotPerformanceDifference_B_Rgame_RorderedTeam_game_orderedTeam_local = ArrayHelper.SetTo<Gaussian>(thisDotPerformanceDifference_B_Rgame_RorderedTeam_game_orderedTeam_local, thisDotPerformanceDifference_1__B_Rgame_RorderedTeam_game_orderedTeam_local);
									}
									if (thisDotdrawWithPreviousInGame_game_orderedTeam_local4) {
										double thisDotvdouble696_Rgame_RorderedTeam_game_orderedTeam_local = default(double);
										thisDotvdouble696_Rgame_RorderedTeam_game_orderedTeam_local = Factor.Difference(0.0, thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local2);
										Gaussian thisDotPerformanceDifference_0__B_Rgame_RorderedTeam_game_orderedTeam_local = default(Gaussian);
										thisDotPerformanceDifference_0__B_Rgame_RorderedTeam_game_orderedTeam_local = DoubleIsBetweenOp.XAverageConditional(true, thisDotPerformanceDifference_F_Rgame_RorderedTeam_game_orderedTeam_local, thisDotvdouble696_Rgame_RorderedTeam_game_orderedTeam_local, thisDotdrawMargin_thisDotdrawMarginConditionsInGame_game_local2);
										thisDotPerformanceDifference_B_Rgame_RorderedTeam_game_orderedTeam_local = ArrayHelper.SetTo<Gaussian>(thisDotPerformanceDifference_B_Rgame_RorderedTeam_game_orderedTeam_local, thisDotPerformanceDifference_0__B_Rgame_RorderedTeam_game_orderedTeam_local);
									}
									Gaussian thisDotorderedTeamSum_orderedTeamMinus1_0__B_Rgame_RorderedTeam_game_orderedTeam_local = default(Gaussian);
									thisDotorderedTeamSum_orderedTeamMinus1_0__B_Rgame_RorderedTeam_game_orderedTeam_local = DoublePlusOp.SumAverageConditional(thisDotPerformanceDifference_B_Rgame_RorderedTeam_game_orderedTeam_local, this.orderedTeamSum_uses_F[game][orderedTeam][1]);
									this.orderedTeamSum_uses_B[game][orderedTeam-1][0] = ArrayHelper.SetTo<Gaussian>(this.orderedTeamSum_uses_B[game][orderedTeam-1][0], thisDotorderedTeamSum_orderedTeamMinus1_0__B_Rgame_RorderedTeam_game_orderedTeam_local);
								}
								Gaussian thisDotorderedTeamSum_B_Rgame_RorderedTeam_game_orderedTeam_local = default(Gaussian);
								thisDotorderedTeamSum_B_Rgame_RorderedTeam_game_orderedTeam_local = Gaussian.Uniform();
								thisDotorderedTeamSum_B_Rgame_RorderedTeam_game_orderedTeam_local = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(this.orderedTeamSum_uses_B[game][orderedTeam], thisDotorderedTeamSum_B_Rgame_RorderedTeam_game_orderedTeam_local);
								thisDotorderedTeamSum_B_Rgame_RorderedTeam_game_local[orderedTeam] = thisDotorderedTeamSum_B_Rgame_RorderedTeam_game_orderedTeam_local;
							}
							DistributionStructArray<Gaussian,double> thisDotteamSumOfWeightedPerformancesPrimary_B_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamSumOfWeightedPerformancesPrimary_B_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local2);
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								thisDotteamSumOfWeightedPerformancesPrimary_B_Rgame_game_local[team] = Gaussian.Uniform();
							}
							thisDotteamSumOfWeightedPerformancesPrimary_B_Rgame_game_local = SubarrayOp<double>.ArrayAverageConditional(thisDotorderedTeamSum_B_Rgame_RorderedTeam_game_local, thisDotteamOrderInGame_game_local2, thisDotteamSumOfWeightedPerformancesPrimary_B_Rgame_game_local);
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotperformancesByTeam_B_Rgame_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotperformancesByTeam_B_Rgame_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(thisDotTeamCount_game_local2);
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								Gaussian thisDotteamSumOfWeightedPerformances_B_Rgame_game_team_local = default(Gaussian);
								thisDotteamSumOfWeightedPerformances_B_Rgame_game_team_local = Gaussian.Uniform();
								thisDotteamSumOfWeightedPerformances_B_Rgame_game_team_local = SequentialCopyOp.ValueAverageConditional<Gaussian>(thisDotteamSumOfWeightedPerformancesPrimary_B_Rgame_game_local[team], thisDotteamSumOfWeightedPerformancesForEvents_B_Rgame_game_local[team], thisDotteamSumOfWeightedPerformances_B_Rgame_game_team_local);
								int thisDotTeamSizes_game_team_local4 = default(int);
								thisDotTeamSizes_game_team_local4 = thisDotTeamSizes_game_local2[team];
								DistributionStructArray<Gaussian,double> thisDotweightedPerformances_B_Rgame_game_team_local = default(DistributionStructArray<Gaussian,double>);
								thisDotweightedPerformances_B_Rgame_game_team_local = new DistributionStructArray<Gaussian,double>(thisDotTeamSizes_game_team_local4);
								for(int teamPlayer = 0; teamPlayer<thisDotTeamSizes_game_team_local4; teamPlayer++) {
									thisDotweightedPerformances_B_Rgame_game_team_local[teamPlayer] = Gaussian.Uniform();
								}
								thisDotweightedPerformances_B_Rgame_game_team_local = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(thisDotteamSumOfWeightedPerformances_B_Rgame_game_team_local, thisDotteamSumOfWeightedPerformances_F_Rgame_game_local[team], thisDotweightedPerformances_F_Rgame_game_local[team], thisDotweightedPerformances_B_Rgame_game_team_local);
								DistributionStructArray<Gaussian,double> thisDotperformancesByTeam_B_Rgame_game_team_local = default(DistributionStructArray<Gaussian,double>);
								thisDotperformancesByTeam_B_Rgame_game_team_local = new DistributionStructArray<Gaussian,double>(thisDotTeamSizes_game_team_local4);
								for(int teamPlayer = 0; teamPlayer<thisDotTeamSizes_game_team_local4; teamPlayer++) {
									Gaussian thisDotperformancesByTeamPrimary_B_Rgame_game_team_teamPlayer_local = default(Gaussian);
									thisDotperformancesByTeamPrimary_B_Rgame_game_team_teamPlayer_local = GaussianProductOpBase.AAverageConditional(thisDotweightedPerformances_B_Rgame_game_team_local[teamPlayer], this.playerWeightsByTeam[game][team][teamPlayer]);
									Gaussian thisDotperformancesByTeam_B_Rgame_game_team_teamPlayer_local = default(Gaussian);
									thisDotperformancesByTeam_B_Rgame_game_team_teamPlayer_local = Gaussian.Uniform();
									thisDotperformancesByTeam_B_Rgame_game_team_teamPlayer_local = SequentialCopyOp.ValueAverageConditional<Gaussian>(thisDotperformancesByTeamPrimary_B_Rgame_game_team_teamPlayer_local, this.performancesByTeamForEvents_B_reduced_Rgame, thisDotperformancesByTeam_B_Rgame_game_team_teamPlayer_local);
									thisDotperformancesByTeam_B_Rgame_game_team_local[teamPlayer] = thisDotperformancesByTeam_B_Rgame_game_team_teamPlayer_local;
								}
								thisDotperformancesByTeam_B_Rgame_game_local[team] = thisDotperformancesByTeam_B_Rgame_game_team_local;
							}
							DistributionStructArray<Gaussian,double> thisDotperformancesPrimary_B_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotperformancesPrimary_B_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								thisDotperformancesPrimary_B_Rgame_game_local[playerInGame] = Gaussian.Uniform();
							}
							thisDotperformancesPrimary_B_Rgame_game_local = SplitSubarrayOp<double>.ArrayAverageConditional(thisDotperformancesByTeam_B_Rgame_game_local, this.indexOfPlayerOnTeam[game], thisDotperformancesPrimary_B_Rgame_game_local);
							DistributionStructArray<Gaussian,double> thisDotvdouble__304_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble__304_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local2);
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								thisDotvdouble__304_F_Rgame_game_local[team] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotvdouble__304_F_marginal_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotvdouble__304_F_marginal_Rgame_game_local = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(thisDotvdouble__304_F_Rgame_game_local);
							DistributionStructArray<Gaussian,double> thisDotteamStrength2_rep_F_marginal_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamStrength2_rep_F_marginal_Rgame_game_local = ReplicateOp_Divide.MarginalInit<DistributionStructArray<Gaussian,double>>(thisDotteamStrength_F_Rgame_game_local);
							DistributionStructArray<Gaussian,double> thisDotteamSumOfWeightedPerformancesForEvents_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotteamSumOfWeightedPerformancesForEvents_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local2);
							for(int _iv9 = 0; _iv9<thisDotTeamCount_game_local2; _iv9++) {
								thisDotteamSumOfWeightedPerformancesForEvents_F_Rgame_game_local[_iv9] = Gaussian.Uniform();
							}
							Gaussian[][] thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game_local = default(Gaussian[][]);
							thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game_local = new Gaussian[thisDotTeamCount_game_local2][];
							for(int _iv9 = 0; _iv9<thisDotTeamCount_game_local2; _iv9++) {
								Gaussian[] thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game__iv9_local = default(Gaussian[]);
								thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game__iv9_local = new Gaussian[2];
								thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game__iv9_local[0] = Gaussian.Uniform();
								thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game_local[_iv9] = thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game__iv9_local;
							}
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								Gaussian thisDotteamSumOfWeightedPerformancesForEvents_F_Rgame_game_team_local = default(Gaussian);
								thisDotteamSumOfWeightedPerformancesForEvents_F_Rgame_game_team_local = thisDotteamSumOfWeightedPerformancesForEvents_F_Rgame_game_local[team];
								thisDotteamSumOfWeightedPerformancesForEvents_F_Rgame_game_team_local = SequentialCopyOp.SecondAverageConditional<Gaussian>(thisDotteamSumOfWeightedPerformances_F_Rgame_game_local[team], thisDotteamSumOfWeightedPerformancesPrimary_B_Rgame_game_local[team], thisDotteamSumOfWeightedPerformancesForEvents_F_Rgame_game_team_local);
								Gaussian thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game_team__0_local = default(Gaussian);
								thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game_team__0_local = thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game_local[team][0];
								thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game_team__0_local = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotteamSumOfWeightedPerformancesForEvents_uses_B_Rgame_game_local[team], thisDotteamSumOfWeightedPerformancesForEvents_F_Rgame_game_team_local, 0, thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game_team__0_local);
								thisDotteamSumOfWeightedPerformancesForEvents_F_Rgame_game_local[team] = thisDotteamSumOfWeightedPerformancesForEvents_F_Rgame_game_team_local;
								Gaussian thisDotteamStrength_F_Rgame_game_team_local = default(Gaussian);
								thisDotteamStrength_F_Rgame_game_team_local = thisDotteamStrength_F_Rgame_game_local[team];
								if (this.denomIsZero[game][team]) {
									thisDotteamStrength_F_Rgame_game_team_local = ArrayHelper.SetTo<Gaussian>(thisDotteamStrength_F_Rgame_game_team_local, thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game_team__0_local);
								}
								if (!this.denomIsZero[game][team]) {
									Gaussian thisDotteamStrength_team_1__F_Rgame_game_team_local = default(Gaussian);
									thisDotteamStrength_team_1__F_Rgame_game_team_local = GaussianProductOpBase.AAverageConditional(thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game_team__0_local, this.enemyWeight[game][team]);
									thisDotteamStrength_F_Rgame_game_team_local = ArrayHelper.SetTo<Gaussian>(thisDotteamStrength_F_Rgame_game_team_local, thisDotteamStrength_team_1__F_Rgame_game_team_local);
								}
								thisDotteamStrength_F_Rgame_game_local[team] = thisDotteamStrength_F_Rgame_game_team_local;
								thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game_local[team][0] = thisDotteamSumOfWeightedPerformancesForEvents_uses_F_Rgame_game_team__0_local;
							}
							thisDotteamStrength2_rep_F_marginal_Rgame_game_local = ReplicateOp_Divide.Marginal<DistributionStructArray<Gaussian,double>>(thisDotteamStrength2_rep_B_toDef_Rgame_game_local, thisDotteamStrength_F_Rgame_game_local, thisDotteamStrength2_rep_F_marginal_Rgame_game_local);
							for(int _a = 0; _a<thisDotTeamCount_game_local2; _a++) {
								this.teamStrength2_rep_F[game][_a] = ReplicateOp_Divide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(thisDotteamStrength2_rep_B_Rgame_game_local[_a], thisDotteamStrength2_rep_F_marginal_Rgame_game_local, _a, this.teamStrength2_rep_F[game][_a]);
							}
							for(int team = 0; team<thisDotTeamCount_game_local2; team++) {
								thisDotvdouble__304_F_Rgame_game_local[team] = SumExceptOp.SumExceptAverageConditional(this.teamStrength2_rep_F[game][team], team);
							}
							thisDotvdouble__304_F_marginal_Rgame_game_local = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotvdouble__304_F_Rgame_game_local, thisDotvdouble__304_B_Rgame_game_local, thisDotvdouble__304_F_marginal_Rgame_game_local);
							DistributionStructArray<Gaussian,double> thisDotperformancesForEvents_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotperformancesForEvents_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int _ind0 = 0; _ind0<this.playerCountInGame[game]; _ind0++) {
								thisDotperformancesForEvents_F_Rgame_game_local[_ind0] = Gaussian.Uniform();
							}
							DistributionStructArray<Gaussian,double> thisDotperformancesForQuit_F_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotperformancesForQuit_F_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int _ind0 = 0; _ind0<this.playerCountInGame[game]; _ind0++) {
								thisDotperformancesForQuit_F_Rgame_game_local[_ind0] = Gaussian.Uniform();
							}
							double thisDotlengthInMinutes_game_local2 = default(double);
							if (this.playerCountInGame[game]>0) {
								thisDotlengthInMinutes_game_local2 = this.lengthInMinutes[game];
							}
							double[] thisDotplayerWeights_game_local2 = default(double[]);
							if (this.playerCountInGame[game]>0) {
								thisDotplayerWeights_game_local2 = this.playerWeights[game];
							}
							double[][] thisDoteventCountsFlat_game_local2 = default(double[][]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) { // broken
								if (this.eventTypeCount>0) {
									if (!this.isExperienced_reduced[game][playerInGame]) {
										thisDoteventCountsFlat_game_local2 = this.eventCountsFlat[game];
										playerInGame = this.playerCountInGame[game]-1;
									}
								}
							}
							bool[] thisDotplayerQuitInGameFlat_game_local2 = default(bool[]);
							if (this.playerCountInGame[game]>0) {
								thisDotplayerQuitInGameFlat_game_local2 = this.playerQuitInGameFlat[game];
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotperformancesPrimary_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotperformancesPrimary_B_Rgame_game_playerInGame_local = thisDotperformancesPrimary_B_Rgame_game_local[playerInGame];
								Gaussian thisDotperformancesForEvents_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotperformancesForEvents_F_Rgame_game_playerInGame_local = thisDotperformancesForEvents_F_Rgame_game_local[playerInGame];
								thisDotperformancesForEvents_F_Rgame_game_playerInGame_local = SequentialCopyOp.SecondAverageConditional<Gaussian>(thisDotperformances_F_Rgame_game_local[playerInGame], thisDotperformancesPrimary_B_Rgame_game_playerInGame_local, thisDotperformancesForEvents_F_Rgame_game_playerInGame_local);
								Gaussian thisDotperformancesForQuit_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotperformancesForQuit_B_Rgame_game_playerInGame_local = LowPriorityBackwardOp.ValueAverageConditional<Gaussian>(this.playerPerfQuit_B[game][playerInGame]);
								this.performancesForEventsPrimary_F[game][playerInGame] = SequentialCopyOp.FirstAverageConditional<Gaussian>(thisDotperformancesForEvents_F_Rgame_game_playerInGame_local, thisDotperformancesForQuit_B_Rgame_game_playerInGame_local, this.performancesForEventsPrimary_F[game][playerInGame]);
								Gaussian thisDotperformancesForEventsPrimary_rep_F_marginal_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotperformancesForEventsPrimary_rep_F_marginal_Rgame_game_playerInGame_local = ReplicateOp_Divide.MarginalInit<Gaussian>(this.performancesForEventsPrimary_F[game][playerInGame]);
								thisDotperformancesForEventsPrimary_rep_F_marginal_Rgame_game_playerInGame_local = ReplicateOp_Divide.Marginal<Gaussian>(this.performancesForEventsPrimary_rep_B_toDef[game][playerInGame], this.performancesForEventsPrimary_F[game][playerInGame], thisDotperformancesForEventsPrimary_rep_F_marginal_Rgame_game_playerInGame_local);
								Gaussian[] thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local2 = default(Gaussian[]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local2 = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_local[playerInGame];
								Gaussian thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_marginal_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_marginal_Rgame_game_playerInGame_local = ReplicateOp_Divide.MarginalInit<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local2[0]);
								Gaussian thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__F_Rgame_game_playerInGame_local = Gaussian.Uniform();
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__F_Rgame_game_playerInGame_local = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__B_Rgame_game_local[playerInGame], thisDotvdouble__304_F_Rgame_game_local, thisDotvdouble__304_F_marginal_Rgame_game_local, thisDotteamIndexOfPlayer_Rgame_game_local, playerInGame, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__F_Rgame_game_playerInGame_local);
								Gaussian[] thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_playerInGame_local2 = default(Gaussian[]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_playerInGame_local2 = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_local[playerInGame];
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local2[0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_playerInGame_local2, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__F_Rgame_game_playerInGame_local, 0, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local2[0]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_marginal_Rgame_game_playerInGame_local = ReplicateOp_Divide.Marginal<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_toDef_Rgame_game_local[playerInGame], thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local2[0], thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_marginal_Rgame_game_playerInGame_local);
								double thisDotminutesPlayed_Rgame_game_playerInGame_local = default(double);
								thisDotminutesPlayed_Rgame_game_playerInGame_local = Factor.Product(thisDotlengthInMinutes_game_local2, thisDotplayerWeights_game_local2[playerInGame]);
								DistributionStructArray<Gaussian,double> thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_playerInGame_local2 = default(DistributionStructArray<Gaussian,double>);
								if (this.eventTypeCount>0) {
									thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_playerInGame_local2 = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_local[playerInGame];
								}
								int thisDotplayerConditionsToLearnInGame_game_playerInGame_local6 = default(int);
								thisDotplayerConditionsToLearnInGame_game_playerInGame_local6 = thisDotplayerConditionsToLearnInGame_game_local2[playerInGame];
								double[] thisDoteventCountsFlat_game_playerInGame_local2 = default(double[]);
								if (this.eventTypeCount>0) {
									if (!this.isExperienced_reduced[game][playerInGame]) {
										thisDoteventCountsFlat_game_playerInGame_local2 = thisDoteventCountsFlat_game_local2[playerInGame];
									}
								}
								for(int eventType = 0; eventType<this.eventTypeCount; eventType++) {
									Gaussian thisDotperformancesForEventsPrimary_rep_F_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotperformancesForEventsPrimary_rep_F_Rgame_game_playerInGame_eventType_local = Gaussian.Uniform();
									thisDotperformancesForEventsPrimary_rep_F_Rgame_game_playerInGame_eventType_local = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.playerPerfCopy_B[game][playerInGame][eventType], thisDotperformancesForEventsPrimary_rep_F_marginal_Rgame_game_playerInGame_local, eventType, thisDotperformancesForEventsPrimary_rep_F_Rgame_game_playerInGame_eventType_local);
									Gaussian thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_Rgame_game_playerInGame_eventType_local = Gaussian.Uniform();
									thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_Rgame_game_playerInGame_eventType_local = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_B_Rgame_game_playerInGame_local2[eventType], thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_marginal_Rgame_game_playerInGame_local, eventType, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_Rgame_game_playerInGame_eventType_local);
									Gaussian thisDotvdouble760_F_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotvdouble760_F_Rgame_game_playerInGame_eventType_local = GaussianProductOp_PointB.ProductAverageConditional(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_Rgame_game_playerInGame_eventType_local, this.EventsPerMinuteEnemyMultiplier_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6][eventType]);
									Gaussian thisDotvdouble757_F_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotvdouble757_F_Rgame_game_playerInGame_eventType_local = GaussianProductOp_PointB.ProductAverageConditional(thisDotperformancesForEventsPrimary_rep_F_Rgame_game_playerInGame_eventType_local, this.EventsPerMinutePerformanceMultiplier_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6][eventType]);
									Gaussian thisDotvdouble758_F_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotvdouble758_F_Rgame_game_playerInGame_eventType_local = DoublePlusOp.SumAverageConditional(this.EventsPerMinuteOffset_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6][eventType], thisDotvdouble757_F_Rgame_game_playerInGame_eventType_local);
									Gaussian thisDotvdouble761_F_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotvdouble761_F_Rgame_game_playerInGame_eventType_local = DoublePlusOp.SumAverageConditional(thisDotvdouble758_F_Rgame_game_playerInGame_eventType_local, thisDotvdouble760_F_Rgame_game_playerInGame_eventType_local);
									Gaussian thisDotEventCountMean_F_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotEventCountMean_F_Rgame_game_playerInGame_eventType_local = GaussianProductOpBase.ProductAverageConditional(thisDotvdouble761_F_Rgame_game_playerInGame_eventType_local, thisDotminutesPlayed_Rgame_game_playerInGame_local);
									Gaussian thisDotEventCountMean_B_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotEventCountMean_B_Rgame_game_playerInGame_eventType_local = Gaussian.Uniform();
									if (!this.isExperienced_reduced[game][playerInGame]) {
										Gaussian thisDotrealCount_F_Rgame_game_playerInGame_eventType_local = default(Gaussian);
										Gamma thisDotEventCountPrecision_F_Rgame_game_playerInGame_eventType_local = default(Gamma);
										thisDotEventCountPrecision_F_Rgame_game_playerInGame_eventType_local = GammaRatioOp.RatioAverageConditional(this.EventsPerMinutePrecision_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6][eventType], thisDotminutesPlayed_Rgame_game_playerInGame_local);
										thisDotrealCount_F_Rgame_game_playerInGame_eventType_local = GaussianOp_PointPrecision.SampleAverageConditional(thisDotEventCountMean_F_Rgame_game_playerInGame_eventType_local, thisDotEventCountPrecision_F_Rgame_game_playerInGame_eventType_local);
										Gaussian thisDotrealCount_use_B_Rgame_game_playerInGame_eventType_local = default(Gaussian);
										thisDotrealCount_use_B_Rgame_game_playerInGame_eventType_local = MaxGaussianOp.BAverageConditional(thisDoteventCountsFlat_game_playerInGame_local2[eventType], 0.0, thisDotrealCount_F_Rgame_game_playerInGame_eventType_local);
										Gaussian thisDotEventCountMean_1__B_Rgame_game_playerInGame_eventType_local = default(Gaussian);
										thisDotEventCountMean_1__B_Rgame_game_playerInGame_eventType_local = GaussianOp_PointPrecision.MeanAverageConditional(thisDotrealCount_use_B_Rgame_game_playerInGame_eventType_local, thisDotEventCountPrecision_F_Rgame_game_playerInGame_eventType_local);
										thisDotEventCountMean_B_Rgame_game_playerInGame_eventType_local = ArrayHelper.SetTo<Gaussian>(thisDotEventCountMean_B_Rgame_game_playerInGame_eventType_local, thisDotEventCountMean_1__B_Rgame_game_playerInGame_eventType_local);
										Gamma thisDotEventCountPrecision_B_Rgame_game_playerInGame_eventType_local = default(Gamma);
										thisDotEventCountPrecision_B_Rgame_game_playerInGame_eventType_local = GaussianOp_PointPrecision.PrecisionAverageConditional(thisDotrealCount_use_B_Rgame_game_playerInGame_eventType_local, thisDotEventCountMean_F_Rgame_game_playerInGame_eventType_local, thisDotEventCountPrecision_F_Rgame_game_playerInGame_eventType_local);
										Gamma thisDotEventsPerMinutePrecision_PlayerConditionsToLearnInGame_game_playerInGame_eventType_1__B_Rgame_game_playerInGame_eventType_local = default(Gamma);
										thisDotEventsPerMinutePrecision_PlayerConditionsToLearnInGame_game_playerInGame_eventType_1__B_Rgame_game_playerInGame_eventType_local = GammaRatioOp.AAverageConditional(thisDotEventCountPrecision_B_Rgame_game_playerInGame_eventType_local, thisDotminutesPlayed_Rgame_game_playerInGame_local);
										this.EventsPerMinutePrecision_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game][playerInGame][eventType] = ArrayHelper.SetTo<Gamma>(this.EventsPerMinutePrecision_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game][playerInGame][eventType], thisDotEventsPerMinutePrecision_PlayerConditionsToLearnInGame_game_playerInGame_eventType_1__B_Rgame_game_playerInGame_eventType_local);
									}
									Gaussian thisDotvdouble761_B_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotvdouble761_B_Rgame_game_playerInGame_eventType_local = GaussianProductOpBase.AAverageConditional(thisDotEventCountMean_B_Rgame_game_playerInGame_eventType_local, thisDotminutesPlayed_Rgame_game_playerInGame_local);
									Gaussian thisDotvdouble758_B_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotvdouble758_B_Rgame_game_playerInGame_eventType_local = DoublePlusOp.AAverageConditional(thisDotvdouble761_B_Rgame_game_playerInGame_eventType_local, thisDotvdouble760_F_Rgame_game_playerInGame_eventType_local);
									Gaussian thisDotvdouble757_B_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotvdouble757_B_Rgame_game_playerInGame_eventType_local = DoublePlusOp.BAverageConditional(thisDotvdouble758_B_Rgame_game_playerInGame_eventType_local, this.EventsPerMinuteOffset_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6][eventType]);
									this.playerPerfCopy_B[game][playerInGame][eventType] = GaussianProductOp_PointB.AAverageConditional(thisDotvdouble757_B_Rgame_game_playerInGame_eventType_local, this.EventsPerMinutePerformanceMultiplier_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6][eventType]);
									Gaussian thisDotvdouble760_B_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotvdouble760_B_Rgame_game_playerInGame_eventType_local = DoublePlusOp.BAverageConditional(thisDotvdouble761_B_Rgame_game_playerInGame_eventType_local, thisDotvdouble758_F_Rgame_game_playerInGame_eventType_local);
									Gaussian thisDotenemyAverage_B_Rgame_game_playerInGame_eventType_local = default(Gaussian);
									thisDotenemyAverage_B_Rgame_game_playerInGame_eventType_local = GaussianProductOp_PointB.AAverageConditional(thisDotvdouble760_B_Rgame_game_playerInGame_eventType_local, this.EventsPerMinuteEnemyMultiplier_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6][eventType]);
									this.enemyAverageCopy_B[game][playerInGame][eventType] = DampBackwardOp.ValueAverageConditional<Gaussian>(thisDotenemyAverage_B_Rgame_game_playerInGame_eventType_local, 0.5, this.enemyAverageCopy_B[game][playerInGame][eventType]);
									this.EventsPerMinutePerformanceMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game][playerInGame][eventType] = GaussianProductOp_PointB.BAverageConditional(thisDotvdouble757_B_Rgame_game_playerInGame_eventType_local, thisDotperformancesForEventsPrimary_rep_F_Rgame_game_playerInGame_eventType_local, this.EventsPerMinutePerformanceMultiplier_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6][eventType]);
									this.EventsPerMinuteOffset_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game][playerInGame][eventType] = DoublePlusOp.AAverageConditional(thisDotvdouble758_B_Rgame_game_playerInGame_eventType_local, thisDotvdouble757_F_Rgame_game_playerInGame_eventType_local);
									this.EventsPerMinuteEnemyMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game][playerInGame][eventType] = GaussianProductOp_PointB.BAverageConditional(thisDotvdouble760_B_Rgame_game_playerInGame_eventType_local, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__rep_F_Rgame_game_playerInGame_eventType_local, this.EventsPerMinuteEnemyMultiplier_marginal_F[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6][eventType]);
								}
								this.performancesForEventsPrimary_rep_B_toDef[game][playerInGame] = ReplicateOp_Divide.ToDef<Gaussian>(this.playerPerfCopy_B[game][playerInGame], this.performancesForEventsPrimary_rep_B_toDef[game][playerInGame]);
								this.performancesForEvents_B[game][playerInGame] = SequentialCopyOp.ValueAverageConditional<Gaussian>(this.performancesForEventsPrimary_rep_B_toDef[game][playerInGame], thisDotperformancesForQuit_B_Rgame_game_playerInGame_local, this.performancesForEvents_B[game][playerInGame]);
								Gaussian thisDotperformances_use_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotperformances_use_B_Rgame_game_playerInGame_local = Gaussian.Uniform();
								thisDotperformances_use_B_Rgame_game_playerInGame_local = SequentialCopyOp.ValueAverageConditional<Gaussian>(thisDotperformancesPrimary_B_Rgame_game_playerInGame_local, this.performancesForEvents_B[game][playerInGame], thisDotperformances_use_B_Rgame_game_playerInGame_local);
								Gaussian thisDotskillInSquad_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotskillInSquad_B_Rgame_game_playerInGame_local = GaussianFromMeanAndVarianceOp.MeanAverageConditional(thisDotperformances_use_B_Rgame_game_playerInGame_local, this.PerformanceVariance);
								Gaussian thisDotskillsPresent_uses_B_Rgame_game_playerInGame__1_local = default(Gaussian);
								thisDotskillsPresent_uses_B_Rgame_game_playerInGame__1_local = thisDotskillsPresent_uses_B_Rgame_game_local[playerInGame][1];
								if (this.playerIsInSquad[game][playerInGame]) {
									Gaussian thisDotskillsPresent_playerInGame_0__B_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotskillsPresent_playerInGame_0__B_Rgame_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotskillInSquad_B_Rgame_game_playerInGame_local, this.squadOffset[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6][thisDotboundedSquadSize_Rgame_game_local[playerInGame]]);
									thisDotskillsPresent_uses_B_Rgame_game_playerInGame__1_local = ArrayHelper.SetTo<Gaussian>(thisDotskillsPresent_uses_B_Rgame_game_playerInGame__1_local, thisDotskillsPresent_playerInGame_0__B_Rgame_game_playerInGame_local);
								}
								if (!this.playerIsInSquad[game][playerInGame]) {
									thisDotskillsPresent_uses_B_Rgame_game_playerInGame__1_local = ArrayHelper.SetTo<Gaussian>(thisDotskillsPresent_uses_B_Rgame_game_playerInGame__1_local, thisDotskillInSquad_B_Rgame_game_playerInGame_local);
								}
								thisDotskillsPresent_uses_B_Rgame_game_local[playerInGame][1] = thisDotskillsPresent_uses_B_Rgame_game_playerInGame__1_local;
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local2[1] = Gaussian.Uniform();
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local2[1] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_B_Rgame_game_playerInGame_local2, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__F_Rgame_game_playerInGame_local, 1, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local2[1]);
								Gaussian thisDotperformancesForQuit_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotperformancesForQuit_F_Rgame_game_playerInGame_local = thisDotperformancesForQuit_F_Rgame_game_local[playerInGame];
								thisDotperformancesForQuit_F_Rgame_game_playerInGame_local = SequentialCopyOp.SecondAverageConditional<Gaussian>(thisDotperformancesForEvents_F_Rgame_game_playerInGame_local, this.performancesForEventsPrimary_rep_B_toDef[game][playerInGame], thisDotperformancesForQuit_F_Rgame_game_playerInGame_local);
								thisDotperformancesForEvents_F_Rgame_game_local[playerInGame] = thisDotperformancesForEvents_F_Rgame_game_playerInGame_local;
								Gaussian thisDotperformanceAdvantage_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotperformanceAdvantage_F_Rgame_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotperformancesForQuit_F_Rgame_game_playerInGame_local, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local2[1]);
								Gaussian thisDotvdouble777_F_Rgame_game_playerInGame_local = default(Gaussian);
								double thisDotquitThreshold_thisDotplayerConditionsToLearnInGame_game_playerInGame_local2 = default(double);
								thisDotquitThreshold_thisDotplayerConditionsToLearnInGame_game_playerInGame_local2 = this.quitThreshold[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6];
								thisDotvdouble777_F_Rgame_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotquitThreshold_thisDotplayerConditionsToLearnInGame_game_playerInGame_local2, thisDotperformanceAdvantage_F_Rgame_game_playerInGame_local);
								Gaussian thisDotperformanceUnderThreshold_F_Rgame_game_playerInGame_local = default(Gaussian);
								double thisDotquitThresholdPrecision_thisDotplayerConditionsToLearnInGame_game_playerInGame_local2 = default(double);
								thisDotquitThresholdPrecision_thisDotplayerConditionsToLearnInGame_game_playerInGame_local2 = this.quitThresholdPrecision[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6];
								thisDotperformanceUnderThreshold_F_Rgame_game_playerInGame_local = GaussianOpBase.SampleAverageConditional(thisDotvdouble777_F_Rgame_game_playerInGame_local, thisDotquitThresholdPrecision_thisDotplayerConditionsToLearnInGame_game_playerInGame_local2);
								Bernoulli thisDotquit_F_Rgame_game_playerInGame_local = default(Bernoulli);
								thisDotquit_F_Rgame_game_playerInGame_local = BernoulliFromBetaOp.SampleAverageConditional(this.quitProbability[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6]);
								Bernoulli thisDotdrop_F_Rgame_game_playerInGame_local = default(Bernoulli);
								thisDotdrop_F_Rgame_game_playerInGame_local = BernoulliFromBetaOp.SampleAverageConditional(this.disconnectProbability[thisDotplayerConditionsToLearnInGame_game_playerInGame_local6]);
								Bernoulli thisDotvbool70_B_Rgame_game_playerInGame_local = default(Bernoulli);
								thisDotvbool70_B_Rgame_game_playerInGame_local = BooleanOrOp.BAverageConditional(thisDotplayerQuitInGameFlat_game_local2[playerInGame], thisDotdrop_F_Rgame_game_playerInGame_local);
								Bernoulli thisDotlowPerformance_B_Rgame_game_playerInGame_local = default(Bernoulli);
								thisDotlowPerformance_B_Rgame_game_playerInGame_local = BooleanAndOp.BAverageConditional(thisDotvbool70_B_Rgame_game_playerInGame_local, thisDotquit_F_Rgame_game_playerInGame_local);
								Gaussian thisDotperformanceUnderThreshold_use_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotperformanceUnderThreshold_use_B_Rgame_game_playerInGame_local = IsPositiveOp_Proper.XAverageConditional(thisDotlowPerformance_B_Rgame_game_playerInGame_local, thisDotperformanceUnderThreshold_F_Rgame_game_playerInGame_local);
								Gaussian thisDotvdouble777_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotvdouble777_B_Rgame_game_playerInGame_local = GaussianOpBase.MeanAverageConditional(thisDotperformanceUnderThreshold_use_B_Rgame_game_playerInGame_local, thisDotquitThresholdPrecision_thisDotplayerConditionsToLearnInGame_game_playerInGame_local2);
								Gaussian thisDotperformanceAdvantage_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotperformanceAdvantage_B_Rgame_game_playerInGame_local = DoublePlusOp.BAverageConditional(thisDotquitThreshold_thisDotplayerConditionsToLearnInGame_game_playerInGame_local2, thisDotvdouble777_B_Rgame_game_playerInGame_local);
								this.playerPerfQuit_B[game][playerInGame] = DoublePlusOp.SumAverageConditional(thisDotperformanceAdvantage_B_Rgame_game_playerInGame_local, thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local2[1]);
								thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_local[playerInGame] = thisDotvdouble__304_itemteamIndexOfPlayer_game__playerInGame__uses_F_Rgame_game_playerInGame_local2;
								this.enemyAverageQuit_B[game][playerInGame] = DoublePlusOp.BAverageConditional(thisDotperformancesForQuit_F_Rgame_game_playerInGame_local, thisDotperformanceAdvantage_B_Rgame_game_playerInGame_local);
								thisDotperformancesForQuit_F_Rgame_game_local[playerInGame] = thisDotperformancesForQuit_F_Rgame_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotskillsPresent_B_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillsPresent_B_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int _iv5 = 0; _iv5<this.playerCountInGame[game]; _iv5++) {
								Gaussian thisDotskillsPresent_B_Rgame_game__iv5_local = default(Gaussian);
								thisDotskillsPresent_B_Rgame_game__iv5_local = Gaussian.Uniform();
								Gaussian[] thisDotskillsPresent_uses_B_Rgame_game__iv5_local2 = default(Gaussian[]);
								thisDotskillsPresent_uses_B_Rgame_game__iv5_local2 = thisDotskillsPresent_uses_B_Rgame_game_local[_iv5];
								thisDotskillsPresent_B_Rgame_game__iv5_local = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(thisDotskillsPresent_uses_B_Rgame_game__iv5_local2, thisDotskillsPresent_B_Rgame_game__iv5_local);
								thisDotskillsPresent_B_Rgame_game_local[_iv5] = thisDotskillsPresent_B_Rgame_game__iv5_local;
								thisDotskillsPresent_uses_F_Rgame_game_local[_iv5][0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotskillsPresent_uses_B_Rgame_game__iv5_local2, thisDotskillsPresent_F_Rgame_game_local[_iv5], 0, thisDotskillsPresent_uses_F_Rgame_game_local[_iv5][0]);
							}
							DistributionStructArray<Gaussian,double> thisDotskillsPast_B_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillsPast_B_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
							for(int _iv6 = 0; _iv6<this.playerCountInGame[game]; _iv6++) {
								thisDotskillsPast_B_Rgame_game_local[_iv6] = Gaussian.Uniform();
							}
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotpredictedSkill2_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotpredictedSkill2_B_Rgame_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotskillsPresent_uses_F_Rgame_game_local[playerInGame][0], thisDotvdouble638_F_Rgame_game_local[playerInGame]);
								bool thisDotnoExperienceLastGameInConditions_game_playerInGame_local4 = default(bool);
								thisDotnoExperienceLastGameInConditions_game_playerInGame_local4 = thisDotnoExperienceLastGameInConditions_game_local2[playerInGame];
								Gaussian thisDotskillsPast_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotskillsPast_B_Rgame_game_playerInGame_local = thisDotskillsPast_B_Rgame_game_local[playerInGame];
								if (thisDotnoExperienceLastGameInConditions_game_playerInGame_local4) {
									thisDotskillsPast_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotskillsPast_B_Rgame_game_playerInGame_local, thisDotpredictedSkill2_B_Rgame_game_playerInGame_local);
								}
								if (!thisDotnoExperienceLastGameInConditions_game_playerInGame_local4) {
									Gaussian thisDotvdouble617_B_Rgame_game_playerInGame_local = default(Gaussian);
									int thisDotplayerConditionsToLearnInGame_game_playerInGame_local7 = default(int);
									thisDotplayerConditionsToLearnInGame_game_playerInGame_local7 = thisDotplayerConditionsToLearnInGame_game_local2[playerInGame];
									thisDotvdouble617_B_Rgame_game_playerInGame_local = GaussianOpBase.MeanAverageConditional(thisDotpredictedSkill2_B_Rgame_game_playerInGame_local, this.skillOffsetChangePrecisionPerGame[thisDotplayerConditionsToLearnInGame_game_playerInGame_local7]);
									Gaussian thisDotpredictedSkill1_use_B_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotpredictedSkill1_use_B_Rgame_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotvdouble617_B_Rgame_game_playerInGame_local, this.skillOffsetChangeMeanByExperience[thisDotplayerConditionsToLearnInGame_game_playerInGame_local7][thisDotboundedExperienceForConditions_Rgame_game_local[playerInGame]]);
									Gaussian thisDotskillsPast_playerInGame_1__B_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotskillsPast_playerInGame_1__B_Rgame_game_playerInGame_local = GaussianOpBase.MeanAverageConditional(thisDotpredictedSkill1_use_B_Rgame_game_playerInGame_local, thisDotoffsetChangePrecisionByTime_Rgame_game_local[playerInGame]);
									thisDotskillsPast_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotskillsPast_B_Rgame_game_playerInGame_local, thisDotskillsPast_playerInGame_1__B_Rgame_game_playerInGame_local);
								}
								thisDotskillsPast_B_Rgame_game_local[playerInGame] = thisDotskillsPast_B_Rgame_game_playerInGame_local;
							}
							DistributionStructArray<Gaussian,double> thisDotskillsPastAndPresent_B_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotskillsPastAndPresent_B_Rgame_game_local = new DistributionStructArray<Gaussian,double>(this.offsetVariableCountInGame[game]);
							for(int _iv4 = 0; _iv4<this.offsetVariableCountInGame[game]; _iv4++) {
								thisDotskillsPastAndPresent_B_Rgame_game_local[_iv4] = Gaussian.Uniform();
							}
							thisDotskillsPastAndPresent_B_Rgame_game_local = SplitOp<double>.ArrayAverageConditional(thisDotskillsPast_B_Rgame_game_local, this.playerCountInGame[game], thisDotskillsPresent_B_Rgame_game_local, thisDotskillsPastAndPresent_B_Rgame_game_local);
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotupdateChanges_B_Rgame_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotupdateChanges_B_Rgame_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								int thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local4 = default(int);
								thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local4 = thisDotupdateChangeVariableSubarrayCountInGame_game_local2[playerInGame];
								DistributionStructArray<Gaussian,double> thisDotupdateChanges_B_Rgame_game_playerInGame_local = default(DistributionStructArray<Gaussian,double>);
								thisDotupdateChanges_B_Rgame_game_playerInGame_local = new DistributionStructArray<Gaussian,double>(thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local4);
								for(int index47 = 0; index47<thisDotupdateChangeVariableSubarrayCountInGame_game_playerInGame_local4; index47++) {
									thisDotupdateChanges_B_Rgame_game_playerInGame_local[index47] = Gaussian.Uniform();
								}
								thisDotupdateChanges_B_Rgame_game_local[playerInGame] = thisDotupdateChanges_B_Rgame_game_playerInGame_local;
							}
							DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> thisDotpreviousChanges_B_Rgame_game_local = default(DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>);
							thisDotpreviousChanges_B_Rgame_game_local = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
							for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
								Gaussian thisDotvdouble638_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotvdouble638_B_Rgame_game_playerInGame_local = DoublePlusOp.BAverageConditional(thisDotskillsPresent_uses_F_Rgame_game_local[playerInGame][0], thisDotpredictedSkill2_F_Rgame_game_local[playerInGame]);
								Gaussian thisDotbaseSkillChangeSinceLastGame_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotbaseSkillChangeSinceLastGame_B_Rgame_game_playerInGame_local = GaussianProductOpBase.AAverageConditional(thisDotvdouble638_B_Rgame_game_playerInGame_local, this.baseSkillWeights[thisDotplayerConditionsToLearnInGame_game_local2[playerInGame]]);
								Gaussian thisDotvdouble622_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotvdouble622_B_Rgame_game_playerInGame_local = Gaussian.Uniform();
								int thisDotupdateChangeVariableCountInGame_game_playerInGame_local9 = default(int);
								thisDotupdateChangeVariableCountInGame_game_playerInGame_local9 = thisDotupdateChangeVariableCountInGame_game_local2[playerInGame];
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==0) {
									thisDotvdouble622_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotvdouble622_B_Rgame_game_playerInGame_local, thisDotbaseSkillChangeSinceLastGame_B_Rgame_game_playerInGame_local);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==1) {
									thisDotvdouble622_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotvdouble622_B_Rgame_game_playerInGame_local, thisDotbaseSkillChangeSinceLastGame_B_Rgame_game_playerInGame_local);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==2) {
									thisDotvdouble622_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotvdouble622_B_Rgame_game_playerInGame_local, thisDotbaseSkillChangeSinceLastGame_B_Rgame_game_playerInGame_local);
								}
								Gaussian[] thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame_local = default(Gaussian[]);
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==4) {
									Gaussian thisDotvdouble622_4__B_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame_local = thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_local[playerInGame];
									thisDotvdouble622_4__B_Rgame_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotbaseSkillChangeSinceLastGame_B_Rgame_game_playerInGame_local, thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame_local[1]);
									thisDotvdouble622_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotvdouble622_B_Rgame_game_playerInGame_local, thisDotvdouble622_4__B_Rgame_game_playerInGame_local);
								}
								Gaussian thisDotvdouble621_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotvdouble621_B_Rgame_game_playerInGame_local = DoublePlusOp.BAverageConditional(thisDotvdouble622_B_Rgame_game_playerInGame_local, thisDotbaseSkillChangePrimary_F_Rgame_game_local[playerInGame]);
								int thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local4 = default(int);
								thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local4 = thisDotpreviousChangeVariableSubarrayCountInGame_game_local2[playerInGame];
								DistributionStructArray<Gaussian,double> thisDotpreviousChanges_B_Rgame_game_playerInGame_local = default(DistributionStructArray<Gaussian,double>);
								thisDotpreviousChanges_B_Rgame_game_playerInGame_local = new DistributionStructArray<Gaussian,double>(thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local4);
								for(int index46 = 0; index46<thisDotpreviousChangeVariableSubarrayCountInGame_game_playerInGame_local4; index46++) {
									thisDotpreviousChanges_B_Rgame_game_playerInGame_local[index46] = Gaussian.Uniform();
								}
								Gaussian thisDotvdouble621_F_Rgame_game_playerInGame_local2 = default(Gaussian);
								thisDotvdouble621_F_Rgame_game_playerInGame_local2 = thisDotvdouble621_F_Rgame_game_local[playerInGame];
								thisDotpreviousChanges_B_Rgame_game_playerInGame_local = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(thisDotvdouble621_B_Rgame_game_playerInGame_local, thisDotvdouble621_F_Rgame_game_playerInGame_local2, thisDotpreviousChanges_F_Rgame_game_local[playerInGame], thisDotpreviousChanges_B_Rgame_game_playerInGame_local);
								thisDotpreviousChanges_B_Rgame_game_local[playerInGame] = thisDotpreviousChanges_B_Rgame_game_playerInGame_local;
								Gaussian thisDotbaseSkillChangePrimary_B_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotbaseSkillChangePrimary_B_Rgame_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotvdouble622_B_Rgame_game_playerInGame_local, thisDotvdouble621_F_Rgame_game_playerInGame_local2);
								Gaussian thisDotbaseSkillChangeSecondary_F_Rgame_game_playerInGame_local = default(Gaussian);
								thisDotbaseSkillChangeSecondary_F_Rgame_game_playerInGame_local = Gaussian.Uniform();
								thisDotbaseSkillChangeSecondary_F_Rgame_game_playerInGame_local = SequentialCopyOp.SecondAverageConditional<Gaussian>(thisDotbaseSkillChange_F_Rgame_game_local[playerInGame], thisDotbaseSkillChangePrimary_B_Rgame_game_playerInGame_local, thisDotbaseSkillChangeSecondary_F_Rgame_game_playerInGame_local);
								Gaussian thisDotupdateChanges_item0_B_Rgame_game_playerInGame_local = default(Gaussian);
								if (((thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==1)||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==2))||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==4)) {
									thisDotupdateChanges_item0_B_Rgame_game_playerInGame_local = Gaussian.Uniform();
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==1) {
									thisDotupdateChanges_item0_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item0_B_Rgame_game_playerInGame_local, thisDotbaseSkillChangeSecondary_F_Rgame_game_playerInGame_local);
								}
								Gaussian thisDotupdateChanges_item1_F_Rgame_game_playerInGame_local2 = default(Gaussian);
								thisDotupdateChanges_item1_F_Rgame_game_playerInGame_local2 = thisDotupdateChanges_item1_F_Rgame_game_local[playerInGame];
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==2) {
									Gaussian thisDotupdateChanges_playerInGame_0_2__B_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotupdateChanges_playerInGame_0_2__B_Rgame_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotupdateChanges_item1_F_Rgame_game_playerInGame_local2, thisDotbaseSkillChangeSecondary_F_Rgame_game_playerInGame_local);
									thisDotupdateChanges_item0_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item0_B_Rgame_game_playerInGame_local, thisDotupdateChanges_playerInGame_0_2__B_Rgame_game_playerInGame_local);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==4) {
									thisDotupdateChanges_item0_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item0_B_Rgame_game_playerInGame_local, thisDotbaseSkillChangeSecondary_F_Rgame_game_playerInGame_local);
								}
								DistributionStructArray<Gaussian,double> thisDotupdateChanges_B_Rgame_game_playerInGame_local2 = default(DistributionStructArray<Gaussian,double>);
								thisDotupdateChanges_B_Rgame_game_playerInGame_local2 = thisDotupdateChanges_B_Rgame_game_local[playerInGame];
								if (((thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==1)||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==2))||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==4)) {
									thisDotupdateChanges_B_Rgame_game_playerInGame_local2[0] = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_B_Rgame_game_playerInGame_local2[0], thisDotupdateChanges_item0_B_Rgame_game_playerInGame_local);
								}
								Gaussian thisDotupdateChanges_item1_B_Rgame_game_playerInGame_local = default(Gaussian);
								if ((thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==2)||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==4)) {
									thisDotupdateChanges_item1_B_Rgame_game_playerInGame_local = Gaussian.Uniform();
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==2) {
									Gaussian thisDotvdouble629_F_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotvdouble629_F_Rgame_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotupdateChanges_item0_F_Rgame_game_local[playerInGame], thisDotbaseSkillChangeSecondary_F_Rgame_game_playerInGame_local);
									thisDotupdateChanges_item1_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item1_B_Rgame_game_playerInGame_local, thisDotvdouble629_F_Rgame_game_playerInGame_local);
								}
								if (thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==4) {
									Gaussian[] thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_playerInGame_local2 = default(Gaussian[]);
									thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_playerInGame_local2 = thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_local[playerInGame];
									thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_playerInGame_local2[1] = DoublePlusOp.BAverageConditional(thisDotbaseSkillChangeSinceLastGame_B_Rgame_game_playerInGame_local, thisDotvdouble622_F_Rgame_game_local[playerInGame]);
									Gaussian thisDotupdateChanges_playerInGame_1_4__B_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotupdateChanges_playerInGame_1_4__B_Rgame_game_playerInGame_local = Gaussian.Uniform();
									thisDotupdateChanges_playerInGame_1_4__B_Rgame_game_playerInGame_local = ReplicateOp_NoDivide.DefAverageConditional<Gaussian>(thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_playerInGame_local2, thisDotupdateChanges_playerInGame_1_4__B_Rgame_game_playerInGame_local);
									thisDotupdateChanges_item1_B_Rgame_game_playerInGame_local = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_item1_B_Rgame_game_playerInGame_local, thisDotupdateChanges_playerInGame_1_4__B_Rgame_game_playerInGame_local);
									thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame_local[0] = Gaussian.Uniform();
									thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame_local[0] = ReplicateOp_NoDivide.UsesAverageConditional<Gaussian>(thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_playerInGame_local2, thisDotupdateChanges_item1_F_Rgame_game_playerInGame_local2, 0, thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame_local[0]);
									thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_local[playerInGame] = thisDotupdateChanges_playerInGame_1_4__uses_B_Rgame_game_playerInGame_local2;
									Gaussian thisDotupdateChanges_playerInGame_2_4__B_Rgame_game_playerInGame_local = default(Gaussian);
									DistributionStructArray<Gaussian,double> thisDotupdateChanges_F_Rgame_game_playerInGame_local3 = default(DistributionStructArray<Gaussian,double>);
									thisDotupdateChanges_F_Rgame_game_playerInGame_local3 = thisDotupdateChanges_F_Rgame_game_local[playerInGame];
									thisDotupdateChanges_playerInGame_2_4__B_Rgame_game_playerInGame_local = DoublePlusOp.AAverageConditional(thisDotupdateChanges_F_Rgame_game_playerInGame_local3[3], thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame_local[0]);
									thisDotupdateChanges_B_Rgame_game_playerInGame_local2[2] = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_B_Rgame_game_playerInGame_local2[2], thisDotupdateChanges_playerInGame_2_4__B_Rgame_game_playerInGame_local);
									Gaussian thisDotvdouble635_F_Rgame_game_playerInGame_local = default(Gaussian);
									thisDotvdouble635_F_Rgame_game_playerInGame_local = DoublePlusOp.SumAverageConditional(thisDotupdateChanges_F_Rgame_game_playerInGame_local3[2], thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame_local[0]);
									thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_local[playerInGame] = thisDotupdateChanges_playerInGame_1_4__uses_F_Rgame_game_playerInGame_local;
									thisDotupdateChanges_B_Rgame_game_playerInGame_local2[3] = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_B_Rgame_game_playerInGame_local2[3], thisDotvdouble635_F_Rgame_game_playerInGame_local);
								}
								if ((thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==2)||(thisDotupdateChangeVariableCountInGame_game_playerInGame_local9==4)) {
									thisDotupdateChanges_B_Rgame_game_playerInGame_local2[1] = ArrayHelper.SetTo<Gaussian>(thisDotupdateChanges_B_Rgame_game_playerInGame_local2[1], thisDotupdateChanges_item1_B_Rgame_game_playerInGame_local);
								}
								thisDotupdateChanges_B_Rgame_game_local[playerInGame] = thisDotupdateChanges_B_Rgame_game_playerInGame_local2;
							}
							DistributionStructArray<Gaussian,double> thisDotpreviousSubarray_B_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotpreviousSubarray_B_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotpreviousSubarrayChangeVariableCountInGame_game_local2);
							for(int _iv8 = 0; _iv8<thisDotpreviousSubarrayChangeVariableCountInGame_game_local2; _iv8++) {
								thisDotpreviousSubarray_B_Rgame_game_local[_iv8] = Gaussian.Uniform();
							}
							thisDotpreviousSubarray_B_Rgame_game_local = SplitSubarrayOp<double>.ArrayAverageConditional(thisDotpreviousChanges_B_Rgame_game_local, thisDotpreviousChangeVariableSubarrayIndexInGame_game_local2, thisDotpreviousSubarray_B_Rgame_game_local);
							DistributionStructArray<Gaussian,double> thisDotupdateSubarray_B_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotupdateSubarray_B_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotupdateSubarrayChangeVariableCountInGame_game_local2);
							for(int _iv7 = 0; _iv7<thisDotupdateSubarrayChangeVariableCountInGame_game_local2; _iv7++) {
								thisDotupdateSubarray_B_Rgame_game_local[_iv7] = Gaussian.Uniform();
							}
							thisDotupdateSubarray_B_Rgame_game_local = SplitSubarrayOp<double>.ArrayAverageConditional(thisDotupdateChanges_B_Rgame_game_local, thisDotupdateChangeVariableSubarrayIndexInGame_game_local2, thisDotupdateSubarray_B_Rgame_game_local);
							DistributionStructArray<Gaussian,double> thisDotbaseSkillChangesInGame_B_Rgame_game_local = default(DistributionStructArray<Gaussian,double>);
							thisDotbaseSkillChangesInGame_B_Rgame_game_local = new DistributionStructArray<Gaussian,double>(thisDotsubarrayChangeVariableCountInGame_game_local2);
							for(int _iv3 = 0; _iv3<thisDotsubarrayChangeVariableCountInGame_game_local2; _iv3++) {
								thisDotbaseSkillChangesInGame_B_Rgame_game_local[_iv3] = Gaussian.Uniform();
							}
							thisDotbaseSkillChangesInGame_B_Rgame_game_local = SplitOp<double>.ArrayAverageConditional(thisDotpreviousSubarray_B_Rgame_game_local, thisDotpreviousSubarrayChangeVariableCountInGame_game_local2, thisDotupdateSubarray_B_Rgame_game_local, thisDotbaseSkillChangesInGame_B_Rgame_game_local);
							this.combinedVariables_B[game] = SplitOp<double>.ArrayAverageConditional(thisDotskillsPastAndPresent_B_Rgame_game_local, this.offsetVariableCountInGame[game], thisDotbaseSkillChangesInGame_B_Rgame_game_local, this.combinedVariables_B[game]);
							this.skillInConditions_marginal_F = JaggedSubarrayWithMarginalOp<double>.MarginalIncrementItems(this.combinedVariables_B[game], thisDotskillInConditions_CombinedVariableIndexInGame_F_Rgame_game_local, this.combinedVariableIndexInGame, game, this.skillInConditions_marginal_F);
						}
					});
				}
				this.EventsPerMinuteEnemyMultiplier_depth0_B = GetJaggedItemsOp<double[]>.ArrayAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.EventsPerMinuteEnemyMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B, this.playerConditionsToLearnInGame, this.EventsPerMinuteEnemyMultiplier_depth0_B);
				this.EventsPerMinutePerformanceMultiplier_depth0_B = GetJaggedItemsOp<double[]>.ArrayAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.EventsPerMinutePerformanceMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B, this.playerConditionsToLearnInGame, this.EventsPerMinutePerformanceMultiplier_depth0_B);
				this.EventsPerMinuteOffset_depth0_B = GetJaggedItemsOp<double[]>.ArrayAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.EventsPerMinuteOffset_itemPlayerConditionsToLearnInGame_game__playerInGame__B, this.playerConditionsToLearnInGame, this.EventsPerMinuteOffset_depth0_B);
				Parallel.For(0, this.eventTypeCount, delegate(int eventType) {
					for(int playerConditions = 0; playerConditions<this.playerConditionsCount; playerConditions++) {
						Gaussian thisDotEventsPerMinutePerformanceMultiplier_F_playerConditions_eventType_local = default(Gaussian);
						Gaussian[] thisDotEventsPerMinutePerformanceMultiplier_uses_B_playerConditions_eventType_local = default(Gaussian[]);
						thisDotEventsPerMinutePerformanceMultiplier_uses_B_playerConditions_eventType_local = new Gaussian[2];
						thisDotEventsPerMinutePerformanceMultiplier_uses_B_playerConditions_eventType_local[0] = Gaussian.Uniform();
						Gaussian thisDotEventsPerMinuteOffset_F_playerConditions_eventType_local = default(Gaussian);
						Gaussian[] thisDotEventsPerMinuteOffset_uses_B_playerConditions_eventType_local = default(Gaussian[]);
						thisDotEventsPerMinuteOffset_uses_B_playerConditions_eventType_local = new Gaussian[2];
						thisDotEventsPerMinuteOffset_uses_B_playerConditions_eventType_local[0] = Gaussian.Uniform();
						Gaussian thisDotEventsPerMinuteEnemyMultiplier_F_playerConditions_eventType_local = default(Gaussian);
						Gaussian[] thisDotEventsPerMinuteEnemyMultiplier_uses_B_playerConditions_eventType_local = default(Gaussian[]);
						thisDotEventsPerMinuteEnemyMultiplier_uses_B_playerConditions_eventType_local = new Gaussian[2];
						thisDotEventsPerMinuteEnemyMultiplier_uses_B_playerConditions_eventType_local[0] = Gaussian.Uniform();
						thisDotEventsPerMinuteEnemyMultiplier_uses_B_playerConditions_eventType_local[1] = Gaussian.Uniform();
						Gaussian thisDotEventsPerMinuteEnemyMultiplier_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local = default(Gaussian);
						thisDotEventsPerMinuteEnemyMultiplier_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local = ReplicatePointOp.ToDefInit<Gaussian>(this.EventsPerMinuteEnemyMultiplier_marginal_F[playerConditions][eventType]);
						thisDotEventsPerMinuteOffset_uses_B_playerConditions_eventType_local[1] = Gaussian.Uniform();
						Gaussian thisDotEventsPerMinuteOffset_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local = default(Gaussian);
						thisDotEventsPerMinuteOffset_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local = ReplicatePointOp.ToDefInit<Gaussian>(this.EventsPerMinuteOffset_marginal_F[playerConditions][eventType]);
						thisDotEventsPerMinutePerformanceMultiplier_uses_B_playerConditions_eventType_local[1] = Gaussian.Uniform();
						Gaussian thisDotEventsPerMinutePerformanceMultiplier_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local = default(Gaussian);
						thisDotEventsPerMinutePerformanceMultiplier_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local = ReplicatePointOp.ToDefInit<Gaussian>(this.EventsPerMinutePerformanceMultiplier_marginal_F[playerConditions][eventType]);
						this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][0] = GaussianOp.PrecisionAverageConditional(this.EventsPerMinutePerformanceMultiplier_marginal_F[playerConditions][eventType], Gaussian.PointMass(0.0), this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][0]);
						this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][2] = GaussianOp.PrecisionAverageConditional(this.EventsPerMinuteEnemyMultiplier_marginal_F[playerConditions][eventType], Gaussian.PointMass(0.0), this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][2]);
						this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][1] = GaussianOp.PrecisionAverageConditional(this.EventsPerMinuteOffset_marginal_F[playerConditions][eventType], Gaussian.PointMass(0.0), this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][1]);
						this.eventsPerMinutePriorPrecision_uses_B_playerConditions__eventType__toDef[playerConditions][eventType] = ReplicateOp_Divide.ToDef<Gamma>(this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType], this.eventsPerMinutePriorPrecision_uses_B_playerConditions__eventType__toDef[playerConditions][eventType]);
						thisDotEventsPerMinutePerformanceMultiplier_uses_B_playerConditions_eventType_local[1] = ArrayHelper.SetTo<Gaussian>(thisDotEventsPerMinutePerformanceMultiplier_uses_B_playerConditions_eventType_local[1], this.EventsPerMinutePerformanceMultiplier_depth0_B[playerConditions][eventType]);
						thisDotEventsPerMinutePerformanceMultiplier_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local = ReplicatePointOp.ToDef<Gaussian>(thisDotEventsPerMinutePerformanceMultiplier_uses_B_playerConditions_eventType_local, thisDotEventsPerMinutePerformanceMultiplier_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local);
						this.eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal[playerConditions][eventType] = ReplicateOp_Divide.Marginal<Gamma>(this.eventsPerMinutePriorPrecision_uses_B_playerConditions__eventType__toDef[playerConditions][eventType], this.eventsPerMinutePriorPrecision_F_reduced, this.eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal[playerConditions][eventType]);
						this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][0] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][0], this.eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal[playerConditions][eventType], 0, this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][0]);
						thisDotEventsPerMinutePerformanceMultiplier_F_playerConditions_eventType_local = GaussianOp.SampleAverageConditional(this.EventsPerMinutePerformanceMultiplier_marginal_F[playerConditions][eventType], 0.0, this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][0], this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][0]);
						this.EventsPerMinutePerformanceMultiplier_use_B_playerConditions__eventType__buffer[playerConditions][eventType] = VariablePointOp_Rprop.Buffer(thisDotEventsPerMinutePerformanceMultiplier_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local, thisDotEventsPerMinutePerformanceMultiplier_F_playerConditions_eventType_local, this.EventsPerMinutePerformanceMultiplier_marginal_F[playerConditions][eventType], this.EventsPerMinutePerformanceMultiplier_use_B_playerConditions__eventType__buffer[playerConditions][eventType]);
						this.EventsPerMinutePerformanceMultiplier_marginal_F[playerConditions][eventType] = VariablePointOp_Rprop.MarginalAverageConditional(thisDotEventsPerMinutePerformanceMultiplier_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local, thisDotEventsPerMinutePerformanceMultiplier_F_playerConditions_eventType_local, this.EventsPerMinutePerformanceMultiplier_use_B_playerConditions__eventType__buffer[playerConditions][eventType], this.EventsPerMinutePerformanceMultiplier_marginal_F[playerConditions][eventType]);
						thisDotEventsPerMinuteOffset_uses_B_playerConditions_eventType_local[1] = ArrayHelper.SetTo<Gaussian>(thisDotEventsPerMinuteOffset_uses_B_playerConditions_eventType_local[1], this.EventsPerMinuteOffset_depth0_B[playerConditions][eventType]);
						thisDotEventsPerMinuteOffset_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local = ReplicatePointOp.ToDef<Gaussian>(thisDotEventsPerMinuteOffset_uses_B_playerConditions_eventType_local, thisDotEventsPerMinuteOffset_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local);
						this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][1] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][1], this.eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal[playerConditions][eventType], 1, this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][1]);
						thisDotEventsPerMinuteOffset_F_playerConditions_eventType_local = GaussianOp.SampleAverageConditional(this.EventsPerMinuteOffset_marginal_F[playerConditions][eventType], 0.0, this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][1], this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][1]);
						this.EventsPerMinuteOffset_use_B_playerConditions__eventType__buffer[playerConditions][eventType] = VariablePointOp_Rprop.Buffer(thisDotEventsPerMinuteOffset_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local, thisDotEventsPerMinuteOffset_F_playerConditions_eventType_local, this.EventsPerMinuteOffset_marginal_F[playerConditions][eventType], this.EventsPerMinuteOffset_use_B_playerConditions__eventType__buffer[playerConditions][eventType]);
						this.EventsPerMinuteOffset_marginal_F[playerConditions][eventType] = VariablePointOp_Rprop.MarginalAverageConditional(thisDotEventsPerMinuteOffset_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local, thisDotEventsPerMinuteOffset_F_playerConditions_eventType_local, this.EventsPerMinuteOffset_use_B_playerConditions__eventType__buffer[playerConditions][eventType], this.EventsPerMinuteOffset_marginal_F[playerConditions][eventType]);
						thisDotEventsPerMinuteEnemyMultiplier_uses_B_playerConditions_eventType_local[1] = ArrayHelper.SetTo<Gaussian>(thisDotEventsPerMinuteEnemyMultiplier_uses_B_playerConditions_eventType_local[1], this.EventsPerMinuteEnemyMultiplier_depth0_B[playerConditions][eventType]);
						thisDotEventsPerMinuteEnemyMultiplier_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local = ReplicatePointOp.ToDef<Gaussian>(thisDotEventsPerMinuteEnemyMultiplier_uses_B_playerConditions_eventType_local, thisDotEventsPerMinuteEnemyMultiplier_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local);
						this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][2] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][2], this.eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal[playerConditions][eventType], 2, this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][2]);
						thisDotEventsPerMinuteEnemyMultiplier_F_playerConditions_eventType_local = GaussianOp.SampleAverageConditional(this.EventsPerMinuteEnemyMultiplier_marginal_F[playerConditions][eventType], 0.0, this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][2], this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][2]);
						this.EventsPerMinuteEnemyMultiplier_use_B_playerConditions__eventType__buffer[playerConditions][eventType] = VariablePointOp_Rprop.Buffer(thisDotEventsPerMinuteEnemyMultiplier_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local, thisDotEventsPerMinuteEnemyMultiplier_F_playerConditions_eventType_local, this.EventsPerMinuteEnemyMultiplier_marginal_F[playerConditions][eventType], this.EventsPerMinuteEnemyMultiplier_use_B_playerConditions__eventType__buffer[playerConditions][eventType]);
						this.EventsPerMinuteEnemyMultiplier_marginal_F[playerConditions][eventType] = VariablePointOp_Rprop.MarginalAverageConditional(thisDotEventsPerMinuteEnemyMultiplier_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local, thisDotEventsPerMinuteEnemyMultiplier_F_playerConditions_eventType_local, this.EventsPerMinuteEnemyMultiplier_use_B_playerConditions__eventType__buffer[playerConditions][eventType], this.EventsPerMinuteEnemyMultiplier_marginal_F[playerConditions][eventType]);
					}
				});
				this.eventsPerMinutePrecisionRate_F_reduced = default(Gamma);
				if (this.playerConditionsCount>0) {
					if (this.eventTypeCount>0) {
						this.eventsPerMinutePrecisionRate_F_reduced = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
					}
				}
				this.EventsPerMinutePrecision_depth0_B = GetJaggedItemsOp<double[]>.ArrayAverageConditional<DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>,DistributionStructArray<Gamma,double>,DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>>(this.EventsPerMinutePrecision_itemPlayerConditionsToLearnInGame_game__playerInGame__B, this.playerConditionsToLearnInGame, this.EventsPerMinutePrecision_depth0_B);
				Parallel.For(0, this.eventTypeCount, delegate(int eventType) {
					for(int playerConditions = 0; playerConditions<this.playerConditionsCount; playerConditions++) {
						Gamma thisDotEventsPerMinutePrecision_F_playerConditions_eventType_local = default(Gamma);
						Gamma[] thisDotEventsPerMinutePrecision_uses_B_playerConditions_eventType_local = default(Gamma[]);
						thisDotEventsPerMinutePrecision_uses_B_playerConditions_eventType_local = new Gamma[2];
						thisDotEventsPerMinutePrecision_uses_B_playerConditions_eventType_local[0] = Gamma.Uniform();
						thisDotEventsPerMinutePrecision_uses_B_playerConditions_eventType_local[1] = Gamma.Uniform();
						Gamma thisDotEventsPerMinutePrecision_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local = default(Gamma);
						thisDotEventsPerMinutePrecision_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local = ReplicatePointOp.ToDefInit<Gamma>(this.EventsPerMinutePrecision_marginal_F[playerConditions][eventType]);
						thisDotEventsPerMinutePrecision_uses_B_playerConditions_eventType_local[1] = ArrayHelper.SetTo<Gamma>(thisDotEventsPerMinutePrecision_uses_B_playerConditions_eventType_local[1], this.EventsPerMinutePrecision_depth0_B[playerConditions][eventType]);
						thisDotEventsPerMinutePrecision_uses_B_playerConditions_eventType_local[0] = IsGreaterThanDoubleOp.BAverageConditional(true, 0.5, this.EventsPerMinutePrecision_marginal_F[playerConditions][eventType]);
						thisDotEventsPerMinutePrecision_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local = ReplicatePointOp.ToDef<Gamma>(thisDotEventsPerMinutePrecision_uses_B_playerConditions_eventType_local, thisDotEventsPerMinutePrecision_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local);
						thisDotEventsPerMinutePrecision_F_playerConditions_eventType_local = GammaFromShapeAndRateOp_Slow.SampleAverageConditional(this.EventsPerMinutePrecision_marginal_F[playerConditions][eventType], 1.0, this.eventsPerMinutePrecisionRate_F_reduced);
						this.EventsPerMinutePrecision_use_B_playerConditions__eventType__buffer0_[playerConditions][eventType] = VariablePointOp_RpropGamma.Buffer0(thisDotEventsPerMinutePrecision_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local, thisDotEventsPerMinutePrecision_F_playerConditions_eventType_local, this.EventsPerMinutePrecision_marginal_F[playerConditions][eventType], this.EventsPerMinutePrecision_use_B_playerConditions__eventType__buffer0_[playerConditions][eventType]);
						this.EventsPerMinutePrecision_marginal_F[playerConditions][eventType] = VariablePointOp_RpropGamma.MarginalAverageConditional(thisDotEventsPerMinutePrecision_uses_B_playerConditions__eventType__toDef_playerConditions_eventType_local, thisDotEventsPerMinutePrecision_F_playerConditions_eventType_local, this.EventsPerMinutePrecision_use_B_playerConditions__eventType__buffer0_[playerConditions][eventType], this.EventsPerMinutePrecision_marginal_F[playerConditions][eventType]);
					}
				});
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of BaseSkillChangePrecisionPerMinute</summary>
		private void Changed_BaseSkillChangePrecisionPerMinute()
		{
			if (this.Changed_BaseSkillChangePrecisionPerMinute_isDone) {
				return ;
			}
			this.BaseSkillChangePrecisionPerMinute_marginal = Distribution.SetPoint<TruncatedGamma,double>(this.BaseSkillChangePrecisionPerMinute_marginal, this.baseSkillChangePrecisionPerMinute);
			this.Changed_BaseSkillChangePrecisionPerMinute_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of BaseSkillPriorPrecision</summary>
		private void Changed_BaseSkillPriorPrecision()
		{
			if (this.Changed_BaseSkillPriorPrecision_isDone) {
				return ;
			}
			this.BaseSkillPriorPrecision_marginal = Distribution.SetPoint<TruncatedGamma,double>(this.BaseSkillPriorPrecision_marginal, this.baseSkillPriorPrecision);
			this.Changed_BaseSkillPriorPrecision_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of BaseSkillPriorPrecision and CombinedVariableIndexInGame and GameCount and InitialCombinedIndices and InitialCombinedVariableCount and InitialSkillOffsetConditions and numberOfIterationsDecreased and PlayerCount and PlayerInConditionsCount and SkillOffsetPriorPrecision and SkillPriorMean and SkillVariableCount and SubarrayChangeVariableCountInGame and teamSizes and must reset on changes to BaseSkillChangePrecisionPerGame and BaseSkillChangePrecisionPerMinute and BaseSkillWeights and DisconnectProbability and DrawMargin and DrawMarginConditionsInGame and DrawWithPreviousInGame and EventCountsFlat and EventsPerMinuteEnemyMultiplierInitializer and EventsPerMinuteOffsetInitializer and EventsPerMinutePerformanceMultiplierInitializer and EventsPerMinutePrecisionInitializer and EventTypeCount and ExperienceBucketCountInConditions and ExperienceForConditionsInGame and ExperienceThreshold and LengthInMinutes and MinutesSinceLastGame and MinutesSinceLastGameInConditions and NoExperienceLastGame and NoExperienceLastGameInConditions and performanceVariance and PlayerConditionsCount and PlayerConditionsToLearnInGame and PlayerQuitInGameFlat and PlayerWeights and PreviousChangeVariableSubarrayCountInGame and PreviousChangeVariableSubarrayIndexInGame and PreviousSubarrayChangeVariableCountInGame and QuitProbability and QuitThreshold and QuitThresholdPrecision and SkillOffsetChangeMeanByExperience and SkillOffsetChangePrecisionPerGame and SkillOffsetChangePrecisionPerMinute and SquadOffset and SquadSizeBucketCount and SquadSizes and teamCount and TeamOrderInGame and UpdateChangeVariableCountInGame and UpdateChangeVariableSubarrayCountInGame and UpdateChangeVariableSubarrayIndexInGame and UpdateSubarrayChangeVariableCountInGame</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45(bool initialise)
		{
			if (this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone&&((!initialise)||this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised)) {
				return ;
			}
			this.skillInConditions_marginal_F = JaggedSubarrayWithMarginalOp<double>.MarginalAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian,DistributionStructArray<Gaussian,double>>(this.skillInConditions_uses_F[1], this.combinedVariables_B, this.combinedVariableIndexInGame, this.skillInConditions_marginal_F);
			this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = true;
			this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of BaseSkillPriorPrecision and InitialCombinedIndices and InitialCombinedVariableCount and InitialSkillOffsetConditions and PlayerCount and PlayerInConditionsCount and SkillOffsetPriorPrecision and SkillPriorMean and SkillVariableCount</summary>
		private void Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44()
		{
			if (this.Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44_isDone) {
				return ;
			}
			this.skillInConditions_uses_B[0] = SubarrayOp<double>.ArrayAverageConditional(this.initialCombinedVariables_B, this.initialCombinedIndices, this.skillInConditions_uses_B[0]);
			this.skillInConditions_uses_F[1] = ReplicateOp_NoDivide.UsesAverageConditional<DistributionStructArray<Gaussian,double>>(this.skillInConditions_uses_B, this.skillInConditions_F, 1, this.skillInConditions_uses_F[1]);
			this.Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of BaseSkillPriorPrecision and InitialCombinedVariableCount and InitialSkillOffsetConditions and PlayerCount and PlayerInConditionsCount and SkillOffsetPriorPrecision and SkillPriorMean</summary>
		private void Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43()
		{
			if (this.Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43_isDone) {
				return ;
			}
			this.initialCombinedVariables_B = SplitOp<double>.ArrayAverageConditional(this.skillOffsetPriorSample_F, this.playerInConditionsCount, this.baseSkillPriorSample_F, this.initialCombinedVariables_B);
			this.Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of BaseSkillPriorPrecision and PlayerCount</summary>
		private void Changed_BaseSkillPriorPrecision_PlayerCount()
		{
			if (this.Changed_BaseSkillPriorPrecision_PlayerCount_isDone) {
				return ;
			}
			if (this.playerCount>0) {
				this.baseSkillPriorSample_F_reduced = GaussianOpBase.SampleAverageConditional(0.0, this.baseSkillPriorPrecision);
			}
			Parallel.For(0, this.playerCount, delegate(int player) {
				this.baseSkillPriorSample_F[player] = this.baseSkillPriorSample_F_reduced;
			});
			this.Changed_BaseSkillPriorPrecision_PlayerCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of BaseSkillWeights and PlayerConditionsCount</summary>
		private void Changed_BaseSkillWeights_PlayerConditionsCount()
		{
			if (this.Changed_BaseSkillWeights_PlayerConditionsCount_isDone) {
				return ;
			}
			this.BaseSkillWeights_marginal = Distribution.SetPoint<DistributionStructArray<TruncatedGaussian,double>,double[]>(this.BaseSkillWeights_marginal, this.baseSkillWeights);
			this.Changed_BaseSkillWeights_PlayerConditionsCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of DisconnectProbability and PlayerConditionsCount</summary>
		private void Changed_DisconnectProbability_PlayerConditionsCount()
		{
			if (this.Changed_DisconnectProbability_PlayerConditionsCount_isDone) {
				return ;
			}
			this.DisconnectProbability_marginal = Distribution.SetPoint<DistributionStructArray<Beta,double>,double[]>(this.DisconnectProbability_marginal, this.disconnectProbability);
			this.Changed_DisconnectProbability_PlayerConditionsCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of DrawMargin and PlayerConditionsCount</summary>
		private void Changed_DrawMargin_PlayerConditionsCount()
		{
			if (this.Changed_DrawMargin_PlayerConditionsCount_isDone) {
				return ;
			}
			this.DrawMargin_marginal = Distribution.SetPoint<DistributionStructArray<TruncatedGaussian,double>,double[]>(this.DrawMargin_marginal, this.drawMargin);
			this.Changed_DrawMargin_PlayerConditionsCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of DrawWithPreviousInGame and GameCount and teamCount</summary>
		private void Changed_DrawWithPreviousInGame_GameCount_teamCount()
		{
			if (this.Changed_DrawWithPreviousInGame_GameCount_teamCount_isDone) {
				return ;
			}
			for(int game_Block4 = 0; game_Block4<GamesInBlock[0].Length; game_Block4++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread4) {
					for(int game_inBlock4 = 0; game_inBlock4<GamesInBlock[game_thread4][game_Block4].Length; game_inBlock4++) {
						int game = GamesInBlock[game_thread4][game_Block4][game_inBlock4];
						int thisDotTeamCount_game_local3 = default(int);
						thisDotTeamCount_game_local3 = this.TeamCount[game];
						bool[] thisDotdrawWithPreviousInGame_game_local3 = default(bool[]);
						for(int orderedTeam = 0; orderedTeam<this.TeamCount[game]; orderedTeam++) { // broken
							if (orderedTeam>0) {
								thisDotdrawWithPreviousInGame_game_local3 = this.drawWithPreviousInGame[game];
								orderedTeam = this.TeamCount[game]-1;
							}
						}
						for(int orderedTeam = 0; orderedTeam<thisDotTeamCount_game_local3; orderedTeam++) {
							if (orderedTeam>0) {
								if (thisDotdrawWithPreviousInGame_game_local3[orderedTeam]) {
									bool thisDotvbool54_game_orderedTeam_local = default(bool);
									thisDotvbool54_game_orderedTeam_local = true;
									Constrain.Equal<bool>(true, thisDotvbool54_game_orderedTeam_local);
								}
							}
						}
						for(int orderedTeam = 0; orderedTeam<thisDotTeamCount_game_local3; orderedTeam++) {
							if (orderedTeam>0) {
								if (!thisDotdrawWithPreviousInGame_game_local3[orderedTeam]) {
									bool thisDotvbool56_game_orderedTeam_local = default(bool);
									thisDotvbool56_game_orderedTeam_local = true;
									Constrain.Equal<bool>(true, thisDotvbool56_game_orderedTeam_local);
								}
							}
						}
					}
				});
			}
			this.Changed_DrawWithPreviousInGame_GameCount_teamCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of EventsPerMinuteEnemyMultiplierInitializer and numberOfIterationsDecreased and PlayerConditionsCount and must reset on changes to BaseSkillChangePrecisionPerGame and BaseSkillChangePrecisionPerMinute and BaseSkillPriorPrecision and BaseSkillWeights and CombinedVariableIndexInGame and DisconnectProbability and DrawMargin and DrawMarginConditionsInGame and DrawWithPreviousInGame and EventCountsFlat and EventsPerMinuteOffsetInitializer and EventsPerMinutePerformanceMultiplierInitializer and EventsPerMinutePrecisionInitializer and EventTypeCount and ExperienceBucketCountInConditions and ExperienceForConditionsInGame and ExperienceThreshold and GameCount and InitialCombinedIndices and InitialCombinedVariableCount and InitialSkillOffsetConditions and LengthInMinutes and MinutesSinceLastGame and MinutesSinceLastGameInConditions and NoExperienceLastGame and NoExperienceLastGameInConditions and performanceVariance and PlayerConditionsToLearnInGame and PlayerCount and PlayerInConditionsCount and PlayerQuitInGameFlat and PlayerWeights and PreviousChangeVariableSubarrayCountInGame and PreviousChangeVariableSubarrayIndexInGame and PreviousSubarrayChangeVariableCountInGame and QuitProbability and QuitThreshold and QuitThresholdPrecision and SkillOffsetChangeMeanByExperience and SkillOffsetChangePrecisionPerGame and SkillOffsetChangePrecisionPerMinute and SkillOffsetPriorPrecision and SkillPriorMean and SkillVariableCount and SquadOffset and SquadSizeBucketCount and SquadSizes and SubarrayChangeVariableCountInGame and teamCount and TeamOrderInGame and teamSizes and UpdateChangeVariableCountInGame and UpdateChangeVariableSubarrayCountInGame and UpdateChangeVariableSubarrayIndexInGame and UpdateSubarrayChangeVariableCountInGame</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29(bool initialise)
		{
			if (this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isDone&&((!initialise)||this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised)) {
				return ;
			}
			this.EventsPerMinuteEnemyMultiplier_marginal_F = ArrayHelper.SetTo<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.EventsPerMinuteEnemyMultiplier_marginal_F, (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)this.eventsPerMinuteEnemyMultiplierInitializer);
			this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isDone = true;
			this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of EventsPerMinuteOffsetInitializer and numberOfIterationsDecreased and PlayerConditionsCount and must reset on changes to BaseSkillChangePrecisionPerGame and BaseSkillChangePrecisionPerMinute and BaseSkillPriorPrecision and BaseSkillWeights and CombinedVariableIndexInGame and DisconnectProbability and DrawMargin and DrawMarginConditionsInGame and DrawWithPreviousInGame and EventCountsFlat and EventsPerMinuteEnemyMultiplierInitializer and EventsPerMinutePerformanceMultiplierInitializer and EventsPerMinutePrecisionInitializer and EventTypeCount and ExperienceBucketCountInConditions and ExperienceForConditionsInGame and ExperienceThreshold and GameCount and InitialCombinedIndices and InitialCombinedVariableCount and InitialSkillOffsetConditions and LengthInMinutes and MinutesSinceLastGame and MinutesSinceLastGameInConditions and NoExperienceLastGame and NoExperienceLastGameInConditions and performanceVariance and PlayerConditionsToLearnInGame and PlayerCount and PlayerInConditionsCount and PlayerQuitInGameFlat and PlayerWeights and PreviousChangeVariableSubarrayCountInGame and PreviousChangeVariableSubarrayIndexInGame and PreviousSubarrayChangeVariableCountInGame and QuitProbability and QuitThreshold and QuitThresholdPrecision and SkillOffsetChangeMeanByExperience and SkillOffsetChangePrecisionPerGame and SkillOffsetChangePrecisionPerMinute and SkillOffsetPriorPrecision and SkillPriorMean and SkillVariableCount and SquadOffset and SquadSizeBucketCount and SquadSizes and SubarrayChangeVariableCountInGame and teamCount and TeamOrderInGame and teamSizes and UpdateChangeVariableCountInGame and UpdateChangeVariableSubarrayCountInGame and UpdateChangeVariableSubarrayIndexInGame and UpdateSubarrayChangeVariableCountInGame</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30(bool initialise)
		{
			if (this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isDone&&((!initialise)||this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised)) {
				return ;
			}
			this.EventsPerMinuteOffset_marginal_F = ArrayHelper.SetTo<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.EventsPerMinuteOffset_marginal_F, (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)this.eventsPerMinuteOffsetInitializer);
			this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isDone = true;
			this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of EventsPerMinutePerformanceMultiplierInitializer and numberOfIterationsDecreased and PlayerConditionsCount and must reset on changes to BaseSkillChangePrecisionPerGame and BaseSkillChangePrecisionPerMinute and BaseSkillPriorPrecision and BaseSkillWeights and CombinedVariableIndexInGame and DisconnectProbability and DrawMargin and DrawMarginConditionsInGame and DrawWithPreviousInGame and EventCountsFlat and EventsPerMinuteEnemyMultiplierInitializer and EventsPerMinuteOffsetInitializer and EventsPerMinutePrecisionInitializer and EventTypeCount and ExperienceBucketCountInConditions and ExperienceForConditionsInGame and ExperienceThreshold and GameCount and InitialCombinedIndices and InitialCombinedVariableCount and InitialSkillOffsetConditions and LengthInMinutes and MinutesSinceLastGame and MinutesSinceLastGameInConditions and NoExperienceLastGame and NoExperienceLastGameInConditions and performanceVariance and PlayerConditionsToLearnInGame and PlayerCount and PlayerInConditionsCount and PlayerQuitInGameFlat and PlayerWeights and PreviousChangeVariableSubarrayCountInGame and PreviousChangeVariableSubarrayIndexInGame and PreviousSubarrayChangeVariableCountInGame and QuitProbability and QuitThreshold and QuitThresholdPrecision and SkillOffsetChangeMeanByExperience and SkillOffsetChangePrecisionPerGame and SkillOffsetChangePrecisionPerMinute and SkillOffsetPriorPrecision and SkillPriorMean and SkillVariableCount and SquadOffset and SquadSizeBucketCount and SquadSizes and SubarrayChangeVariableCountInGame and teamCount and TeamOrderInGame and teamSizes and UpdateChangeVariableCountInGame and UpdateChangeVariableSubarrayCountInGame and UpdateChangeVariableSubarrayIndexInGame and UpdateSubarrayChangeVariableCountInGame</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32(bool initialise)
		{
			if (this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isDone&&((!initialise)||this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised)) {
				return ;
			}
			this.EventsPerMinutePerformanceMultiplier_marginal_F = ArrayHelper.SetTo<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.EventsPerMinutePerformanceMultiplier_marginal_F, (DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>)this.eventsPerMinutePerformanceMultiplierInitializer);
			this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isDone = true;
			this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of EventsPerMinutePrecisionInitializer and numberOfIterationsDecreased and PlayerConditionsCount and must reset on changes to BaseSkillChangePrecisionPerGame and BaseSkillChangePrecisionPerMinute and BaseSkillPriorPrecision and BaseSkillWeights and CombinedVariableIndexInGame and DisconnectProbability and DrawMargin and DrawMarginConditionsInGame and DrawWithPreviousInGame and EventCountsFlat and EventsPerMinuteEnemyMultiplierInitializer and EventsPerMinuteOffsetInitializer and EventsPerMinutePerformanceMultiplierInitializer and EventTypeCount and ExperienceBucketCountInConditions and ExperienceForConditionsInGame and ExperienceThreshold and GameCount and InitialCombinedIndices and InitialCombinedVariableCount and InitialSkillOffsetConditions and LengthInMinutes and MinutesSinceLastGame and MinutesSinceLastGameInConditions and NoExperienceLastGame and NoExperienceLastGameInConditions and performanceVariance and PlayerConditionsToLearnInGame and PlayerCount and PlayerInConditionsCount and PlayerQuitInGameFlat and PlayerWeights and PreviousChangeVariableSubarrayCountInGame and PreviousChangeVariableSubarrayIndexInGame and PreviousSubarrayChangeVariableCountInGame and QuitProbability and QuitThreshold and QuitThresholdPrecision and SkillOffsetChangeMeanByExperience and SkillOffsetChangePrecisionPerGame and SkillOffsetChangePrecisionPerMinute and SkillOffsetPriorPrecision and SkillPriorMean and SkillVariableCount and SquadOffset and SquadSizeBucketCount and SquadSizes and SubarrayChangeVariableCountInGame and teamCount and TeamOrderInGame and teamSizes and UpdateChangeVariableCountInGame and UpdateChangeVariableSubarrayCountInGame and UpdateChangeVariableSubarrayIndexInGame and UpdateSubarrayChangeVariableCountInGame</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27(bool initialise)
		{
			if (this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isDone&&((!initialise)||this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised)) {
				return ;
			}
			this.EventsPerMinutePrecision_marginal_F = ArrayHelper.SetTo<DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>>(this.EventsPerMinutePrecision_marginal_F, (DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>)this.eventsPerMinutePrecisionInitializer);
			this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isDone = true;
			this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of EventTypeCount and ExperienceForConditionsInGame and ExperienceThreshold and GameCount and teamSizes</summary>
		private void Changed_EventTypeCount_ExperienceForConditionsInGame_ExperienceThreshold_GameCount_teamSizes()
		{
			if (this.Changed_EventTypeCount_ExperienceForConditionsInGame_ExperienceThreshold_GameCount_teamSizes_isDone) {
				return ;
			}
			for(int game_Block5 = 0; game_Block5<GamesInBlock[0].Length; game_Block5++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread5) {
					for(int game_inBlock5 = 0; game_inBlock5<GamesInBlock[game_thread5][game_Block5].Length; game_inBlock5++) {
						int game = GamesInBlock[game_thread5][game_Block5][game_inBlock5];
						int[] thisDotexperienceForConditionsInGame_game_local3 = default(int[]);
						if (this.playerCountInGame[game]>0) {
							if (this.eventTypeCount>0) {
								thisDotexperienceForConditionsInGame_game_local3 = this.experienceForConditionsInGame[game];
							}
						}
						for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
							if (this.eventTypeCount>0) {
								this.isExperienced_reduced[game][playerInGame] = Factor.IsGreaterThan(thisDotexperienceForConditionsInGame_game_local3[playerInGame], this.experienceThreshold);
							}
							for(int eventType = 0; eventType<this.eventTypeCount; eventType++) {
								this.EventsPerMinutePrecision_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game][playerInGame][eventType] = Gamma.Uniform();
							}
						}
					}
				});
			}
			this.Changed_EventTypeCount_ExperienceForConditionsInGame_ExperienceThreshold_GameCount_teamSizes_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of EventTypeCount and GameCount and numberOfIterationsDecreased and teamSizes and must reset on changes to BaseSkillChangePrecisionPerGame and BaseSkillChangePrecisionPerMinute and BaseSkillPriorPrecision and BaseSkillWeights and CombinedVariableIndexInGame and DisconnectProbability and DrawMargin and DrawMarginConditionsInGame and DrawWithPreviousInGame and EventCountsFlat and EventsPerMinuteEnemyMultiplierInitializer and EventsPerMinuteOffsetInitializer and EventsPerMinutePerformanceMultiplierInitializer and EventsPerMinutePrecisionInitializer and ExperienceBucketCountInConditions and ExperienceForConditionsInGame and ExperienceThreshold and InitialCombinedIndices and InitialCombinedVariableCount and InitialSkillOffsetConditions and LengthInMinutes and MinutesSinceLastGame and MinutesSinceLastGameInConditions and NoExperienceLastGame and NoExperienceLastGameInConditions and performanceVariance and PlayerConditionsCount and PlayerConditionsToLearnInGame and PlayerCount and PlayerInConditionsCount and PlayerQuitInGameFlat and PlayerWeights and PreviousChangeVariableSubarrayCountInGame and PreviousChangeVariableSubarrayIndexInGame and PreviousSubarrayChangeVariableCountInGame and QuitProbability and QuitThreshold and QuitThresholdPrecision and SkillOffsetChangeMeanByExperience and SkillOffsetChangePrecisionPerGame and SkillOffsetChangePrecisionPerMinute and SkillOffsetPriorPrecision and SkillPriorMean and SkillVariableCount and SquadOffset and SquadSizeBucketCount and SquadSizes and SubarrayChangeVariableCountInGame and teamCount and TeamOrderInGame and UpdateChangeVariableCountInGame and UpdateChangeVariableSubarrayCountInGame and UpdateChangeVariableSubarrayIndexInGame and UpdateSubarrayChangeVariableCountInGame</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33(bool initialise)
		{
			if (this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isDone&&((!initialise)||this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised)) {
				return ;
			}
			for(int game_Block6 = 0; game_Block6<GamesInBlock[0].Length; game_Block6++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread6) {
					for(int game_inBlock6 = 0; game_inBlock6<GamesInBlock[game_thread6][game_Block6].Length; game_inBlock6++) {
						int game = GamesInBlock[game_thread6][game_Block6][game_inBlock6];
						for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
							for(int eventType = 0; eventType<this.eventTypeCount; eventType++) {
								this.enemyAverageCopy_B[game][playerInGame][eventType] = Gaussian.Uniform();
								this.playerPerfCopy_B[game][playerInGame][eventType] = Gaussian.Uniform();
							}
						}
					}
				});
			}
			this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isDone = true;
			this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of EventTypeCount and GameCount and teamSizes</summary>
		private void Changed_EventTypeCount_GameCount_teamSizes()
		{
			if (this.Changed_EventTypeCount_GameCount_teamSizes_isDone) {
				return ;
			}
			for(int game_Block7 = 0; game_Block7<GamesInBlock[0].Length; game_Block7++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread7) {
					for(int game_inBlock7 = 0; game_inBlock7<GamesInBlock[game_thread7][game_Block7].Length; game_inBlock7++) {
						int game = GamesInBlock[game_thread7][game_Block7][game_inBlock7];
						for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
							this.isExperienced_reduced[game][playerInGame] = default(bool);
							this.enemyAverageCopy_B[game][playerInGame] = new DistributionStructArray<Gaussian,double>(this.eventTypeCount);
							this.playerPerfCopy_B[game][playerInGame] = new DistributionStructArray<Gaussian,double>(this.eventTypeCount);
							this.EventsPerMinutePerformanceMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game][playerInGame] = new DistributionStructArray<Gaussian,double>(this.eventTypeCount);
							for(int eventType = 0; eventType<this.eventTypeCount; eventType++) {
								this.EventsPerMinutePerformanceMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game][playerInGame][eventType] = Gaussian.Uniform();
							}
							this.EventsPerMinuteOffset_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game][playerInGame] = new DistributionStructArray<Gaussian,double>(this.eventTypeCount);
							for(int eventType = 0; eventType<this.eventTypeCount; eventType++) {
								this.EventsPerMinuteOffset_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game][playerInGame][eventType] = Gaussian.Uniform();
							}
							this.EventsPerMinuteEnemyMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game][playerInGame] = new DistributionStructArray<Gaussian,double>(this.eventTypeCount);
							for(int eventType = 0; eventType<this.eventTypeCount; eventType++) {
								this.EventsPerMinuteEnemyMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game][playerInGame][eventType] = Gaussian.Uniform();
							}
							this.EventsPerMinutePrecision_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game][playerInGame] = new DistributionStructArray<Gamma,double>(this.eventTypeCount);
						}
					}
				});
			}
			this.Changed_EventTypeCount_GameCount_teamSizes_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of EventTypeCount and numberOfIterationsDecreased and PlayerConditionsCount and must reset on changes to BaseSkillChangePrecisionPerGame and BaseSkillChangePrecisionPerMinute and BaseSkillPriorPrecision and BaseSkillWeights and CombinedVariableIndexInGame and DisconnectProbability and DrawMargin and DrawMarginConditionsInGame and DrawWithPreviousInGame and EventCountsFlat and EventsPerMinuteEnemyMultiplierInitializer and EventsPerMinuteOffsetInitializer and EventsPerMinutePerformanceMultiplierInitializer and EventsPerMinutePrecisionInitializer and ExperienceBucketCountInConditions and ExperienceForConditionsInGame and ExperienceThreshold and GameCount and InitialCombinedIndices and InitialCombinedVariableCount and InitialSkillOffsetConditions and LengthInMinutes and MinutesSinceLastGame and MinutesSinceLastGameInConditions and NoExperienceLastGame and NoExperienceLastGameInConditions and performanceVariance and PlayerConditionsToLearnInGame and PlayerCount and PlayerInConditionsCount and PlayerQuitInGameFlat and PlayerWeights and PreviousChangeVariableSubarrayCountInGame and PreviousChangeVariableSubarrayIndexInGame and PreviousSubarrayChangeVariableCountInGame and QuitProbability and QuitThreshold and QuitThresholdPrecision and SkillOffsetChangeMeanByExperience and SkillOffsetChangePrecisionPerGame and SkillOffsetChangePrecisionPerMinute and SkillOffsetPriorPrecision and SkillPriorMean and SkillVariableCount and SquadOffset and SquadSizeBucketCount and SquadSizes and SubarrayChangeVariableCountInGame and teamCount and TeamOrderInGame and teamSizes and UpdateChangeVariableCountInGame and UpdateChangeVariableSubarrayCountInGame and UpdateChangeVariableSubarrayIndexInGame and UpdateSubarrayChangeVariableCountInGame</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47(bool initialise)
		{
			if (this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isDone&&((!initialise)||this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised)) {
				return ;
			}
			Parallel.For(0, this.eventTypeCount, delegate(int eventType) {
				for(int playerConditions = 0; playerConditions<this.playerConditionsCount; playerConditions++) {
					this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][2] = Gamma.Uniform();
					this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][1] = Gamma.Uniform();
					this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][0] = Gamma.Uniform();
					this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][2] = Gamma.Uniform();
					this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][1] = Gamma.Uniform();
					this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][0] = Gamma.Uniform();
					this.eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal[playerConditions][eventType] = ReplicateOp_Divide.MarginalInit<Gamma>(this.eventsPerMinutePriorPrecision_F_reduced);
					this.eventsPerMinutePriorPrecision_uses_B_playerConditions__eventType__toDef[playerConditions][eventType] = ReplicateOp_Divide.ToDefInit<Gamma>(this.eventsPerMinutePriorPrecision_F_reduced);
					this.eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal[playerConditions][eventType] = ReplicateOp_Divide.Marginal<Gamma>(this.eventsPerMinutePriorPrecision_uses_B_playerConditions__eventType__toDef[playerConditions][eventType], this.eventsPerMinutePriorPrecision_F_reduced, this.eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal[playerConditions][eventType]);
					this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][0] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][0], this.eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal[playerConditions][eventType], 0, this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][0]);
					this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][2] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][2], this.eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal[playerConditions][eventType], 2, this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][2]);
					this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][1] = ReplicateOp_Divide.UsesAverageConditional<Gamma>(this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType][1], this.eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal[playerConditions][eventType], 1, this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType][1]);
					this.EventsPerMinutePerformanceMultiplier_use_B_playerConditions__eventType__buffer[playerConditions][eventType] = VariablePointOp_Rprop.BufferInit();
					this.EventsPerMinuteOffset_use_B_playerConditions__eventType__buffer[playerConditions][eventType] = VariablePointOp_Rprop.BufferInit();
					this.EventsPerMinuteEnemyMultiplier_use_B_playerConditions__eventType__buffer[playerConditions][eventType] = VariablePointOp_Rprop.BufferInit();
					this.EventsPerMinutePrecision_use_B_playerConditions__eventType__buffer0_[playerConditions][eventType] = VariablePointOp_RpropGamma.Buffer0Init();
				}
			});
			this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isDone = true;
			this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of EventTypeCount and PlayerConditionsCount</summary>
		private void Changed_EventTypeCount_PlayerConditionsCount()
		{
			if (this.Changed_EventTypeCount_PlayerConditionsCount_isDone) {
				return ;
			}
			Parallel.For(0, this.playerConditionsCount, delegate(int playerConditions) {
				this.eventsPerMinutePriorPrecision_uses_B[playerConditions] = new Gamma[this.eventTypeCount][];
			});
			Parallel.For(0, this.eventTypeCount, delegate(int eventType) {
				for(int playerConditions = 0; playerConditions<this.playerConditionsCount; playerConditions++) {
					this.eventsPerMinutePriorPrecision_uses_B[playerConditions][eventType] = new Gamma[3];
				}
			});
			Parallel.For(0, this.playerConditionsCount, delegate(int playerConditions) {
				this.eventsPerMinutePriorPrecision_uses_F[playerConditions] = new Gamma[this.eventTypeCount][];
			});
			Parallel.For(0, this.eventTypeCount, delegate(int eventType) {
				for(int playerConditions = 0; playerConditions<this.playerConditionsCount; playerConditions++) {
					this.eventsPerMinutePriorPrecision_uses_F[playerConditions][eventType] = new Gamma[3];
				}
			});
			this.eventsPerMinutePriorPrecision_F_reduced = default(Gamma);
			if (this.playerConditionsCount>0) {
				if (this.eventTypeCount>0) {
					this.eventsPerMinutePriorPrecision_F_reduced = Gamma.Uniform();
				}
			}
			Parallel.For(0, this.playerConditionsCount, delegate(int playerConditions) {
				this.eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal[playerConditions] = new DistributionStructArray<Gamma,double>(this.eventTypeCount);
				this.eventsPerMinutePriorPrecision_uses_B_playerConditions__eventType__toDef[playerConditions] = new DistributionStructArray<Gamma,double>(this.eventTypeCount);
			});
			if (this.playerConditionsCount>0) {
				if (this.eventTypeCount>0) {
					this.eventsPerMinutePriorPrecision_F_reduced = GammaFromShapeAndRateOpBase.SampleAverageConditional(1.0, 1.0);
				}
			}
			Parallel.For(0, this.playerConditionsCount, delegate(int playerConditions) {
				this.EventsPerMinutePerformanceMultiplier_depth0_B[playerConditions] = new DistributionStructArray<Gaussian,double>(this.eventTypeCount);
			});
			Parallel.For(0, this.eventTypeCount, delegate(int eventType) {
				for(int playerConditions = 0; playerConditions<this.playerConditionsCount; playerConditions++) {
					this.EventsPerMinutePerformanceMultiplier_depth0_B[playerConditions][eventType] = Gaussian.Uniform();
				}
			});
			Parallel.For(0, this.playerConditionsCount, delegate(int playerConditions) {
				this.EventsPerMinutePerformanceMultiplier_use_B_playerConditions__eventType__buffer[playerConditions] = new RpropBufferData[this.eventTypeCount];
				this.EventsPerMinuteOffset_depth0_B[playerConditions] = new DistributionStructArray<Gaussian,double>(this.eventTypeCount);
			});
			Parallel.For(0, this.eventTypeCount, delegate(int eventType) {
				for(int playerConditions = 0; playerConditions<this.playerConditionsCount; playerConditions++) {
					this.EventsPerMinuteOffset_depth0_B[playerConditions][eventType] = Gaussian.Uniform();
				}
			});
			Parallel.For(0, this.playerConditionsCount, delegate(int playerConditions) {
				this.EventsPerMinuteOffset_use_B_playerConditions__eventType__buffer[playerConditions] = new RpropBufferData[this.eventTypeCount];
				this.EventsPerMinuteEnemyMultiplier_depth0_B[playerConditions] = new DistributionStructArray<Gaussian,double>(this.eventTypeCount);
			});
			Parallel.For(0, this.eventTypeCount, delegate(int eventType) {
				for(int playerConditions = 0; playerConditions<this.playerConditionsCount; playerConditions++) {
					this.EventsPerMinuteEnemyMultiplier_depth0_B[playerConditions][eventType] = Gaussian.Uniform();
				}
			});
			Parallel.For(0, this.playerConditionsCount, delegate(int playerConditions) {
				this.EventsPerMinuteEnemyMultiplier_use_B_playerConditions__eventType__buffer[playerConditions] = new RpropBufferData[this.eventTypeCount];
				this.EventsPerMinutePrecision_depth0_B[playerConditions] = new DistributionStructArray<Gamma,double>(this.eventTypeCount);
			});
			Parallel.For(0, this.eventTypeCount, delegate(int eventType) {
				for(int playerConditions = 0; playerConditions<this.playerConditionsCount; playerConditions++) {
					this.EventsPerMinutePrecision_depth0_B[playerConditions][eventType] = Gamma.Uniform();
				}
			});
			Parallel.For(0, this.playerConditionsCount, delegate(int playerConditions) {
				this.EventsPerMinutePrecision_use_B_playerConditions__eventType__buffer0_[playerConditions] = new RpropBufferData[this.eventTypeCount];
			});
			if (this.playerConditionsCount>0) {
				if (this.eventTypeCount>0) {
					this.vbool____9_reduced = true;
					Constrain.Equal<bool>(true, this.vbool____9_reduced);
				}
			}
			this.Changed_EventTypeCount_PlayerConditionsCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ExperienceBucketCountInConditions and PlayerConditionsCount</summary>
		private void Changed_ExperienceBucketCountInConditions_PlayerConditionsCount()
		{
			if (this.Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_isDone) {
				return ;
			}
			this.SkillOffsetChangeMeanByExperience_marginal = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerConditionsCount, delegate(int playerConditions) {
				return new DistributionStructArray<Gaussian,double>(this.experienceBucketCountInConditions[playerConditions], delegate(int experienceInConditions) {
					return Gaussian.Uniform();
				});
			});
			this.Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of ExperienceBucketCountInConditions and PlayerConditionsCount and SkillOffsetChangeMeanByExperience</summary>
		private void Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_SkillOffsetChangeMeanByExperience()
		{
			if (this.Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_SkillOffsetChangeMeanByExperience_isDone) {
				return ;
			}
			this.SkillOffsetChangeMeanByExperience_marginal = Distribution.SetPoint<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.SkillOffsetChangeMeanByExperience_marginal, this.skillOffsetChangeMeanByExperience);
			this.Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_SkillOffsetChangeMeanByExperience_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of GameCount</summary>
		private void Changed_GameCount()
		{
			if (this.Changed_GameCount_isDone) {
				return ;
			}
			this.playerCountInGame = new int[this.gameCount];
			this.offsetVariableCountInGame = new int[this.gameCount];
			this.indexOfPlayerOnTeam = new int[this.gameCount][][];
			this.cumulativeTeamSizes = new int[this.gameCount][];
			this.playerIsInSquad = new bool[this.gameCount][];
			this.isExperienced_reduced = new bool[this.gameCount][];
			this.denomIsZero = new bool[this.gameCount][];
			this.enemyWeight = new double[this.gameCount][];
			this.teamWeight = new double[this.gameCount][];
			this.playerWeightsByTeam = new double[this.gameCount][][];
			this.orderedTeamSum_uses_F = new Gaussian[this.gameCount][][];
			this.orderedTeamSum_uses_B = new Gaussian[this.gameCount][][];
			this.combinedVariableCount = new int[this.gameCount];
			this.performancesForEventsPrimary_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.gameCount);
			this.enemyAverageCopy_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.gameCount);
			this.enemyAverageQuit_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.gameCount);
			this.teamStrength2_rep_F = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.gameCount);
			this.combinedVariables_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.gameCount);
			this.performancesForEvents_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.gameCount);
			this.playerPerfQuit_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.gameCount);
			this.performancesForEventsPrimary_rep_B_toDef = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.gameCount);
			this.playerPerfCopy_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.gameCount);
			this.EventsPerMinutePerformanceMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.gameCount);
			this.EventsPerMinuteOffset_itemPlayerConditionsToLearnInGame_game__playerInGame__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.gameCount);
			this.EventsPerMinuteEnemyMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.gameCount);
			this.EventsPerMinutePrecision_itemPlayerConditionsToLearnInGame_game__playerInGame__B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>,double[][]>(this.gameCount);
			this.Changed_GameCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of GameCount and numberOfIterationsDecreased and SubarrayChangeVariableCountInGame and teamSizes and must reset on changes to BaseSkillChangePrecisionPerGame and BaseSkillChangePrecisionPerMinute and BaseSkillPriorPrecision and BaseSkillWeights and CombinedVariableIndexInGame and DisconnectProbability and DrawMargin and DrawMarginConditionsInGame and DrawWithPreviousInGame and EventCountsFlat and EventsPerMinuteEnemyMultiplierInitializer and EventsPerMinuteOffsetInitializer and EventsPerMinutePerformanceMultiplierInitializer and EventsPerMinutePrecisionInitializer and EventTypeCount and ExperienceBucketCountInConditions and ExperienceForConditionsInGame and ExperienceThreshold and InitialCombinedIndices and InitialCombinedVariableCount and InitialSkillOffsetConditions and LengthInMinutes and MinutesSinceLastGame and MinutesSinceLastGameInConditions and NoExperienceLastGame and NoExperienceLastGameInConditions and performanceVariance and PlayerConditionsCount and PlayerConditionsToLearnInGame and PlayerCount and PlayerInConditionsCount and PlayerQuitInGameFlat and PlayerWeights and PreviousChangeVariableSubarrayCountInGame and PreviousChangeVariableSubarrayIndexInGame and PreviousSubarrayChangeVariableCountInGame and QuitProbability and QuitThreshold and QuitThresholdPrecision and SkillOffsetChangeMeanByExperience and SkillOffsetChangePrecisionPerGame and SkillOffsetChangePrecisionPerMinute and SkillOffsetPriorPrecision and SkillPriorMean and SkillVariableCount and SquadOffset and SquadSizeBucketCount and SquadSizes and teamCount and TeamOrderInGame and UpdateChangeVariableCountInGame and UpdateChangeVariableSubarrayCountInGame and UpdateChangeVariableSubarrayIndexInGame and UpdateSubarrayChangeVariableCountInGame</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37(bool initialise)
		{
			if (this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isDone&&((!initialise)||this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised)) {
				return ;
			}
			for(int game_Block8 = 0; game_Block8<GamesInBlock[0].Length; game_Block8++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread8) {
					for(int game_inBlock8 = 0; game_inBlock8<GamesInBlock[game_thread8][game_Block8].Length; game_inBlock8++) {
						int game = GamesInBlock[game_thread8][game_Block8][game_inBlock8];
						for(int combinedVariable = 0; combinedVariable<this.combinedVariableCount[game]; combinedVariable++) {
							this.combinedVariables_B[game][combinedVariable] = Gaussian.Uniform();
						}
					}
				});
			}
			this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isDone = true;
			this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of GameCount and numberOfIterationsDecreased and teamCount and must reset on changes to BaseSkillChangePrecisionPerGame and BaseSkillChangePrecisionPerMinute and BaseSkillPriorPrecision and BaseSkillWeights and CombinedVariableIndexInGame and DisconnectProbability and DrawMargin and DrawMarginConditionsInGame and DrawWithPreviousInGame and EventCountsFlat and EventsPerMinuteEnemyMultiplierInitializer and EventsPerMinuteOffsetInitializer and EventsPerMinutePerformanceMultiplierInitializer and EventsPerMinutePrecisionInitializer and EventTypeCount and ExperienceBucketCountInConditions and ExperienceForConditionsInGame and ExperienceThreshold and InitialCombinedIndices and InitialCombinedVariableCount and InitialSkillOffsetConditions and LengthInMinutes and MinutesSinceLastGame and MinutesSinceLastGameInConditions and NoExperienceLastGame and NoExperienceLastGameInConditions and performanceVariance and PlayerConditionsCount and PlayerConditionsToLearnInGame and PlayerCount and PlayerInConditionsCount and PlayerQuitInGameFlat and PlayerWeights and PreviousChangeVariableSubarrayCountInGame and PreviousChangeVariableSubarrayIndexInGame and PreviousSubarrayChangeVariableCountInGame and QuitProbability and QuitThreshold and QuitThresholdPrecision and SkillOffsetChangeMeanByExperience and SkillOffsetChangePrecisionPerGame and SkillOffsetChangePrecisionPerMinute and SkillOffsetPriorPrecision and SkillPriorMean and SkillVariableCount and SquadOffset and SquadSizeBucketCount and SquadSizes and SubarrayChangeVariableCountInGame and TeamOrderInGame and teamSizes and UpdateChangeVariableCountInGame and UpdateChangeVariableSubarrayCountInGame and UpdateChangeVariableSubarrayIndexInGame and UpdateSubarrayChangeVariableCountInGame</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35(bool initialise)
		{
			if (this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isDone&&((!initialise)||this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised)) {
				return ;
			}
			for(int game_Block9 = 0; game_Block9<GamesInBlock[0].Length; game_Block9++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread9) {
					for(int game_inBlock9 = 0; game_inBlock9<GamesInBlock[game_thread9][game_Block9].Length; game_inBlock9++) {
						int game = GamesInBlock[game_thread9][game_Block9][game_inBlock9];
						int thisDotTeamCount_game_local4 = default(int);
						thisDotTeamCount_game_local4 = this.TeamCount[game];
						for(int team = 0; team<thisDotTeamCount_game_local4; team++) {
							for(int _a = 0; _a<thisDotTeamCount_game_local4; _a++) {
								this.teamStrength2_rep_F[game][_a][team] = Gaussian.Uniform();
							}
						}
						for(int orderedTeam = 0; orderedTeam<thisDotTeamCount_game_local4; orderedTeam++) {
							this.orderedTeamSum_uses_B[game][orderedTeam][0] = Gaussian.Uniform();
							this.orderedTeamSum_uses_F[game][orderedTeam][0] = Gaussian.Uniform();
						}
					}
				});
			}
			this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isDone = true;
			this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of GameCount and numberOfIterationsDecreased and teamSizes and must reset on changes to BaseSkillChangePrecisionPerGame and BaseSkillChangePrecisionPerMinute and BaseSkillPriorPrecision and BaseSkillWeights and CombinedVariableIndexInGame and DisconnectProbability and DrawMargin and DrawMarginConditionsInGame and DrawWithPreviousInGame and EventCountsFlat and EventsPerMinuteEnemyMultiplierInitializer and EventsPerMinuteOffsetInitializer and EventsPerMinutePerformanceMultiplierInitializer and EventsPerMinutePrecisionInitializer and EventTypeCount and ExperienceBucketCountInConditions and ExperienceForConditionsInGame and ExperienceThreshold and InitialCombinedIndices and InitialCombinedVariableCount and InitialSkillOffsetConditions and LengthInMinutes and MinutesSinceLastGame and MinutesSinceLastGameInConditions and NoExperienceLastGame and NoExperienceLastGameInConditions and performanceVariance and PlayerConditionsCount and PlayerConditionsToLearnInGame and PlayerCount and PlayerInConditionsCount and PlayerQuitInGameFlat and PlayerWeights and PreviousChangeVariableSubarrayCountInGame and PreviousChangeVariableSubarrayIndexInGame and PreviousSubarrayChangeVariableCountInGame and QuitProbability and QuitThreshold and QuitThresholdPrecision and SkillOffsetChangeMeanByExperience and SkillOffsetChangePrecisionPerGame and SkillOffsetChangePrecisionPerMinute and SkillOffsetPriorPrecision and SkillPriorMean and SkillVariableCount and SquadOffset and SquadSizeBucketCount and SquadSizes and SubarrayChangeVariableCountInGame and teamCount and TeamOrderInGame and UpdateChangeVariableCountInGame and UpdateChangeVariableSubarrayCountInGame and UpdateChangeVariableSubarrayIndexInGame and UpdateSubarrayChangeVariableCountInGame</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34(bool initialise)
		{
			if (this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isDone&&((!initialise)||this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised)) {
				return ;
			}
			for(int game_Block10 = 0; game_Block10<GamesInBlock[0].Length; game_Block10++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread10) {
					for(int game_inBlock10 = 0; game_inBlock10<GamesInBlock[game_thread10][game_Block10].Length; game_inBlock10++) {
						int game = GamesInBlock[game_thread10][game_Block10][game_inBlock10];
						for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
							this.enemyAverageQuit_B[game][playerInGame] = Gaussian.Uniform();
						}
						for(int _ind0 = 0; _ind0<this.playerCountInGame[game]; _ind0++) {
							this.performancesForEvents_B[game][_ind0] = Gaussian.Uniform();
						}
						for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
							this.playerPerfQuit_B[game][playerInGame] = Gaussian.Uniform();
							this.performancesForEventsPrimary_rep_B_toDef[game][playerInGame] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.performancesForEventsPrimary_F[game][playerInGame]);
						}
					}
				});
			}
			this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isDone = true;
			this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of GameCount and PlayerQuitInGameFlat and teamSizes</summary>
		private void Changed_GameCount_PlayerQuitInGameFlat_teamSizes()
		{
			if (this.Changed_GameCount_PlayerQuitInGameFlat_teamSizes_isDone) {
				return ;
			}
			for(int game_Block11 = 0; game_Block11<GamesInBlock[0].Length; game_Block11++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread11) {
					for(int game_inBlock11 = 0; game_inBlock11<GamesInBlock[game_thread11][game_Block11].Length; game_inBlock11++) {
						int game = GamesInBlock[game_thread11][game_Block11][game_inBlock11];
						bool[] thisDotplayerQuitInGameFlat_game_local3 = default(bool[]);
						if (this.playerCountInGame[game]>0) {
							thisDotplayerQuitInGameFlat_game_local3 = this.playerQuitInGameFlat[game];
						}
						for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
							bool thisDotplayerQuitInGameFlat_game_playerInGame_local = default(bool);
							thisDotplayerQuitInGameFlat_game_playerInGame_local = thisDotplayerQuitInGameFlat_game_local3[playerInGame];
							bool thisDotvbool71_game_playerInGame_local = default(bool);
							thisDotvbool71_game_playerInGame_local = thisDotplayerQuitInGameFlat_game_playerInGame_local;
							Constrain.Equal<bool>(thisDotplayerQuitInGameFlat_game_playerInGame_local, thisDotvbool71_game_playerInGame_local);
						}
					}
				});
			}
			this.Changed_GameCount_PlayerQuitInGameFlat_teamSizes_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of GameCount and PlayerWeights and teamCount and teamSizes</summary>
		private void Changed_GameCount_PlayerWeights_teamCount_teamSizes()
		{
			if (this.Changed_GameCount_PlayerWeights_teamCount_teamSizes_isDone) {
				return ;
			}
			for(int game_Block12 = 0; game_Block12<GamesInBlock[0].Length; game_Block12++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread12) {
					for(int game_inBlock12 = 0; game_inBlock12<GamesInBlock[game_thread12][game_Block12].Length; game_inBlock12++) {
						int game = GamesInBlock[game_thread12][game_Block12][game_inBlock12];
						this.playerWeightsByTeam[game] = Factor.SplitSubarray<double>(this.playerWeights[game], this.indexOfPlayerOnTeam[game]);
						int thisDotTeamCount_game_local5 = default(int);
						thisDotTeamCount_game_local5 = this.TeamCount[game];
						double[] thisDotteamWeight_game_local = default(double[]);
						thisDotteamWeight_game_local = this.teamWeight[game];
						for(int team = 0; team<thisDotTeamCount_game_local5; team++) {
							thisDotteamWeight_game_local[team] = Factor.Sum(this.playerWeightsByTeam[game][team]);
						}
						double thisDotvdouble710_game_local = default(double);
						thisDotvdouble710_game_local = Factor.Sum(thisDotteamWeight_game_local);
						for(int team = 0; team<thisDotTeamCount_game_local5; team++) {
							this.enemyWeight[game][team] = Factor.Difference(thisDotvdouble710_game_local, thisDotteamWeight_game_local[team]);
							bool thisDotvbool58_game_team_local = default(bool);
							thisDotvbool58_game_team_local = Factor.IsPositive(this.enemyWeight[game][team]);
							this.denomIsZero[game][team] = Factor.Not(thisDotvbool58_game_team_local);
						}
						this.teamWeight[game] = thisDotteamWeight_game_local;
					}
				});
			}
			this.Changed_GameCount_PlayerWeights_teamCount_teamSizes_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of GameCount and SquadSizes and teamSizes</summary>
		private void Changed_GameCount_SquadSizes_teamSizes()
		{
			if (this.Changed_GameCount_SquadSizes_teamSizes_isDone) {
				return ;
			}
			for(int game_Block13 = 0; game_Block13<GamesInBlock[0].Length; game_Block13++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread13) {
					for(int game_inBlock13 = 0; game_inBlock13<GamesInBlock[game_thread13][game_Block13].Length; game_inBlock13++) {
						int game = GamesInBlock[game_thread13][game_Block13][game_inBlock13];
						int[] thisDotsquadSizes_game_local3 = default(int[]);
						if (this.playerCountInGame[game]>0) {
							thisDotsquadSizes_game_local3 = this.squadSizes[game];
						}
						for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
							this.playerIsInSquad[game][playerInGame] = Factor.IsGreaterThan(thisDotsquadSizes_game_local3[playerInGame], 1);
						}
					}
				});
			}
			this.Changed_GameCount_SquadSizes_teamSizes_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of GameCount and SubarrayChangeVariableCountInGame and teamSizes</summary>
		private void Changed_GameCount_SubarrayChangeVariableCountInGame_teamSizes()
		{
			if (this.Changed_GameCount_SubarrayChangeVariableCountInGame_teamSizes_isDone) {
				return ;
			}
			for(int game_Block14 = 0; game_Block14<GamesInBlock[0].Length; game_Block14++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread14) {
					for(int game_inBlock14 = 0; game_inBlock14<GamesInBlock[game_thread14][game_Block14].Length; game_inBlock14++) {
						int game = GamesInBlock[game_thread14][game_Block14][game_inBlock14];
						this.combinedVariableCount[game] = Factor.Plus(this.offsetVariableCountInGame[game], this.subarrayChangeVariableCountInGame[game]);
						this.combinedVariables_B[game] = new DistributionStructArray<Gaussian,double>(this.combinedVariableCount[game]);
					}
				});
			}
			this.Changed_GameCount_SubarrayChangeVariableCountInGame_teamSizes_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of GameCount and teamCount</summary>
		private void Changed_GameCount_teamCount()
		{
			if (this.Changed_GameCount_teamCount_isDone) {
				return ;
			}
			for(int game_Block15 = 0; game_Block15<GamesInBlock[0].Length; game_Block15++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread15) {
					for(int game_inBlock15 = 0; game_inBlock15<GamesInBlock[game_thread15][game_Block15].Length; game_inBlock15++) {
						int game = GamesInBlock[game_thread15][game_Block15][game_inBlock15];
						int thisDotTeamCount_game_local6 = default(int);
						thisDotTeamCount_game_local6 = this.TeamCount[game];
						this.cumulativeTeamSizes[game] = new int[thisDotTeamCount_game_local6];
						for(int team = 0; team<thisDotTeamCount_game_local6; team++) { // broken
							if (team==0) {
								this.cumulativeTeamSizes[game][0] = Factor.Copy<int>(0);
								team = thisDotTeamCount_game_local6-1;
							}
						}
						this.indexOfPlayerOnTeam[game] = new int[thisDotTeamCount_game_local6][];
						this.playerWeightsByTeam[game] = new double[thisDotTeamCount_game_local6][];
						this.teamWeight[game] = new double[thisDotTeamCount_game_local6];
						this.enemyWeight[game] = new double[thisDotTeamCount_game_local6];
						this.denomIsZero[game] = new bool[thisDotTeamCount_game_local6];
						this.orderedTeamSum_uses_F[game] = new Gaussian[thisDotTeamCount_game_local6][];
						for(int orderedTeam = 0; orderedTeam<thisDotTeamCount_game_local6; orderedTeam++) {
							this.orderedTeamSum_uses_F[game][orderedTeam] = new Gaussian[2];
						}
						this.orderedTeamSum_uses_B[game] = new Gaussian[thisDotTeamCount_game_local6][];
						for(int orderedTeam = 0; orderedTeam<thisDotTeamCount_game_local6; orderedTeam++) {
							this.orderedTeamSum_uses_B[game][orderedTeam] = new Gaussian[2];
						}
						this.teamStrength2_rep_F[game] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(thisDotTeamCount_game_local6);
						for(int _a = 0; _a<thisDotTeamCount_game_local6; _a++) {
							this.teamStrength2_rep_F[game][_a] = new DistributionStructArray<Gaussian,double>(thisDotTeamCount_game_local6);
						}
					}
				});
			}
			this.Changed_GameCount_teamCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of GameCount and teamCount and teamSizes</summary>
		private void Changed_GameCount_teamCount_teamSizes()
		{
			if (this.Changed_GameCount_teamCount_teamSizes_isDone) {
				return ;
			}
			for(int game_Block16 = 0; game_Block16<GamesInBlock[0].Length; game_Block16++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread16) {
					for(int game_inBlock16 = 0; game_inBlock16<GamesInBlock[game_thread16][game_Block16].Length; game_inBlock16++) {
						int game = GamesInBlock[game_thread16][game_Block16][game_inBlock16];
						int[] thisDotTeamSizes_game_local3 = default(int[]);
						if (this.TeamCount[game]>0) {
							thisDotTeamSizes_game_local3 = this.TeamSizes[game];
						}
						for(int team = 0; team<this.TeamCount[game]; team++) {
							if (team>0) {
								this.cumulativeTeamSizes[game][team] = Factor.Plus(this.cumulativeTeamSizes[game][team-1], thisDotTeamSizes_game_local3[team-1]);
							}
							this.indexOfPlayerOnTeam[game][team] = new int[thisDotTeamSizes_game_local3[team]];
							for(int teamPlayer = 0; teamPlayer<thisDotTeamSizes_game_local3[team]; teamPlayer++) {
								this.indexOfPlayerOnTeam[game][team][teamPlayer] = Factor.Plus(teamPlayer, this.cumulativeTeamSizes[game][team]);
							}
							this.playerWeightsByTeam[game][team] = new double[thisDotTeamSizes_game_local3[team]];
						}
					}
				});
			}
			this.Changed_GameCount_teamCount_teamSizes_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of GameCount and teamSizes</summary>
		private void Changed_GameCount_teamSizes()
		{
			if (this.Changed_GameCount_teamSizes_isDone) {
				return ;
			}
			for(int game_Block17 = 0; game_Block17<GamesInBlock[0].Length; game_Block17++) {
				Parallel.For(0, GamesInBlock.Length, delegate(int game_thread17) {
					for(int game_inBlock17 = 0; game_inBlock17<GamesInBlock[game_thread17][game_Block17].Length; game_inBlock17++) {
						int game = GamesInBlock[game_thread17][game_Block17][game_inBlock17];
						this.playerCountInGame[game] = Factor.Sum(this.TeamSizes[game]);
						this.offsetVariableCountInGame[game] = Factor.Product(this.playerCountInGame[game], 2);
						this.playerIsInSquad[game] = new bool[this.playerCountInGame[game]];
						this.isExperienced_reduced[game] = new bool[this.playerCountInGame[game]];
						this.performancesForEventsPrimary_F[game] = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
						for(int playerInGame = 0; playerInGame<this.playerCountInGame[game]; playerInGame++) {
							this.performancesForEventsPrimary_F[game][playerInGame] = Gaussian.Uniform();
						}
						this.enemyAverageCopy_B[game] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
						this.enemyAverageQuit_B[game] = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
						this.performancesForEvents_B[game] = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
						this.playerPerfQuit_B[game] = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
						this.performancesForEventsPrimary_rep_B_toDef[game] = new DistributionStructArray<Gaussian,double>(this.playerCountInGame[game]);
						this.playerPerfCopy_B[game] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
						this.EventsPerMinutePerformanceMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
						this.EventsPerMinuteOffset_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
						this.EventsPerMinuteEnemyMultiplier_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game] = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerCountInGame[game]);
						this.EventsPerMinutePrecision_itemPlayerConditionsToLearnInGame_game__playerInGame__B[game] = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.playerCountInGame[game]);
					}
				});
			}
			this.Changed_GameCount_teamSizes_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of InitialCombinedVariableCount</summary>
		private void Changed_InitialCombinedVariableCount()
		{
			if (this.Changed_InitialCombinedVariableCount_isDone) {
				return ;
			}
			this.initialCombinedVariables_B = new DistributionStructArray<Gaussian,double>(this.initialCombinedVariableCount);
			Parallel.For(0, this.initialCombinedVariableCount, delegate(int initialCombinedVariable) {
				this.initialCombinedVariables_B[initialCombinedVariable] = Gaussian.Uniform();
			});
			this.Changed_InitialCombinedVariableCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of InitialSkillOffsetConditions and PlayerInConditionsCount and SkillOffsetPriorPrecision and SkillPriorMean</summary>
		private void Changed_InitialSkillOffsetConditions_PlayerInConditionsCount_SkillOffsetPriorPrecision_SkillPriorMea39()
		{
			if (this.Changed_InitialSkillOffsetConditions_PlayerInConditionsCount_SkillOffsetPriorPrecision_SkillPriorMea39_isDone) {
				return ;
			}
			Parallel.For(0, this.playerInConditionsCount, delegate(int playerInConditions) {
				int thisDotinitialSkillOffsetConditions_playerInConditions_local = default(int);
				thisDotinitialSkillOffsetConditions_playerInConditions_local = this.initialSkillOffsetConditions[playerInConditions];
				this.skillOffsetPriorSample_F[playerInConditions] = GaussianOpBase.SampleAverageConditional(this.skillPriorMean[thisDotinitialSkillOffsetConditions_playerInConditions_local], this.skillOffsetPriorPrecision[thisDotinitialSkillOffsetConditions_playerInConditions_local]);
			});
			this.Changed_InitialSkillOffsetConditions_PlayerInConditionsCount_SkillOffsetPriorPrecision_SkillPriorMea39_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of LoggingAction</summary>
		private void Changed_LoggingAction()
		{
			if (this.Changed_LoggingAction_isDone) {
				return ;
			}
			this.LoggingAction_marginal = new PointMass<Action<string>>(this.loggingAction);
			this.Changed_LoggingAction_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerConditionsCount</summary>
		private void Changed_PlayerConditionsCount()
		{
			if (this.Changed_PlayerConditionsCount_isDone) {
				return ;
			}
			this.SkillPriorMean_marginal = new DistributionStructArray<Gaussian,double>(this.playerConditionsCount, delegate(int playerConditions) {
				return Gaussian.Uniform();
			});
			this.SkillOffsetPriorPrecision_marginal = new DistributionStructArray<TruncatedGamma,double>(this.playerConditionsCount, delegate(int playerConditions) {
				return TruncatedGamma.Uniform();
			});
			this.SkillOffsetChangePrecisionPerMinute_marginal = new DistributionStructArray<TruncatedGamma,double>(this.playerConditionsCount, delegate(int playerConditions) {
				return TruncatedGamma.Uniform();
			});
			this.SkillOffsetChangePrecisionPerGame_marginal = new DistributionStructArray<TruncatedGamma,double>(this.playerConditionsCount, delegate(int playerConditions) {
				return TruncatedGamma.Uniform();
			});
			this.BaseSkillWeights_marginal = new DistributionStructArray<TruncatedGaussian,double>(this.playerConditionsCount, delegate(int playerConditions) {
				return TruncatedGaussian.Uniform();
			});
			this.DrawMargin_marginal = new DistributionStructArray<TruncatedGaussian,double>(this.playerConditionsCount, delegate(int playerConditions) {
				return TruncatedGaussian.Uniform();
			});
			this.QuitThreshold_marginal = new DistributionStructArray<Gaussian,double>(this.playerConditionsCount, delegate(int playerConditions) {
				return Gaussian.Uniform();
			});
			this.QuitThresholdPrecision_marginal = new DistributionStructArray<Gamma,double>(this.playerConditionsCount, delegate(int playerConditions) {
				return Gamma.Uniform();
			});
			this.QuitProbability_marginal = new DistributionStructArray<Beta,double>(this.playerConditionsCount, delegate(int playerConditions) {
				return Beta.Uniform();
			});
			this.DisconnectProbability_marginal = new DistributionStructArray<Beta,double>(this.playerConditionsCount, delegate(int playerConditions) {
				return Beta.Uniform();
			});
			this.EventsPerMinutePrecision_marginal_F = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.playerConditionsCount);
			this.EventsPerMinuteEnemyMultiplier_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerConditionsCount);
			this.EventsPerMinuteOffset_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerConditionsCount);
			this.EventsPerMinutePerformanceMultiplier_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerConditionsCount);
			this.eventsPerMinutePriorPrecision_uses_B = new Gamma[this.playerConditionsCount][][];
			this.eventsPerMinutePriorPrecision_uses_F = new Gamma[this.playerConditionsCount][][];
			this.eventsPerMinutePriorPrecision_uses_F_playerConditions__eventType__marginal = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.playerConditionsCount);
			this.eventsPerMinutePriorPrecision_uses_B_playerConditions__eventType__toDef = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.playerConditionsCount);
			this.EventsPerMinutePerformanceMultiplier_depth0_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerConditionsCount);
			this.EventsPerMinutePerformanceMultiplier_use_B_playerConditions__eventType__buffer = new RpropBufferData[this.playerConditionsCount][];
			this.EventsPerMinuteOffset_depth0_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerConditionsCount);
			this.EventsPerMinuteOffset_use_B_playerConditions__eventType__buffer = new RpropBufferData[this.playerConditionsCount][];
			this.EventsPerMinuteEnemyMultiplier_depth0_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerConditionsCount);
			this.EventsPerMinuteEnemyMultiplier_use_B_playerConditions__eventType__buffer = new RpropBufferData[this.playerConditionsCount][];
			this.EventsPerMinutePrecision_depth0_B = new DistributionRefArray<DistributionStructArray<Gamma,double>,double[]>(this.playerConditionsCount);
			this.EventsPerMinutePrecision_use_B_playerConditions__eventType__buffer0_ = new RpropBufferData[this.playerConditionsCount][];
			this.Changed_PlayerConditionsCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerConditionsCount and QuitProbability</summary>
		private void Changed_PlayerConditionsCount_QuitProbability()
		{
			if (this.Changed_PlayerConditionsCount_QuitProbability_isDone) {
				return ;
			}
			this.QuitProbability_marginal = Distribution.SetPoint<DistributionStructArray<Beta,double>,double[]>(this.QuitProbability_marginal, this.quitProbability);
			this.Changed_PlayerConditionsCount_QuitProbability_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerConditionsCount and QuitThreshold</summary>
		private void Changed_PlayerConditionsCount_QuitThreshold()
		{
			if (this.Changed_PlayerConditionsCount_QuitThreshold_isDone) {
				return ;
			}
			this.QuitThreshold_marginal = Distribution.SetPoint<DistributionStructArray<Gaussian,double>,double[]>(this.QuitThreshold_marginal, this.quitThreshold);
			this.Changed_PlayerConditionsCount_QuitThreshold_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerConditionsCount and QuitThresholdPrecision</summary>
		private void Changed_PlayerConditionsCount_QuitThresholdPrecision()
		{
			if (this.Changed_PlayerConditionsCount_QuitThresholdPrecision_isDone) {
				return ;
			}
			this.QuitThresholdPrecision_marginal = Distribution.SetPoint<DistributionStructArray<Gamma,double>,double[]>(this.QuitThresholdPrecision_marginal, this.quitThresholdPrecision);
			this.Changed_PlayerConditionsCount_QuitThresholdPrecision_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerConditionsCount and SkillOffsetChangePrecisionPerGame</summary>
		private void Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerGame()
		{
			if (this.Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerGame_isDone) {
				return ;
			}
			this.SkillOffsetChangePrecisionPerGame_marginal = Distribution.SetPoint<DistributionStructArray<TruncatedGamma,double>,double[]>(this.SkillOffsetChangePrecisionPerGame_marginal, this.skillOffsetChangePrecisionPerGame);
			this.Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerGame_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerConditionsCount and SkillOffsetChangePrecisionPerMinute</summary>
		private void Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerMinute()
		{
			if (this.Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerMinute_isDone) {
				return ;
			}
			this.SkillOffsetChangePrecisionPerMinute_marginal = Distribution.SetPoint<DistributionStructArray<TruncatedGamma,double>,double[]>(this.SkillOffsetChangePrecisionPerMinute_marginal, this.skillOffsetChangePrecisionPerMinute);
			this.Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerMinute_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerConditionsCount and SkillOffsetPriorPrecision</summary>
		private void Changed_PlayerConditionsCount_SkillOffsetPriorPrecision()
		{
			if (this.Changed_PlayerConditionsCount_SkillOffsetPriorPrecision_isDone) {
				return ;
			}
			this.SkillOffsetPriorPrecision_marginal = Distribution.SetPoint<DistributionStructArray<TruncatedGamma,double>,double[]>(this.SkillOffsetPriorPrecision_marginal, this.skillOffsetPriorPrecision);
			this.Changed_PlayerConditionsCount_SkillOffsetPriorPrecision_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerConditionsCount and SkillPriorMean</summary>
		private void Changed_PlayerConditionsCount_SkillPriorMean()
		{
			if (this.Changed_PlayerConditionsCount_SkillPriorMean_isDone) {
				return ;
			}
			this.SkillPriorMean_marginal = Distribution.SetPoint<DistributionStructArray<Gaussian,double>,double[]>(this.SkillPriorMean_marginal, this.skillPriorMean);
			this.Changed_PlayerConditionsCount_SkillPriorMean_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerConditionsCount and SquadOffset and SquadSizeBucketCount</summary>
		private void Changed_PlayerConditionsCount_SquadOffset_SquadSizeBucketCount()
		{
			if (this.Changed_PlayerConditionsCount_SquadOffset_SquadSizeBucketCount_isDone) {
				return ;
			}
			this.SquadOffset_marginal = Distribution.SetPoint<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,double[][]>(this.SquadOffset_marginal, this.squadOffset);
			this.Changed_PlayerConditionsCount_SquadOffset_SquadSizeBucketCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerConditionsCount and SquadSizeBucketCount</summary>
		private void Changed_PlayerConditionsCount_SquadSizeBucketCount()
		{
			if (this.Changed_PlayerConditionsCount_SquadSizeBucketCount_isDone) {
				return ;
			}
			this.SquadOffset_marginal = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.playerConditionsCount, delegate(int playerConditions) {
				return new DistributionStructArray<Gaussian,double>(this.squadSizeBucketCount[playerConditions], delegate(int squadSizeBucket) {
					return Gaussian.Uniform();
				});
			});
			this.Changed_PlayerConditionsCount_SquadSizeBucketCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerCount</summary>
		private void Changed_PlayerCount()
		{
			if (this.Changed_PlayerCount_isDone) {
				return ;
			}
			this.baseSkillPriorSample_F_reduced = default(Gaussian);
			if (this.playerCount>0) {
				this.baseSkillPriorSample_F_reduced = Gaussian.Uniform();
			}
			this.baseSkillPriorSample_F = new DistributionStructArray<Gaussian,double>(this.playerCount);
			Parallel.For(0, this.playerCount, delegate(int player) {
				this.baseSkillPriorSample_F[player] = this.baseSkillPriorSample_F_reduced;
			});
			this.Changed_PlayerCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of PlayerInConditionsCount</summary>
		private void Changed_PlayerInConditionsCount()
		{
			if (this.Changed_PlayerInConditionsCount_isDone) {
				return ;
			}
			this.skillOffsetPriorSample_F = new DistributionStructArray<Gaussian,double>(this.playerInConditionsCount);
			Parallel.For(0, this.playerInConditionsCount, delegate(int playerInConditions) {
				this.skillOffsetPriorSample_F[playerInConditions] = Gaussian.Uniform();
			});
			this.Changed_PlayerInConditionsCount_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of SkillVariableCount</summary>
		private void Changed_SkillVariableCount()
		{
			if (this.Changed_SkillVariableCount_isDone) {
				return ;
			}
			this.skillInConditions_uses_F[1] = new DistributionStructArray<Gaussian,double>(this.skillVariableCount);
			Parallel.For(0, this.skillVariableCount, delegate(int skillVariable) {
				this.skillInConditions_uses_F[1][skillVariable] = Gaussian.Uniform();
			});
			this.skillInConditions_F_reduced = default(Gaussian);
			if (this.skillVariableCount>0) {
				this.skillInConditions_F_reduced = Gaussian.Uniform();
			}
			this.skillInConditions_F = new DistributionStructArray<Gaussian,double>(this.skillVariableCount);
			if (this.skillVariableCount>0) {
				this.skillInConditions_F_reduced = GaussianOpBase.SampleAverageConditional(0.0, 1E-10);
			}
			Parallel.For(0, this.skillVariableCount, delegate(int skillVariable) {
				this.skillInConditions_F[skillVariable] = this.skillInConditions_F_reduced;
				this.skillInConditions_F[skillVariable] = this.skillInConditions_F_reduced;
			});
			this.skillInConditions_uses_B[0] = new DistributionStructArray<Gaussian,double>(this.skillVariableCount);
			Parallel.For(0, this.skillVariableCount, delegate(int skillVariable) {
				this.skillInConditions_uses_B[0][skillVariable] = Gaussian.Uniform();
			});
			this.skillInConditions_marginal_F = new DistributionStructArray<Gaussian,double>(this.skillVariableCount);
			Parallel.For(0, this.skillVariableCount, delegate(int skillVariable) {
				this.skillInConditions_marginal_F[skillVariable] = Gaussian.Uniform();
			});
			this.Changed_SkillVariableCount_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.BaseSkillPriorPrecision_marginal = TruncatedGamma.Uniform();
			this.BaseSkillChangePrecisionPerMinute_marginal = TruncatedGamma.Uniform();
			this.BaseSkillChangePrecisionPerGame_marginal = TruncatedGamma.Uniform();
			this.skillInConditions_uses_F = new DistributionStructArray<Gaussian,double>[2];
			this.skillInConditions_uses_B = new DistributionStructArray<Gaussian,double>[2];
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'DisconnectProbability' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Beta,double> DisconnectProbabilityMarginal()
		{
			return this.DisconnectProbability_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'DrawMargin' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<TruncatedGaussian,double> DrawMarginMarginal()
		{
			return this.DrawMargin_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'EventsPerMinuteEnemyMultiplier' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> EventsPerMinuteEnemyMultiplierMarginal()
		{
			return this.EventsPerMinuteEnemyMultiplier_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'EventsPerMinuteOffset' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> EventsPerMinuteOffsetMarginal()
		{
			return this.EventsPerMinuteOffset_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'EventsPerMinutePerformanceMultiplier' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> EventsPerMinutePerformanceMultiplierMarginal()
		{
			return this.EventsPerMinutePerformanceMultiplier_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'EventsPerMinutePrecision' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gamma,double>,double[]> EventsPerMinutePrecisionMarginal()
		{
			return this.EventsPerMinutePrecision_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35_isDone = false;
					this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34_isDone = false;
					this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37_isDone = false;
					this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33_isDone = false;
					this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45_isDone = false;
					this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47_isDone = false;
					this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32_isDone = false;
					this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30_isDone = false;
					this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29_isDone = false;
					this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27_isDone = false;
				}
				this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48_isDone = false;
			}
			this.Changed_PlayerCount();
			this.Changed_BaseSkillPriorPrecision_PlayerCount();
			this.Changed_PlayerInConditionsCount();
			this.Changed_InitialSkillOffsetConditions_PlayerInConditionsCount_SkillOffsetPriorPrecision_SkillPriorMea39();
			this.Changed_LoggingAction();
			this.Changed_PlayerConditionsCount_SquadSizeBucketCount();
			this.Changed_PlayerConditionsCount_SquadOffset_SquadSizeBucketCount();
			this.Changed_ExperienceBucketCountInConditions_PlayerConditionsCount();
			this.Changed_ExperienceBucketCountInConditions_PlayerConditionsCount_SkillOffsetChangeMeanByExperience();
			this.Constant();
			this.Changed_GameCount();
			this.Changed_DrawWithPreviousInGame_GameCount_teamCount();
			this.Changed_GameCount_teamCount();
			this.Changed_GameCount_numberOfIterationsDecreased_teamCount_Init_BaseSkillChangePrecisionPerGame_BaseSki35(initialise);
			this.Changed_GameCount_teamCount_teamSizes();
			this.Changed_GameCount_PlayerWeights_teamCount_teamSizes();
			this.Changed_GameCount_teamSizes();
			this.Changed_GameCount_PlayerQuitInGameFlat_teamSizes();
			this.Changed_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecisionPerGame_BaseSki34(initialise);
			this.Changed_GameCount_SubarrayChangeVariableCountInGame_teamSizes();
			this.Changed_GameCount_numberOfIterationsDecreased_SubarrayChangeVariableCountInGame_teamSizes_Init_BaseS37(initialise);
			this.Changed_EventTypeCount_GameCount_teamSizes();
			this.Changed_EventTypeCount_GameCount_numberOfIterationsDecreased_teamSizes_Init_BaseSkillChangePrecision33(initialise);
			this.Changed_EventTypeCount_ExperienceForConditionsInGame_ExperienceThreshold_GameCount_teamSizes();
			this.Changed_GameCount_SquadSizes_teamSizes();
			this.Changed_InitialCombinedVariableCount();
			this.Changed_BaseSkillPriorPrecision_InitialCombinedVariableCount_InitialSkillOffsetConditions_PlayerCoun43();
			this.Changed_SkillVariableCount();
			this.Changed_BaseSkillPriorPrecision_InitialCombinedIndices_InitialCombinedVariableCount_InitialSkillOffs44();
			this.Changed_BaseSkillPriorPrecision_CombinedVariableIndexInGame_GameCount_InitialCombinedIndices_Initial45(initialise);
			this.Changed_PlayerConditionsCount();
			this.Changed_EventTypeCount_PlayerConditionsCount();
			this.Changed_EventTypeCount_numberOfIterationsDecreased_PlayerConditionsCount_Init_BaseSkillChangePrecisi47(initialise);
			this.Changed_EventsPerMinutePerformanceMultiplierInitializer_numberOfIterationsDecreased_PlayerConditions32(initialise);
			this.Changed_EventsPerMinuteOffsetInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_Base30(initialise);
			this.Changed_EventsPerMinuteEnemyMultiplierInitializer_numberOfIterationsDecreased_PlayerConditionsCount_29(initialise);
			this.Changed_EventsPerMinutePrecisionInitializer_numberOfIterationsDecreased_PlayerConditionsCount_Init_B27(initialise);
			this.Changed_BaseSkillChangePrecisionPerGame_BaseSkillChangePrecisionPerMinute_BaseSkillPriorPrecision_Ba48(numberOfIterations);
			this.Changed_DisconnectProbability_PlayerConditionsCount();
			this.Changed_PlayerConditionsCount_QuitProbability();
			this.Changed_PlayerConditionsCount_QuitThresholdPrecision();
			this.Changed_PlayerConditionsCount_QuitThreshold();
			this.Changed_DrawMargin_PlayerConditionsCount();
			this.Changed_BaseSkillWeights_PlayerConditionsCount();
			this.Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerGame();
			this.Changed_PlayerConditionsCount_SkillOffsetChangePrecisionPerMinute();
			this.Changed_PlayerConditionsCount_SkillOffsetPriorPrecision();
			this.Changed_PlayerConditionsCount_SkillPriorMean();
			this.Changed_BaseSkillChangePrecisionPerGame();
			this.Changed_BaseSkillChangePrecisionPerMinute();
			this.Changed_BaseSkillPriorPrecision();
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="PlayerConditionsCount") {
				return this.PlayerConditionsCount;
			}
			if (variableName=="BaseSkillPriorPrecision") {
				return this.BaseSkillPriorPrecision;
			}
			if (variableName=="BaseSkillPriorPrecisionInitializer") {
				return this.BaseSkillPriorPrecisionInitializer;
			}
			if (variableName=="SkillPriorMean") {
				return this.SkillPriorMean;
			}
			if (variableName=="SkillPriorMeanInitializer") {
				return this.SkillPriorMeanInitializer;
			}
			if (variableName=="SkillOffsetPriorPrecision") {
				return this.SkillOffsetPriorPrecision;
			}
			if (variableName=="SkillOffsetPriorPrecisionInitializer") {
				return this.SkillOffsetPriorPrecisionInitializer;
			}
			if (variableName=="SkillVariableCount") {
				return this.SkillVariableCount;
			}
			if (variableName=="PlayerInConditionsCount") {
				return this.PlayerInConditionsCount;
			}
			if (variableName=="InitialSkillOffsetConditions") {
				return this.InitialSkillOffsetConditions;
			}
			if (variableName=="InitialCombinedVariableCount") {
				return this.InitialCombinedVariableCount;
			}
			if (variableName=="InitialCombinedIndices") {
				return this.InitialCombinedIndices;
			}
			if (variableName=="BaseSkillChangePrecisionPerMinute") {
				return this.BaseSkillChangePrecisionPerMinute;
			}
			if (variableName=="BaseSkillChangePrecisionPerMinuteInitializer") {
				return this.BaseSkillChangePrecisionPerMinuteInitializer;
			}
			if (variableName=="BaseSkillChangePrecisionPerGame") {
				return this.BaseSkillChangePrecisionPerGame;
			}
			if (variableName=="BaseSkillChangePrecisionPerGameInitializer") {
				return this.BaseSkillChangePrecisionPerGameInitializer;
			}
			if (variableName=="SkillOffsetChangePrecisionPerMinute") {
				return this.SkillOffsetChangePrecisionPerMinute;
			}
			if (variableName=="SkillOffsetChangePrecisionPerMinuteInitializer") {
				return this.SkillOffsetChangePrecisionPerMinuteInitializer;
			}
			if (variableName=="SkillOffsetChangePrecisionPerGame") {
				return this.SkillOffsetChangePrecisionPerGame;
			}
			if (variableName=="SkillOffsetChangePrecisionPerGameInitializer") {
				return this.SkillOffsetChangePrecisionPerGameInitializer;
			}
			if (variableName=="BaseSkillWeights") {
				return this.BaseSkillWeights;
			}
			if (variableName=="BaseSkillWeightsInitializer") {
				return this.BaseSkillWeightsInitializer;
			}
			if (variableName=="GameCount") {
				return this.GameCount;
			}
			if (variableName=="teamCount") {
				return this.teamCount;
			}
			if (variableName=="teamSizes") {
				return this.teamSizes;
			}
			if (variableName=="MinutesSinceLastGame") {
				return this.MinutesSinceLastGame;
			}
			if (variableName=="MinutesSinceLastGameInConditions") {
				return this.MinutesSinceLastGameInConditions;
			}
			if (variableName=="PlayerConditionsToLearnInGame") {
				return this.PlayerConditionsToLearnInGame;
			}
			if (variableName=="NoExperienceLastGame") {
				return this.NoExperienceLastGame;
			}
			if (variableName=="NoExperienceLastGameInConditions") {
				return this.NoExperienceLastGameInConditions;
			}
			if (variableName=="PlayerCount") {
				return this.PlayerCount;
			}
			if (variableName=="UpdateChangeVariableCountInGame") {
				return this.UpdateChangeVariableCountInGame;
			}
			if (variableName=="SubarrayChangeVariableCountInGame") {
				return this.SubarrayChangeVariableCountInGame;
			}
			if (variableName=="PreviousSubarrayChangeVariableCountInGame") {
				return this.PreviousSubarrayChangeVariableCountInGame;
			}
			if (variableName=="UpdateSubarrayChangeVariableCountInGame") {
				return this.UpdateSubarrayChangeVariableCountInGame;
			}
			if (variableName=="PreviousChangeVariableSubarrayCountInGame") {
				return this.PreviousChangeVariableSubarrayCountInGame;
			}
			if (variableName=="PreviousChangeVariableSubarrayIndexInGame") {
				return this.PreviousChangeVariableSubarrayIndexInGame;
			}
			if (variableName=="UpdateChangeVariableSubarrayCountInGame") {
				return this.UpdateChangeVariableSubarrayCountInGame;
			}
			if (variableName=="UpdateChangeVariableSubarrayIndexInGame") {
				return this.UpdateChangeVariableSubarrayIndexInGame;
			}
			if (variableName=="CombinedVariableIndexInGame") {
				return this.CombinedVariableIndexInGame;
			}
			if (variableName=="ExperienceBucketCountInConditions") {
				return this.ExperienceBucketCountInConditions;
			}
			if (variableName=="ExperienceForConditionsInGame") {
				return this.ExperienceForConditionsInGame;
			}
			if (variableName=="SkillOffsetChangeMeanByExperience") {
				return this.SkillOffsetChangeMeanByExperience;
			}
			if (variableName=="SkillOffsetChangeMeanPrecision") {
				return this.SkillOffsetChangeMeanPrecision;
			}
			if (variableName=="SkillOffsetChangeMeanByExperienceInitializer") {
				return this.SkillOffsetChangeMeanByExperienceInitializer;
			}
			if (variableName=="performanceVariance") {
				return this.performanceVariance;
			}
			if (variableName=="DrawMargin") {
				return this.DrawMargin;
			}
			if (variableName=="DrawMarginInitializer") {
				return this.DrawMarginInitializer;
			}
			if (variableName=="PlayerWeights") {
				return this.PlayerWeights;
			}
			if (variableName=="DrawMarginConditionsInGame") {
				return this.DrawMarginConditionsInGame;
			}
			if (variableName=="SquadSizeBucketCount") {
				return this.SquadSizeBucketCount;
			}
			if (variableName=="SquadSizes") {
				return this.SquadSizes;
			}
			if (variableName=="SquadOffset") {
				return this.SquadOffset;
			}
			if (variableName=="SquadOffsetInitializer") {
				return this.SquadOffsetInitializer;
			}
			if (variableName=="TeamOrderInGame") {
				return this.TeamOrderInGame;
			}
			if (variableName=="DrawWithPreviousInGame") {
				return this.DrawWithPreviousInGame;
			}
			if (variableName=="EventTypeCount") {
				return this.EventTypeCount;
			}
			if (variableName=="ExperienceThreshold") {
				return this.ExperienceThreshold;
			}
			if (variableName=="LengthInMinutes") {
				return this.LengthInMinutes;
			}
			if (variableName=="EventCountsFlat") {
				return this.EventCountsFlat;
			}
			if (variableName=="EventsPerMinutePerformanceMultiplierInitializer") {
				return this.EventsPerMinutePerformanceMultiplierInitializer;
			}
			if (variableName=="EventsPerMinuteOffsetInitializer") {
				return this.EventsPerMinuteOffsetInitializer;
			}
			if (variableName=="EventsPerMinuteEnemyMultiplierInitializer") {
				return this.EventsPerMinuteEnemyMultiplierInitializer;
			}
			if (variableName=="EventsPerMinutePrecisionInitializer") {
				return this.EventsPerMinutePrecisionInitializer;
			}
			if (variableName=="QuitThreshold") {
				return this.QuitThreshold;
			}
			if (variableName=="QuitThresholdInitializer") {
				return this.QuitThresholdInitializer;
			}
			if (variableName=="QuitThresholdPrecision") {
				return this.QuitThresholdPrecision;
			}
			if (variableName=="QuitThresholdPrecisionInitializer") {
				return this.QuitThresholdPrecisionInitializer;
			}
			if (variableName=="QuitProbability") {
				return this.QuitProbability;
			}
			if (variableName=="QuitProbabilityInitializer") {
				return this.QuitProbabilityInitializer;
			}
			if (variableName=="DisconnectProbability") {
				return this.DisconnectProbability;
			}
			if (variableName=="DisconnectProbabilityInitializer") {
				return this.DisconnectProbabilityInitializer;
			}
			if (variableName=="PlayerQuitInGameFlat") {
				return this.PlayerQuitInGameFlat;
			}
			if (variableName=="ThreadCount") {
				return this.ThreadCount;
			}
			if (variableName=="BlockCount") {
				return this.BlockCount;
			}
			if (variableName=="GameCountInBlock") {
				return this.GameCountInBlock;
			}
			if (variableName=="GamesInBlock") {
				return this.GamesInBlock;
			}
			if (variableName=="LoggingAction") {
				return this.LoggingAction;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'LoggingAction' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Action<string>> LoggingActionMarginal()
		{
			return this.LoggingAction_marginal;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="LoggingAction") {
				return this.LoggingActionMarginal();
			}
			if (variableName=="SquadOffset") {
				return this.SquadOffsetMarginal();
			}
			if (variableName=="SkillOffsetChangeMeanByExperience") {
				return this.SkillOffsetChangeMeanByExperienceMarginal();
			}
			if (variableName=="EventsPerMinutePerformanceMultiplier") {
				return this.EventsPerMinutePerformanceMultiplierMarginal();
			}
			if (variableName=="EventsPerMinuteOffset") {
				return this.EventsPerMinuteOffsetMarginal();
			}
			if (variableName=="EventsPerMinuteEnemyMultiplier") {
				return this.EventsPerMinuteEnemyMultiplierMarginal();
			}
			if (variableName=="EventsPerMinutePrecision") {
				return this.EventsPerMinutePrecisionMarginal();
			}
			if (variableName=="skillInConditions") {
				return this.SkillInConditionsMarginal();
			}
			if (variableName=="DisconnectProbability") {
				return this.DisconnectProbabilityMarginal();
			}
			if (variableName=="QuitProbability") {
				return this.QuitProbabilityMarginal();
			}
			if (variableName=="QuitThresholdPrecision") {
				return this.QuitThresholdPrecisionMarginal();
			}
			if (variableName=="QuitThreshold") {
				return this.QuitThresholdMarginal();
			}
			if (variableName=="DrawMargin") {
				return this.DrawMarginMarginal();
			}
			if (variableName=="BaseSkillWeights") {
				return this.BaseSkillWeightsMarginal();
			}
			if (variableName=="SkillOffsetChangePrecisionPerGame") {
				return this.SkillOffsetChangePrecisionPerGameMarginal();
			}
			if (variableName=="SkillOffsetChangePrecisionPerMinute") {
				return this.SkillOffsetChangePrecisionPerMinuteMarginal();
			}
			if (variableName=="SkillOffsetPriorPrecision") {
				return this.SkillOffsetPriorPrecisionMarginal();
			}
			if (variableName=="SkillPriorMean") {
				return this.SkillPriorMeanMarginal();
			}
			if (variableName=="BaseSkillChangePrecisionPerGame") {
				return this.BaseSkillChangePrecisionPerGameMarginal();
			}
			if (variableName=="BaseSkillChangePrecisionPerMinute") {
				return this.BaseSkillChangePrecisionPerMinuteMarginal();
			}
			if (variableName=="BaseSkillPriorPrecision") {
				return this.BaseSkillPriorPrecisionMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'QuitProbability' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Beta,double> QuitProbabilityMarginal()
		{
			return this.QuitProbability_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'QuitThreshold' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> QuitThresholdMarginal()
		{
			return this.QuitThreshold_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'QuitThresholdPrecision' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gamma,double> QuitThresholdPrecisionMarginal()
		{
			return this.QuitThresholdPrecision_marginal;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="PlayerConditionsCount") {
				this.PlayerConditionsCount = (int)value;
				return ;
			}
			if (variableName=="BaseSkillPriorPrecision") {
				this.BaseSkillPriorPrecision = (double)value;
				return ;
			}
			if (variableName=="BaseSkillPriorPrecisionInitializer") {
				this.BaseSkillPriorPrecisionInitializer = (IDistribution<double>)value;
				return ;
			}
			if (variableName=="SkillPriorMean") {
				this.SkillPriorMean = (double[])value;
				return ;
			}
			if (variableName=="SkillPriorMeanInitializer") {
				this.SkillPriorMeanInitializer = (IDistribution<double[]>)value;
				return ;
			}
			if (variableName=="SkillOffsetPriorPrecision") {
				this.SkillOffsetPriorPrecision = (double[])value;
				return ;
			}
			if (variableName=="SkillOffsetPriorPrecisionInitializer") {
				this.SkillOffsetPriorPrecisionInitializer = (IDistribution<double[]>)value;
				return ;
			}
			if (variableName=="SkillVariableCount") {
				this.SkillVariableCount = (int)value;
				return ;
			}
			if (variableName=="PlayerInConditionsCount") {
				this.PlayerInConditionsCount = (int)value;
				return ;
			}
			if (variableName=="InitialSkillOffsetConditions") {
				this.InitialSkillOffsetConditions = (int[])value;
				return ;
			}
			if (variableName=="InitialCombinedVariableCount") {
				this.InitialCombinedVariableCount = (int)value;
				return ;
			}
			if (variableName=="InitialCombinedIndices") {
				this.InitialCombinedIndices = (int[])value;
				return ;
			}
			if (variableName=="BaseSkillChangePrecisionPerMinute") {
				this.BaseSkillChangePrecisionPerMinute = (double)value;
				return ;
			}
			if (variableName=="BaseSkillChangePrecisionPerMinuteInitializer") {
				this.BaseSkillChangePrecisionPerMinuteInitializer = (IDistribution<double>)value;
				return ;
			}
			if (variableName=="BaseSkillChangePrecisionPerGame") {
				this.BaseSkillChangePrecisionPerGame = (double)value;
				return ;
			}
			if (variableName=="BaseSkillChangePrecisionPerGameInitializer") {
				this.BaseSkillChangePrecisionPerGameInitializer = (IDistribution<double>)value;
				return ;
			}
			if (variableName=="SkillOffsetChangePrecisionPerMinute") {
				this.SkillOffsetChangePrecisionPerMinute = (double[])value;
				return ;
			}
			if (variableName=="SkillOffsetChangePrecisionPerMinuteInitializer") {
				this.SkillOffsetChangePrecisionPerMinuteInitializer = (IDistribution<double[]>)value;
				return ;
			}
			if (variableName=="SkillOffsetChangePrecisionPerGame") {
				this.SkillOffsetChangePrecisionPerGame = (double[])value;
				return ;
			}
			if (variableName=="SkillOffsetChangePrecisionPerGameInitializer") {
				this.SkillOffsetChangePrecisionPerGameInitializer = (IDistribution<double[]>)value;
				return ;
			}
			if (variableName=="BaseSkillWeights") {
				this.BaseSkillWeights = (double[])value;
				return ;
			}
			if (variableName=="BaseSkillWeightsInitializer") {
				this.BaseSkillWeightsInitializer = (IDistribution<double[]>)value;
				return ;
			}
			if (variableName=="GameCount") {
				this.GameCount = (int)value;
				return ;
			}
			if (variableName=="teamCount") {
				this.teamCount = (int[])value;
				return ;
			}
			if (variableName=="teamSizes") {
				this.teamSizes = (int[][])value;
				return ;
			}
			if (variableName=="MinutesSinceLastGame") {
				this.MinutesSinceLastGame = (double[][])value;
				return ;
			}
			if (variableName=="MinutesSinceLastGameInConditions") {
				this.MinutesSinceLastGameInConditions = (double[][])value;
				return ;
			}
			if (variableName=="PlayerConditionsToLearnInGame") {
				this.PlayerConditionsToLearnInGame = (int[][])value;
				return ;
			}
			if (variableName=="NoExperienceLastGame") {
				this.NoExperienceLastGame = (bool[][])value;
				return ;
			}
			if (variableName=="NoExperienceLastGameInConditions") {
				this.NoExperienceLastGameInConditions = (bool[][])value;
				return ;
			}
			if (variableName=="PlayerCount") {
				this.PlayerCount = (int)value;
				return ;
			}
			if (variableName=="UpdateChangeVariableCountInGame") {
				this.UpdateChangeVariableCountInGame = (int[][])value;
				return ;
			}
			if (variableName=="SubarrayChangeVariableCountInGame") {
				this.SubarrayChangeVariableCountInGame = (int[])value;
				return ;
			}
			if (variableName=="PreviousSubarrayChangeVariableCountInGame") {
				this.PreviousSubarrayChangeVariableCountInGame = (int[])value;
				return ;
			}
			if (variableName=="UpdateSubarrayChangeVariableCountInGame") {
				this.UpdateSubarrayChangeVariableCountInGame = (int[])value;
				return ;
			}
			if (variableName=="PreviousChangeVariableSubarrayCountInGame") {
				this.PreviousChangeVariableSubarrayCountInGame = (int[][])value;
				return ;
			}
			if (variableName=="PreviousChangeVariableSubarrayIndexInGame") {
				this.PreviousChangeVariableSubarrayIndexInGame = (int[][][])value;
				return ;
			}
			if (variableName=="UpdateChangeVariableSubarrayCountInGame") {
				this.UpdateChangeVariableSubarrayCountInGame = (int[][])value;
				return ;
			}
			if (variableName=="UpdateChangeVariableSubarrayIndexInGame") {
				this.UpdateChangeVariableSubarrayIndexInGame = (int[][][])value;
				return ;
			}
			if (variableName=="CombinedVariableIndexInGame") {
				this.CombinedVariableIndexInGame = (int[][])value;
				return ;
			}
			if (variableName=="ExperienceBucketCountInConditions") {
				this.ExperienceBucketCountInConditions = (int[])value;
				return ;
			}
			if (variableName=="ExperienceForConditionsInGame") {
				this.ExperienceForConditionsInGame = (int[][])value;
				return ;
			}
			if (variableName=="SkillOffsetChangeMeanByExperience") {
				this.SkillOffsetChangeMeanByExperience = (double[][])value;
				return ;
			}
			if (variableName=="SkillOffsetChangeMeanPrecision") {
				this.SkillOffsetChangeMeanPrecision = (double)value;
				return ;
			}
			if (variableName=="SkillOffsetChangeMeanByExperienceInitializer") {
				this.SkillOffsetChangeMeanByExperienceInitializer = (IDistribution<double[][]>)value;
				return ;
			}
			if (variableName=="performanceVariance") {
				this.performanceVariance = (double)value;
				return ;
			}
			if (variableName=="DrawMargin") {
				this.DrawMargin = (double[])value;
				return ;
			}
			if (variableName=="DrawMarginInitializer") {
				this.DrawMarginInitializer = (IDistribution<double[]>)value;
				return ;
			}
			if (variableName=="PlayerWeights") {
				this.PlayerWeights = (double[][])value;
				return ;
			}
			if (variableName=="DrawMarginConditionsInGame") {
				this.DrawMarginConditionsInGame = (int[])value;
				return ;
			}
			if (variableName=="SquadSizeBucketCount") {
				this.SquadSizeBucketCount = (int[])value;
				return ;
			}
			if (variableName=="SquadSizes") {
				this.SquadSizes = (int[][])value;
				return ;
			}
			if (variableName=="SquadOffset") {
				this.SquadOffset = (double[][])value;
				return ;
			}
			if (variableName=="SquadOffsetInitializer") {
				this.SquadOffsetInitializer = (IDistribution<double[][]>)value;
				return ;
			}
			if (variableName=="TeamOrderInGame") {
				this.TeamOrderInGame = (int[][])value;
				return ;
			}
			if (variableName=="DrawWithPreviousInGame") {
				this.DrawWithPreviousInGame = (bool[][])value;
				return ;
			}
			if (variableName=="EventTypeCount") {
				this.EventTypeCount = (int)value;
				return ;
			}
			if (variableName=="ExperienceThreshold") {
				this.ExperienceThreshold = (int)value;
				return ;
			}
			if (variableName=="LengthInMinutes") {
				this.LengthInMinutes = (double[])value;
				return ;
			}
			if (variableName=="EventCountsFlat") {
				this.EventCountsFlat = (double[][][])value;
				return ;
			}
			if (variableName=="EventsPerMinutePerformanceMultiplierInitializer") {
				this.EventsPerMinutePerformanceMultiplierInitializer = (IDistribution<double[][]>)value;
				return ;
			}
			if (variableName=="EventsPerMinuteOffsetInitializer") {
				this.EventsPerMinuteOffsetInitializer = (IDistribution<double[][]>)value;
				return ;
			}
			if (variableName=="EventsPerMinuteEnemyMultiplierInitializer") {
				this.EventsPerMinuteEnemyMultiplierInitializer = (IDistribution<double[][]>)value;
				return ;
			}
			if (variableName=="EventsPerMinutePrecisionInitializer") {
				this.EventsPerMinutePrecisionInitializer = (IDistribution<double[][]>)value;
				return ;
			}
			if (variableName=="QuitThreshold") {
				this.QuitThreshold = (double[])value;
				return ;
			}
			if (variableName=="QuitThresholdInitializer") {
				this.QuitThresholdInitializer = (IDistribution<double[]>)value;
				return ;
			}
			if (variableName=="QuitThresholdPrecision") {
				this.QuitThresholdPrecision = (double[])value;
				return ;
			}
			if (variableName=="QuitThresholdPrecisionInitializer") {
				this.QuitThresholdPrecisionInitializer = (IDistribution<double[]>)value;
				return ;
			}
			if (variableName=="QuitProbability") {
				this.QuitProbability = (double[])value;
				return ;
			}
			if (variableName=="QuitProbabilityInitializer") {
				this.QuitProbabilityInitializer = (IDistribution<double[]>)value;
				return ;
			}
			if (variableName=="DisconnectProbability") {
				this.DisconnectProbability = (double[])value;
				return ;
			}
			if (variableName=="DisconnectProbabilityInitializer") {
				this.DisconnectProbabilityInitializer = (IDistribution<double[]>)value;
				return ;
			}
			if (variableName=="PlayerQuitInGameFlat") {
				this.PlayerQuitInGameFlat = (bool[][])value;
				return ;
			}
			if (variableName=="ThreadCount") {
				this.ThreadCount = (int)value;
				return ;
			}
			if (variableName=="BlockCount") {
				this.BlockCount = (int)value;
				return ;
			}
			if (variableName=="GameCountInBlock") {
				this.GameCountInBlock = (int[][])value;
				return ;
			}
			if (variableName=="GamesInBlock") {
				this.GamesInBlock = (int[][][])value;
				return ;
			}
			if (variableName=="LoggingAction") {
				this.LoggingAction = (Action<string>)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'skillInConditions' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> SkillInConditionsMarginal()
		{
			return this.skillInConditions_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'SkillOffsetChangeMeanByExperience' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> SkillOffsetChangeMeanByExperienceMarginal()
		{
			return this.SkillOffsetChangeMeanByExperience_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'SkillOffsetChangePrecisionPerGame' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<TruncatedGamma,double> SkillOffsetChangePrecisionPerGameMarginal()
		{
			return this.SkillOffsetChangePrecisionPerGame_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'SkillOffsetChangePrecisionPerMinute' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<TruncatedGamma,double> SkillOffsetChangePrecisionPerMinuteMarginal()
		{
			return this.SkillOffsetChangePrecisionPerMinute_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'SkillOffsetPriorPrecision' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<TruncatedGamma,double> SkillOffsetPriorPrecisionMarginal()
		{
			return this.SkillOffsetPriorPrecision_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'SkillPriorMean' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> SkillPriorMeanMarginal()
		{
			return this.SkillPriorMean_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'SquadOffset' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> SquadOffsetMarginal()
		{
			return this.SquadOffset_marginal;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
